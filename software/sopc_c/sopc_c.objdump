
sopc_c.elf:     file format elf32-littlenios2
sopc_c.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fab8 memsz 0x0000fab8 flags r-x
    LOAD off    0x00010ad8 vaddr 0x0000fad8 paddr 0x000115c4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000130b0 vaddr 0x000130b0 paddr 0x000130b0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f3f4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a0  0000f638  0000f638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000fad8  000115c4  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000130b0  000130b0  000130b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00013210  00013210  000125c4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000125c4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e98  00000000  00000000  000125e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000232c1  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e7b  00000000  00000000  00036741  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b2f9  00000000  00000000  0003f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002014  00000000  00000000  0004a8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000377d  00000000  00000000  0004c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  00050049  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000678b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  000678e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c172  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006c175  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c181  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c182  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006c183  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006c18e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006c199  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006c1a4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0006c1af  2**0
                  CONTENTS, READONLY
 26 .jdi          00005fdf  00000000  00000000  0006c1e6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000394a8  00000000  00000000  000721c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000f638 l    d  .rodata	00000000 .rodata
0000fad8 l    d  .rwdata	00000000 .rwdata
000130b0 l    d  .bss	00000000 .bss
00013210 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sopc_c_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f81e l     O .rodata	00000010 zeroes.4404
00002a64 l     F .text	000000bc __sbprintf
0000f82e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002c74 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000047a4 l     F .text	00000008 __fp_unlock
000047b8 l     F .text	0000019c __sinit.part.1
00004954 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fad8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000ff1c l     O .rwdata	00000020 lc_ctype_charset
0000fefc l     O .rwdata	00000020 lc_message_charset
0000ff3c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f860 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007d50 l     F .text	000000fc __sprint_r.part.0
0000f994 l     O .rodata	00000010 blanks.4348
0000f984 l     O .rodata	00000010 zeroes.4349
000092dc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cf98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d0a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d0d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d1bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d29c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d388 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d55c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000115b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d8dc l     F .text	00000034 alt_dev_reg
00010524 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dbb4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000ddc0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e56c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e9e0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000eb20 l     F .text	0000003c alt_get_errno
0000eb5c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000130e4 g     O .bss	00000004 alt_instruction_exception_handler
00007394 g     F .text	00000074 _mprec_log10
00007480 g     F .text	0000008c __any_on
00009878 g     F .text	00000054 _isatty_r
0000f86c g     O .rodata	00000028 __mprec_tinytens
0000d498 g     F .text	0000007c alt_main
000006e4 g     F .text	000000c0 _puts_r
00013110 g     O .bss	00000100 alt_irq
000098cc g     F .text	00000060 _lseek_r
000115c4 g       *ABS*	00000000 __flash_rwdata_start
0000bac4 g     F .text	00000088 .hidden __eqdf2
00013210 g       *ABS*	00000000 __alt_heap_start
000006a8 g     F .text	0000003c printf
00009ae4 g     F .text	0000009c _wcrtomb_r
00007c10 g     F .text	0000005c __sseek
00004af4 g     F .text	00000010 __sinit
0000998c g     F .text	00000140 __swbuf_r
000055bc g     F .text	0000007c _setlocale_r
0000495c g     F .text	00000068 __sfmoreglue
0000d538 g     F .text	00000024 __malloc_unlock
0000628c g     F .text	0000015c memmove
00004adc g     F .text	00000018 _cleanup
00006510 g     F .text	000000a8 _Balloc
0000bb4c g     F .text	000000dc .hidden __gtdf2
0000ef18 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000981c g     F .text	0000005c _fstat_r
000130c8 g     O .bss	00000004 errno
00007b8c g     F .text	00000008 __seofread
000130d0 g     O .bss	00000004 alt_argv
00019584 g       *ABS*	00000000 _gp
000103a4 g     O .rwdata	00000180 alt_fd_list
0000ef3c g     F .text	00000090 alt_find_dev
00006144 g     F .text	00000148 memcpy
000047ac g     F .text	0000000c _cleanup_r
0000cdb0 g     F .text	000000dc .hidden __floatsidf
0000eaa4 g     F .text	0000007c alt_io_redirect
0000bc28 g     F .text	000000f4 .hidden __ltdf2
0000f638 g       *ABS*	00000000 __DTOR_END__
000007a4 g     F .text	00000014 puts
0000f208 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007a70 g     F .text	00000074 __fpclassifyd
000072f0 g     F .text	000000a4 __ratio
000092c0 g     F .text	0000001c __vfiprintf_internal
0000dfb8 g     F .text	0000021c altera_avalon_jtag_uart_read
00000678 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000a874 g     F .text	00000064 .hidden __udivsi3
0000d1f8 g     F .text	000000a4 isatty
0000f8bc g     O .rodata	000000c8 __mprec_tens
00005638 g     F .text	0000000c __locale_charset
0000f178 g     F .text	00000090 alt_icache_flush
000130c4 g     O .bss	00000004 __malloc_top_pad
0001158c g     O .rwdata	00000004 __mb_cur_max
00005668 g     F .text	0000000c _localeconv_r
0000691c g     F .text	0000003c __i2b
00004f78 g     F .text	000004bc __sfvwrite_r
00007ae4 g     F .text	00000054 _sbrk_r
0000992c g     F .text	00000060 _read_r
000115ac g     O .rwdata	00000004 alt_max_fd
00009510 g     F .text	000000f0 _fclose_r
00004774 g     F .text	00000030 fflush
000130c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a930 g     F .text	000008ac .hidden __adddf3
00007098 g     F .text	0000010c __b2d
0000a244 g     F .text	00000538 .hidden __umoddi3
0000d3c4 g     F .text	000000d4 lseek
00011584 g     O .rwdata	00000004 _global_impure_ptr
0000750c g     F .text	00000564 _realloc_r
00013210 g       *ABS*	00000000 __bss_end
0000e8f0 g     F .text	000000f0 alt_iic_isr_register
0000ee10 g     F .text	00000108 alt_tick
00009ccc g     F .text	00000578 .hidden __udivdi3
00009778 g     F .text	00000024 _fputwc_r
0000f894 g     O .rodata	00000028 __mprec_bigtens
00006700 g     F .text	00000104 __s2b
0000ce8c g     F .text	000000a8 .hidden __floatunsidf
00006dd8 g     F .text	00000060 __mcmp
00004b14 g     F .text	00000018 __fp_lock_all
0000e8a4 g     F .text	0000004c alt_ic_irq_enabled
0000ed74 g     F .text	0000009c alt_alarm_stop
000130d8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001037c g     O .rwdata	00000028 alt_dev_null
0000e524 g     F .text	00000048 alt_dcache_flush_all
00006804 g     F .text	00000068 __hi0bits
0000cd30 g     F .text	00000080 .hidden __fixdfsi
000115c4 g       *ABS*	00000000 __ram_rwdata_end
000115a4 g     O .rwdata	00000008 alt_dev_list
0000d7e4 g     F .text	000000f8 write
0000fad8 g       *ABS*	00000000 __ram_rodata_end
0000d10c g     F .text	000000b0 fstat
0000bc28 g     F .text	000000f4 .hidden __ledf2
00006b50 g     F .text	00000140 __pow5mult
00007e64 g     F .text	0000145c ___vfiprintf_internal_r
000130b8 g     O .bss	00000004 __nlocale_changed
0000a8d8 g     F .text	00000058 .hidden __umodsi3
00013210 g       *ABS*	00000000 end
0000daf4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f638 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000cf34 g     F .text	00000064 .hidden __clzsi2
0000e1d4 g     F .text	00000224 altera_avalon_jtag_uart_write
00004b04 g     F .text	00000004 __sfp_lock_acquire
00006060 g     F .text	000000e4 memchr
00000850 g     F .text	000021f8 ___vfprintf_internal_r
00004c68 g     F .text	00000310 _free_r
00005644 g     F .text	00000010 __locale_mb_cur_max
0000f484 g     F .text	00000180 __call_exitprocs
000130b4 g     O .bss	00000004 __mlocale_changed
00011590 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
000130dc g     O .bss	00000004 _alt_tick_rate
00006c90 g     F .text	00000148 __lshift
000130e0 g     O .bss	00000004 _alt_nticks
0000d598 g     F .text	000000fc read
0000d948 g     F .text	00000048 alt_sys_init
0000f36c g     F .text	00000118 __register_exitproc
00006958 g     F .text	000001f8 __multiply
0000de60 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fad8 g       *ABS*	00000000 __ram_rwdata_start
0000f638 g       *ABS*	00000000 __ram_rodata_start
000130e8 g     O .bss	00000028 __malloc_current_mallinfo
000071a4 g     F .text	0000014c __d2b
0000d990 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f0d4 g     F .text	000000a4 alt_get_fd
000093f8 g     F .text	00000054 _close_r
0000f2f0 g     F .text	0000007c memcmp
0000da50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013210 g       *ABS*	00000000 __alt_stack_base
0000daa0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002b20 g     F .text	00000154 __swsetup_r
0000b1dc g     F .text	000008e8 .hidden __divdf3
000049c4 g     F .text	00000118 __sfp
00007408 g     F .text	00000078 __copybits
0000ff74 g     O .rwdata	00000408 __malloc_av_
00004b10 g     F .text	00000004 __sinit_lock_release
0000bd1c g     F .text	00000718 .hidden __muldf3
00007b38 g     F .text	00000054 __sread
0000efcc g     F .text	00000108 alt_find_file
0000e5a8 g     F .text	000000a4 alt_dev_llist_insert
0000d514 g     F .text	00000024 __malloc_lock
0000d6f8 g     F .text	000000b0 sbrk
00004718 g     F .text	0000005c _fflush_r
0000944c g     F .text	000000c4 _calloc_r
000130b0 g       *ABS*	00000000 __bss_start
000063e8 g     F .text	00000128 memset
00000290 g     F .text	000003e8 main
000130d4 g     O .bss	00000004 alt_envp
000130bc g     O .bss	00000004 __malloc_max_total_mem
0000d9f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009acc g     F .text	00000018 __swbuf
00007c6c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00009600 g     F .text	00000014 fclose
00002e74 g     F .text	00001688 _dtoa_r
00005854 g     F .text	0000080c _malloc_r
00009c40 g     F .text	00000030 __ascii_wctomb
000115b0 g     O .rwdata	00000004 alt_errno
00005434 g     F .text	000000c4 _fwalk
0000a77c g     F .text	00000084 .hidden __divsi3
00004b44 g     F .text	00000124 _malloc_trim_r
0000f638 g       *ABS*	00000000 __CTOR_END__
00007c74 g     F .text	000000dc strcmp
0000f638 g       *ABS*	00000000 __flash_rodata_start
0000f638 g       *ABS*	00000000 __DTOR_LIST__
0000bac4 g     F .text	00000088 .hidden __nedf2
0000d910 g     F .text	00000038 alt_irq_init
0000d694 g     F .text	00000064 alt_release_fd
0000f9a4 g     O .rodata	00000100 .hidden __clz_tab
000130b0 g     O .bss	00000004 _PathLocale
0000f2a4 g     F .text	00000014 atexit
00009398 g     F .text	00000060 _write_r
00005674 g     F .text	00000018 setlocale
00011588 g     O .rwdata	00000004 _impure_ptr
000130cc g     O .bss	00000004 alt_argc
000044fc g     F .text	0000021c __sflush_r
0000e6ac g     F .text	00000060 _do_dtors
00005660 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00007034 g     F .text	00000064 __ulp
00004b2c g     F .text	00000018 __fp_unlock_all
0001159c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000568c g     F .text	0000000c localeconv
0000e740 g     F .text	00000050 alt_ic_isr_register
000115c4 g       *ABS*	00000000 _edata
00013210 g       *ABS*	00000000 _end
00009614 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000dec8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000e818 g     F .text	0000008c alt_ic_irq_disable
00007b94 g     F .text	0000007c __swrite
00011594 g     O .rwdata	00000004 __malloc_trim_threshold
00005654 g     F .text	0000000c __locale_msgcharset
0000f2b8 g     F .text	00000038 exit
000054f8 g     F .text	000000c4 _fwalk_reent
00006e38 g     F .text	000001fc __mdiff
0000a800 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004b08 g     F .text	00000004 __sfp_lock_release
0000f604 g     F .text	00000034 _exit
0000e3f8 g     F .text	0000012c alt_alarm_start
00005698 g     F .text	000001bc __smakebuf_r
000007b8 g     F .text	00000098 strlen
0000ec20 g     F .text	00000154 open
0000bb4c g     F .text	000000dc .hidden __gedf2
00011598 g     O .rwdata	00000004 __wctomb
00007e4c g     F .text	00000018 __sprint_r
0000e70c g     F .text	00000034 alt_icache_flush_all
000115b8 g     O .rwdata	00000004 alt_priority_mask
0000e790 g     F .text	00000088 alt_ic_irq_enable
00002a48 g     F .text	0000001c __vfprintf_internal
00009c70 g     F .text	0000005c _wctomb_r
0000c434 g     F .text	000008fc .hidden __subdf3
0000686c g     F .text	000000b0 __lo0bits
000115bc g     O .rwdata	00000008 alt_alarm_list
0000e64c g     F .text	00000060 _do_ctors
00009b80 g     F .text	000000c0 wcrtomb
0000cfd4 g     F .text	000000d0 close
0000d304 g     F .text	00000084 alt_load
0000979c g     F .text	00000080 fputwc
00004b0c g     F .text	00000004 __sinit_lock_acquire
000065e0 g     F .text	00000120 __multadd
000065b8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108c4404 	addi	r2,r2,12560
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108c4404 	addi	r2,r2,12560
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6d817 	ldw	r2,-25760(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6d817 	ldw	r2,-25760(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a56114 	ori	gp,gp,38276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108c2c14 	ori	r2,r2,12464

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18cc8414 	ori	r3,r3,12816

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d3040 	call	d304 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d4980 	call	d498 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xfffe028c>

00000290 <main>:

#define MAXNUM_WORDS   SDRAM_CONTROLLER_0_SPAN/2
			//For the SDRAM on DE1-SoC, the size is 64MB=67108864 Byte (SDRAM_SPAN)

int main()
{
     290:	defff704 	addi	sp,sp,-36
     294:	dfc00815 	stw	ra,32(sp)
     298:	df000715 	stw	fp,28(sp)
     29c:	df000704 	addi	fp,sp,28

  int i;
  int char_err_num=0, short_err_num=0, int_err_num=0;
     2a0:	e03ffa15 	stw	zero,-24(fp)
     2a4:	e03ffb15 	stw	zero,-20(fp)
     2a8:	e03ffc15 	stw	zero,-16(fp)
   int *int_ptr;
   int aInt;

   int charsize, shortsize, intsize;

   charsize=sizeof(aChar);
     2ac:	00800044 	movi	r2,1
     2b0:	e0bffd15 	stw	r2,-12(fp)
   shortsize=sizeof(aShort);
     2b4:	00800084 	movi	r2,2
     2b8:	e0bffe15 	stw	r2,-8(fp)
   intsize=sizeof(aInt);
     2bc:	00800104 	movi	r2,4
     2c0:	e0bfff15 	stw	r2,-4(fp)
   printf("the sizeof char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);
     2c4:	e1ffff17 	ldw	r7,-4(fp)
     2c8:	e1bffe17 	ldw	r6,-8(fp)
     2cc:	e17ffd17 	ldw	r5,-12(fp)
     2d0:	01000074 	movhi	r4,1
     2d4:	213d8e04 	addi	r4,r4,-2504
     2d8:	00006a80 	call	6a8 <printf>

       //----------------TEST CHAR-----------------------------------

      printf("\n writing chars.....\n");
     2dc:	01000074 	movhi	r4,1
     2e0:	213d9a04 	addi	r4,r4,-2456
     2e4:	00007a40 	call	7a4 <puts>
      for (i=0; i<5; i++) {
     2e8:	e03ff915 	stw	zero,-28(fp)
     2ec:	00001e06 	br	368 <main+0xd8>
               *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
     2f0:	e0fff917 	ldw	r3,-28(fp)
     2f4:	00810034 	movhi	r2,1024
     2f8:	1885883a 	add	r2,r3,r2
     2fc:	1009883a 	mov	r4,r2
     300:	e0fff917 	ldw	r3,-28(fp)
     304:	00a00034 	movhi	r2,32768
     308:	10801fc4 	addi	r2,r2,127
     30c:	1884703a 	and	r2,r3,r2
     310:	1000040e 	bge	r2,zero,324 <main+0x94>
     314:	10bfffc4 	addi	r2,r2,-1
     318:	00ffe004 	movi	r3,-128
     31c:	10c4b03a 	or	r2,r2,r3
     320:	10800044 	addi	r2,r2,1
     324:	20800005 	stb	r2,0(r4)
               printf("The written character is %d\n",i%128 );
     328:	e0fff917 	ldw	r3,-28(fp)
     32c:	00a00034 	movhi	r2,32768
     330:	10801fc4 	addi	r2,r2,127
     334:	1884703a 	and	r2,r3,r2
     338:	1000040e 	bge	r2,zero,34c <main+0xbc>
     33c:	10bfffc4 	addi	r2,r2,-1
     340:	00ffe004 	movi	r3,-128
     344:	10c4b03a 	or	r2,r2,r3
     348:	10800044 	addi	r2,r2,1
     34c:	100b883a 	mov	r5,r2
     350:	01000074 	movhi	r4,1
     354:	213da004 	addi	r4,r4,-2432
     358:	00006a80 	call	6a8 <printf>
   printf("the sizeof char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);

       //----------------TEST CHAR-----------------------------------

      printf("\n writing chars.....\n");
      for (i=0; i<5; i++) {
     35c:	e0bff917 	ldw	r2,-28(fp)
     360:	10800044 	addi	r2,r2,1
     364:	e0bff915 	stw	r2,-28(fp)
     368:	e0bff917 	ldw	r2,-28(fp)
     36c:	10800150 	cmplti	r2,r2,5
     370:	103fdf1e 	bne	r2,zero,2f0 <__alt_data_end+0xfffe02f0>
               *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
               printf("The written character is %d\n",i%128 );
      }

      printf("\n testing chars.....\n");
     374:	01000074 	movhi	r4,1
     378:	213da804 	addi	r4,r4,-2400
     37c:	00007a40 	call	7a4 <puts>
      for (i=0; i<5; i++) {
     380:	e03ff915 	stw	zero,-28(fp)
     384:	00002206 	br	410 <main+0x180>
    	  printf("The read character is %d\n", (* (char*)(BASE+i)));
     388:	e0fff917 	ldw	r3,-28(fp)
     38c:	00810034 	movhi	r2,1024
     390:	1885883a 	add	r2,r3,r2
     394:	10800003 	ldbu	r2,0(r2)
     398:	10803fcc 	andi	r2,r2,255
     39c:	1080201c 	xori	r2,r2,128
     3a0:	10bfe004 	addi	r2,r2,-128
     3a4:	100b883a 	mov	r5,r2
     3a8:	01000074 	movhi	r4,1
     3ac:	213dae04 	addi	r4,r4,-2376
     3b0:	00006a80 	call	6a8 <printf>
          if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
     3b4:	e0fff917 	ldw	r3,-28(fp)
     3b8:	00810034 	movhi	r2,1024
     3bc:	1885883a 	add	r2,r3,r2
     3c0:	10800003 	ldbu	r2,0(r2)
     3c4:	10c03fcc 	andi	r3,r2,255
     3c8:	18c0201c 	xori	r3,r3,128
     3cc:	18ffe004 	addi	r3,r3,-128
     3d0:	e13ff917 	ldw	r4,-28(fp)
     3d4:	00a00034 	movhi	r2,32768
     3d8:	10801fc4 	addi	r2,r2,127
     3dc:	2084703a 	and	r2,r4,r2
     3e0:	1000040e 	bge	r2,zero,3f4 <main+0x164>
     3e4:	10bfffc4 	addi	r2,r2,-1
     3e8:	013fe004 	movi	r4,-128
     3ec:	1104b03a 	or	r2,r2,r4
     3f0:	10800044 	addi	r2,r2,1
     3f4:	18800326 	beq	r3,r2,404 <main+0x174>
                   char_err_num++;
     3f8:	e0bffa17 	ldw	r2,-24(fp)
     3fc:	10800044 	addi	r2,r2,1
     400:	e0bffa15 	stw	r2,-24(fp)
               *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
               printf("The written character is %d\n",i%128 );
      }

      printf("\n testing chars.....\n");
      for (i=0; i<5; i++) {
     404:	e0bff917 	ldw	r2,-28(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0bff915 	stw	r2,-28(fp)
     410:	e0bff917 	ldw	r2,-28(fp)
     414:	10800150 	cmplti	r2,r2,5
     418:	103fdb1e 	bne	r2,zero,388 <__alt_data_end+0xfffe0388>
          if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
                   char_err_num++;
               }

      }
           printf("Testing  Char: the total numbers of error is : %i\n" ,char_err_num);
     41c:	e17ffa17 	ldw	r5,-24(fp)
     420:	01000074 	movhi	r4,1
     424:	213db504 	addi	r4,r4,-2348
     428:	00006a80 	call	6a8 <printf>



       //----------------TEST SHORT-----------------------------------

           printf(" \n writing short......\n");
     42c:	01000074 	movhi	r4,1
     430:	213dc204 	addi	r4,r4,-2296
     434:	00007a40 	call	7a4 <puts>
           for (i=0; i<5; i++) {
     438:	e03ff915 	stw	zero,-28(fp)
     43c:	00001306 	br	48c <main+0x1fc>
           //for (i=0; i<32767; i++) {
               *(short*)(BASE+i*2)=i*i; // short, uses two bytes
     440:	e0fff917 	ldw	r3,-28(fp)
     444:	00808034 	movhi	r2,512
     448:	1885883a 	add	r2,r3,r2
     44c:	1085883a 	add	r2,r2,r2
     450:	e0fff917 	ldw	r3,-28(fp)
     454:	1809883a 	mov	r4,r3
     458:	e0fff917 	ldw	r3,-28(fp)
     45c:	20c7383a 	mul	r3,r4,r3
     460:	10c0000d 	sth	r3,0(r2)
               printf("The written character is %d\n",i*i);
     464:	e0fff917 	ldw	r3,-28(fp)
     468:	e0bff917 	ldw	r2,-28(fp)
     46c:	1885383a 	mul	r2,r3,r2
     470:	100b883a 	mov	r5,r2
     474:	01000074 	movhi	r4,1
     478:	213da004 	addi	r4,r4,-2432
     47c:	00006a80 	call	6a8 <printf>


       //----------------TEST SHORT-----------------------------------

           printf(" \n writing short......\n");
           for (i=0; i<5; i++) {
     480:	e0bff917 	ldw	r2,-28(fp)
     484:	10800044 	addi	r2,r2,1
     488:	e0bff915 	stw	r2,-28(fp)
     48c:	e0bff917 	ldw	r2,-28(fp)
     490:	10800150 	cmplti	r2,r2,5
     494:	103fea1e 	bne	r2,zero,440 <__alt_data_end+0xfffe0440>
               printf("The written character is %d\n",i*i);

           }


           printf(" \n testing short......\n");
     498:	01000074 	movhi	r4,1
     49c:	213dc804 	addi	r4,r4,-2272
     4a0:	00007a40 	call	7a4 <puts>
           for (i=0; i<5; i++) {
     4a4:	e03ff915 	stw	zero,-28(fp)
     4a8:	00001e06 	br	524 <main+0x294>
					   if (* (short*)(BASE+i*2)!=(i*i)){
     4ac:	e0fff917 	ldw	r3,-28(fp)
     4b0:	00808034 	movhi	r2,512
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	1085883a 	add	r2,r2,r2
     4bc:	1080000b 	ldhu	r2,0(r2)
     4c0:	10ffffcc 	andi	r3,r2,65535
     4c4:	18e0001c 	xori	r3,r3,32768
     4c8:	18e00004 	addi	r3,r3,-32768
     4cc:	e13ff917 	ldw	r4,-28(fp)
     4d0:	e0bff917 	ldw	r2,-28(fp)
     4d4:	2085383a 	mul	r2,r4,r2
     4d8:	18800326 	beq	r3,r2,4e8 <main+0x258>
							short_err_num++;
     4dc:	e0bffb17 	ldw	r2,-20(fp)
     4e0:	10800044 	addi	r2,r2,1
     4e4:	e0bffb15 	stw	r2,-20(fp)
							}
					   printf("The read character is %d\n", (* (short*)(BASE+2*i)));
     4e8:	e0fff917 	ldw	r3,-28(fp)
     4ec:	00808034 	movhi	r2,512
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	1085883a 	add	r2,r2,r2
     4f8:	1080000b 	ldhu	r2,0(r2)
     4fc:	10bfffcc 	andi	r2,r2,65535
     500:	10a0001c 	xori	r2,r2,32768
     504:	10a00004 	addi	r2,r2,-32768
     508:	100b883a 	mov	r5,r2
     50c:	01000074 	movhi	r4,1
     510:	213dae04 	addi	r4,r4,-2376
     514:	00006a80 	call	6a8 <printf>

           }


           printf(" \n testing short......\n");
           for (i=0; i<5; i++) {
     518:	e0bff917 	ldw	r2,-28(fp)
     51c:	10800044 	addi	r2,r2,1
     520:	e0bff915 	stw	r2,-28(fp)
     524:	e0bff917 	ldw	r2,-28(fp)
     528:	10800150 	cmplti	r2,r2,5
     52c:	103fdf1e 	bne	r2,zero,4ac <__alt_data_end+0xfffe04ac>

//
//
//

            printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);
     530:	e17ffb17 	ldw	r5,-20(fp)
     534:	01000074 	movhi	r4,1
     538:	213dce04 	addi	r4,r4,-2248
     53c:	00006a80 	call	6a8 <printf>

       //----------------TEST INT    -----------------------------------
           printf(" \n writing integer......\n");
     540:	01000074 	movhi	r4,1
     544:	213ddb04 	addi	r4,r4,-2196
     548:	00007a40 	call	7a4 <puts>

           for (i=0; i<5; i++) {
     54c:	e03ff915 	stw	zero,-28(fp)
     550:	00001806 	br	5b4 <main+0x324>
               *(int*)(BASE+i*4)=i*i*i; // int, use 4 bytes
     554:	e0fff917 	ldw	r3,-28(fp)
     558:	00804034 	movhi	r2,256
     55c:	1885883a 	add	r2,r3,r2
     560:	1085883a 	add	r2,r2,r2
     564:	1085883a 	add	r2,r2,r2
     568:	1009883a 	mov	r4,r2
     56c:	e0fff917 	ldw	r3,-28(fp)
     570:	e0bff917 	ldw	r2,-28(fp)
     574:	1887383a 	mul	r3,r3,r2
     578:	e0bff917 	ldw	r2,-28(fp)
     57c:	1885383a 	mul	r2,r3,r2
     580:	20800015 	stw	r2,0(r4)
               printf("The written character is %d\n",i*i*i);
     584:	e0fff917 	ldw	r3,-28(fp)
     588:	e0bff917 	ldw	r2,-28(fp)
     58c:	1887383a 	mul	r3,r3,r2
     590:	e0bff917 	ldw	r2,-28(fp)
     594:	1885383a 	mul	r2,r3,r2
     598:	100b883a 	mov	r5,r2
     59c:	01000074 	movhi	r4,1
     5a0:	213da004 	addi	r4,r4,-2432
     5a4:	00006a80 	call	6a8 <printf>
            printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);

       //----------------TEST INT    -----------------------------------
           printf(" \n writing integer......\n");

           for (i=0; i<5; i++) {
     5a8:	e0bff917 	ldw	r2,-28(fp)
     5ac:	10800044 	addi	r2,r2,1
     5b0:	e0bff915 	stw	r2,-28(fp)
     5b4:	e0bff917 	ldw	r2,-28(fp)
     5b8:	10800150 	cmplti	r2,r2,5
     5bc:	103fe51e 	bne	r2,zero,554 <__alt_data_end+0xfffe0554>
               printf("The written character is %d\n",i*i*i);

           }


           printf(" \n testing integer......\n");
     5c0:	01000074 	movhi	r4,1
     5c4:	213de204 	addi	r4,r4,-2168
     5c8:	00007a40 	call	7a4 <puts>
           for (i=0; i<5; i++) {
     5cc:	e03ff915 	stw	zero,-28(fp)
     5d0:	00001c06 	br	644 <main+0x3b4>
           				   if (* (int*)(BASE+4*i)!=i*i*i){
     5d4:	e0fff917 	ldw	r3,-28(fp)
     5d8:	00804034 	movhi	r2,256
     5dc:	1885883a 	add	r2,r3,r2
     5e0:	1085883a 	add	r2,r2,r2
     5e4:	1085883a 	add	r2,r2,r2
     5e8:	10c00017 	ldw	r3,0(r2)
     5ec:	e13ff917 	ldw	r4,-28(fp)
     5f0:	e0bff917 	ldw	r2,-28(fp)
     5f4:	2089383a 	mul	r4,r4,r2
     5f8:	e0bff917 	ldw	r2,-28(fp)
     5fc:	2085383a 	mul	r2,r4,r2
     600:	18800326 	beq	r3,r2,610 <main+0x380>
           						int_err_num++;
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800044 	addi	r2,r2,1
     60c:	e0bffc15 	stw	r2,-16(fp)
           					}
           			   printf("The read character is %d\n", (* (int*)(BASE+4*i)));
     610:	e0fff917 	ldw	r3,-28(fp)
     614:	00804034 	movhi	r2,256
     618:	1885883a 	add	r2,r3,r2
     61c:	1085883a 	add	r2,r2,r2
     620:	1085883a 	add	r2,r2,r2
     624:	10800017 	ldw	r2,0(r2)
     628:	100b883a 	mov	r5,r2
     62c:	01000074 	movhi	r4,1
     630:	213dae04 	addi	r4,r4,-2376
     634:	00006a80 	call	6a8 <printf>

           }


           printf(" \n testing integer......\n");
           for (i=0; i<5; i++) {
     638:	e0bff917 	ldw	r2,-28(fp)
     63c:	10800044 	addi	r2,r2,1
     640:	e0bff915 	stw	r2,-28(fp)
     644:	e0bff917 	ldw	r2,-28(fp)
     648:	10800150 	cmplti	r2,r2,5
     64c:	103fe11e 	bne	r2,zero,5d4 <__alt_data_end+0xfffe05d4>
           						int_err_num++;
           					}
           			   printf("The read character is %d\n", (* (int*)(BASE+4*i)));

           		   }
           printf("Testing Int: the total numbers of error is : %i\n" ,int_err_num);
     650:	e17ffc17 	ldw	r5,-16(fp)
     654:	01000074 	movhi	r4,1
     658:	213de904 	addi	r4,r4,-2140
     65c:	00006a80 	call	6a8 <printf>
//
//

  return 0;
     660:	0005883a 	mov	r2,zero
}
     664:	e037883a 	mov	sp,fp
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	df000017 	ldw	fp,0(sp)
     670:	dec00204 	addi	sp,sp,8
     674:	f800283a 	ret

00000678 <_printf_r>:
     678:	defffd04 	addi	sp,sp,-12
     67c:	2805883a 	mov	r2,r5
     680:	dfc00015 	stw	ra,0(sp)
     684:	d9800115 	stw	r6,4(sp)
     688:	d9c00215 	stw	r7,8(sp)
     68c:	21400217 	ldw	r5,8(r4)
     690:	d9c00104 	addi	r7,sp,4
     694:	100d883a 	mov	r6,r2
     698:	00008500 	call	850 <___vfprintf_internal_r>
     69c:	dfc00017 	ldw	ra,0(sp)
     6a0:	dec00304 	addi	sp,sp,12
     6a4:	f800283a 	ret

000006a8 <printf>:
     6a8:	defffc04 	addi	sp,sp,-16
     6ac:	dfc00015 	stw	ra,0(sp)
     6b0:	d9400115 	stw	r5,4(sp)
     6b4:	d9800215 	stw	r6,8(sp)
     6b8:	d9c00315 	stw	r7,12(sp)
     6bc:	00800074 	movhi	r2,1
     6c0:	10856204 	addi	r2,r2,5512
     6c4:	10800017 	ldw	r2,0(r2)
     6c8:	200b883a 	mov	r5,r4
     6cc:	d9800104 	addi	r6,sp,4
     6d0:	11000217 	ldw	r4,8(r2)
     6d4:	0002a480 	call	2a48 <__vfprintf_internal>
     6d8:	dfc00017 	ldw	ra,0(sp)
     6dc:	dec00404 	addi	sp,sp,16
     6e0:	f800283a 	ret

000006e4 <_puts_r>:
     6e4:	defff604 	addi	sp,sp,-40
     6e8:	dc000715 	stw	r16,28(sp)
     6ec:	2021883a 	mov	r16,r4
     6f0:	2809883a 	mov	r4,r5
     6f4:	dc400815 	stw	r17,32(sp)
     6f8:	dfc00915 	stw	ra,36(sp)
     6fc:	2823883a 	mov	r17,r5
     700:	00007b80 	call	7b8 <strlen>
     704:	10c00044 	addi	r3,r2,1
     708:	d8800115 	stw	r2,4(sp)
     70c:	00800074 	movhi	r2,1
     710:	10bdf604 	addi	r2,r2,-2088
     714:	d8800215 	stw	r2,8(sp)
     718:	00800044 	movi	r2,1
     71c:	d8800315 	stw	r2,12(sp)
     720:	00800084 	movi	r2,2
     724:	dc400015 	stw	r17,0(sp)
     728:	d8c00615 	stw	r3,24(sp)
     72c:	dec00415 	stw	sp,16(sp)
     730:	d8800515 	stw	r2,20(sp)
     734:	80000226 	beq	r16,zero,740 <_puts_r+0x5c>
     738:	80800e17 	ldw	r2,56(r16)
     73c:	10001426 	beq	r2,zero,790 <_puts_r+0xac>
     740:	81400217 	ldw	r5,8(r16)
     744:	2880030b 	ldhu	r2,12(r5)
     748:	10c8000c 	andi	r3,r2,8192
     74c:	1800061e 	bne	r3,zero,768 <_puts_r+0x84>
     750:	29001917 	ldw	r4,100(r5)
     754:	00f7ffc4 	movi	r3,-8193
     758:	10880014 	ori	r2,r2,8192
     75c:	20c6703a 	and	r3,r4,r3
     760:	2880030d 	sth	r2,12(r5)
     764:	28c01915 	stw	r3,100(r5)
     768:	d9800404 	addi	r6,sp,16
     76c:	8009883a 	mov	r4,r16
     770:	0004f780 	call	4f78 <__sfvwrite_r>
     774:	1000091e 	bne	r2,zero,79c <_puts_r+0xb8>
     778:	00800284 	movi	r2,10
     77c:	dfc00917 	ldw	ra,36(sp)
     780:	dc400817 	ldw	r17,32(sp)
     784:	dc000717 	ldw	r16,28(sp)
     788:	dec00a04 	addi	sp,sp,40
     78c:	f800283a 	ret
     790:	8009883a 	mov	r4,r16
     794:	0004af40 	call	4af4 <__sinit>
     798:	003fe906 	br	740 <__alt_data_end+0xfffe0740>
     79c:	00bfffc4 	movi	r2,-1
     7a0:	003ff606 	br	77c <__alt_data_end+0xfffe077c>

000007a4 <puts>:
     7a4:	00800074 	movhi	r2,1
     7a8:	10856204 	addi	r2,r2,5512
     7ac:	200b883a 	mov	r5,r4
     7b0:	11000017 	ldw	r4,0(r2)
     7b4:	00006e41 	jmpi	6e4 <_puts_r>

000007b8 <strlen>:
     7b8:	208000cc 	andi	r2,r4,3
     7bc:	10002026 	beq	r2,zero,840 <strlen+0x88>
     7c0:	20800007 	ldb	r2,0(r4)
     7c4:	10002026 	beq	r2,zero,848 <strlen+0x90>
     7c8:	2005883a 	mov	r2,r4
     7cc:	00000206 	br	7d8 <strlen+0x20>
     7d0:	10c00007 	ldb	r3,0(r2)
     7d4:	18001826 	beq	r3,zero,838 <strlen+0x80>
     7d8:	10800044 	addi	r2,r2,1
     7dc:	10c000cc 	andi	r3,r2,3
     7e0:	183ffb1e 	bne	r3,zero,7d0 <__alt_data_end+0xfffe07d0>
     7e4:	10c00017 	ldw	r3,0(r2)
     7e8:	01ffbff4 	movhi	r7,65279
     7ec:	39ffbfc4 	addi	r7,r7,-257
     7f0:	00ca303a 	nor	r5,zero,r3
     7f4:	01a02074 	movhi	r6,32897
     7f8:	19c7883a 	add	r3,r3,r7
     7fc:	31a02004 	addi	r6,r6,-32640
     800:	1946703a 	and	r3,r3,r5
     804:	1986703a 	and	r3,r3,r6
     808:	1800091e 	bne	r3,zero,830 <strlen+0x78>
     80c:	10800104 	addi	r2,r2,4
     810:	10c00017 	ldw	r3,0(r2)
     814:	19cb883a 	add	r5,r3,r7
     818:	00c6303a 	nor	r3,zero,r3
     81c:	28c6703a 	and	r3,r5,r3
     820:	1986703a 	and	r3,r3,r6
     824:	183ff926 	beq	r3,zero,80c <__alt_data_end+0xfffe080c>
     828:	00000106 	br	830 <strlen+0x78>
     82c:	10800044 	addi	r2,r2,1
     830:	10c00007 	ldb	r3,0(r2)
     834:	183ffd1e 	bne	r3,zero,82c <__alt_data_end+0xfffe082c>
     838:	1105c83a 	sub	r2,r2,r4
     83c:	f800283a 	ret
     840:	2005883a 	mov	r2,r4
     844:	003fe706 	br	7e4 <__alt_data_end+0xfffe07e4>
     848:	0005883a 	mov	r2,zero
     84c:	f800283a 	ret

00000850 <___vfprintf_internal_r>:
     850:	deffb804 	addi	sp,sp,-288
     854:	dfc04715 	stw	ra,284(sp)
     858:	ddc04515 	stw	r23,276(sp)
     85c:	dd404315 	stw	r21,268(sp)
     860:	d9002c15 	stw	r4,176(sp)
     864:	282f883a 	mov	r23,r5
     868:	302b883a 	mov	r21,r6
     86c:	d9c02d15 	stw	r7,180(sp)
     870:	df004615 	stw	fp,280(sp)
     874:	dd804415 	stw	r22,272(sp)
     878:	dd004215 	stw	r20,264(sp)
     87c:	dcc04115 	stw	r19,260(sp)
     880:	dc804015 	stw	r18,256(sp)
     884:	dc403f15 	stw	r17,252(sp)
     888:	dc003e15 	stw	r16,248(sp)
     88c:	00056680 	call	5668 <_localeconv_r>
     890:	10800017 	ldw	r2,0(r2)
     894:	1009883a 	mov	r4,r2
     898:	d8803415 	stw	r2,208(sp)
     89c:	00007b80 	call	7b8 <strlen>
     8a0:	d8803715 	stw	r2,220(sp)
     8a4:	d8802c17 	ldw	r2,176(sp)
     8a8:	10000226 	beq	r2,zero,8b4 <___vfprintf_internal_r+0x64>
     8ac:	10800e17 	ldw	r2,56(r2)
     8b0:	1000f926 	beq	r2,zero,c98 <___vfprintf_internal_r+0x448>
     8b4:	b880030b 	ldhu	r2,12(r23)
     8b8:	10c8000c 	andi	r3,r2,8192
     8bc:	1800061e 	bne	r3,zero,8d8 <___vfprintf_internal_r+0x88>
     8c0:	b9001917 	ldw	r4,100(r23)
     8c4:	00f7ffc4 	movi	r3,-8193
     8c8:	10880014 	ori	r2,r2,8192
     8cc:	20c6703a 	and	r3,r4,r3
     8d0:	b880030d 	sth	r2,12(r23)
     8d4:	b8c01915 	stw	r3,100(r23)
     8d8:	10c0020c 	andi	r3,r2,8
     8dc:	1800c126 	beq	r3,zero,be4 <___vfprintf_internal_r+0x394>
     8e0:	b8c00417 	ldw	r3,16(r23)
     8e4:	1800bf26 	beq	r3,zero,be4 <___vfprintf_internal_r+0x394>
     8e8:	1080068c 	andi	r2,r2,26
     8ec:	00c00284 	movi	r3,10
     8f0:	10c0c426 	beq	r2,r3,c04 <___vfprintf_internal_r+0x3b4>
     8f4:	d8c00404 	addi	r3,sp,16
     8f8:	05000074 	movhi	r20,1
     8fc:	d9001e04 	addi	r4,sp,120
     900:	a53e0784 	addi	r20,r20,-2018
     904:	d8c01e15 	stw	r3,120(sp)
     908:	d8002015 	stw	zero,128(sp)
     90c:	d8001f15 	stw	zero,124(sp)
     910:	d8003315 	stw	zero,204(sp)
     914:	d8003615 	stw	zero,216(sp)
     918:	d8003815 	stw	zero,224(sp)
     91c:	1811883a 	mov	r8,r3
     920:	d8003915 	stw	zero,228(sp)
     924:	d8003a15 	stw	zero,232(sp)
     928:	d8002f15 	stw	zero,188(sp)
     92c:	d9002815 	stw	r4,160(sp)
     930:	a8800007 	ldb	r2,0(r21)
     934:	10027b26 	beq	r2,zero,1324 <___vfprintf_internal_r+0xad4>
     938:	00c00944 	movi	r3,37
     93c:	a821883a 	mov	r16,r21
     940:	10c0021e 	bne	r2,r3,94c <___vfprintf_internal_r+0xfc>
     944:	00001406 	br	998 <___vfprintf_internal_r+0x148>
     948:	10c00326 	beq	r2,r3,958 <___vfprintf_internal_r+0x108>
     94c:	84000044 	addi	r16,r16,1
     950:	80800007 	ldb	r2,0(r16)
     954:	103ffc1e 	bne	r2,zero,948 <__alt_data_end+0xfffe0948>
     958:	8563c83a 	sub	r17,r16,r21
     95c:	88000e26 	beq	r17,zero,998 <___vfprintf_internal_r+0x148>
     960:	d8c02017 	ldw	r3,128(sp)
     964:	d8801f17 	ldw	r2,124(sp)
     968:	45400015 	stw	r21,0(r8)
     96c:	1c47883a 	add	r3,r3,r17
     970:	10800044 	addi	r2,r2,1
     974:	d8c02015 	stw	r3,128(sp)
     978:	44400115 	stw	r17,4(r8)
     97c:	d8801f15 	stw	r2,124(sp)
     980:	00c001c4 	movi	r3,7
     984:	1880a716 	blt	r3,r2,c24 <___vfprintf_internal_r+0x3d4>
     988:	42000204 	addi	r8,r8,8
     98c:	d9402f17 	ldw	r5,188(sp)
     990:	2c4b883a 	add	r5,r5,r17
     994:	d9402f15 	stw	r5,188(sp)
     998:	80800007 	ldb	r2,0(r16)
     99c:	1000a826 	beq	r2,zero,c40 <___vfprintf_internal_r+0x3f0>
     9a0:	84400047 	ldb	r17,1(r16)
     9a4:	00bfffc4 	movi	r2,-1
     9a8:	85400044 	addi	r21,r16,1
     9ac:	d8002785 	stb	zero,158(sp)
     9b0:	0007883a 	mov	r3,zero
     9b4:	000f883a 	mov	r7,zero
     9b8:	d8802915 	stw	r2,164(sp)
     9bc:	d8003115 	stw	zero,196(sp)
     9c0:	0025883a 	mov	r18,zero
     9c4:	01401604 	movi	r5,88
     9c8:	01800244 	movi	r6,9
     9cc:	02800a84 	movi	r10,42
     9d0:	02401b04 	movi	r9,108
     9d4:	ad400044 	addi	r21,r21,1
     9d8:	88bff804 	addi	r2,r17,-32
     9dc:	28830436 	bltu	r5,r2,15f0 <___vfprintf_internal_r+0xda0>
     9e0:	100490ba 	slli	r2,r2,2
     9e4:	01000034 	movhi	r4,0
     9e8:	21027e04 	addi	r4,r4,2552
     9ec:	1105883a 	add	r2,r2,r4
     9f0:	10800017 	ldw	r2,0(r2)
     9f4:	1000683a 	jmp	r2
     9f8:	00001510 	cmplti	zero,zero,84
     9fc:	000015f0 	cmpltui	zero,zero,87
     a00:	000015f0 	cmpltui	zero,zero,87
     a04:	00001530 	cmpltui	zero,zero,84
     a08:	000015f0 	cmpltui	zero,zero,87
     a0c:	000015f0 	cmpltui	zero,zero,87
     a10:	000015f0 	cmpltui	zero,zero,87
     a14:	000015f0 	cmpltui	zero,zero,87
     a18:	000015f0 	cmpltui	zero,zero,87
     a1c:	000015f0 	cmpltui	zero,zero,87
     a20:	00000ca4 	muli	zero,zero,50
     a24:	0000144c 	andi	zero,zero,81
     a28:	000015f0 	cmpltui	zero,zero,87
     a2c:	00000b6c 	andhi	zero,zero,45
     a30:	00000ccc 	andi	zero,zero,51
     a34:	000015f0 	cmpltui	zero,zero,87
     a38:	00000d0c 	andi	zero,zero,52
     a3c:	00000d18 	cmpnei	zero,zero,52
     a40:	00000d18 	cmpnei	zero,zero,52
     a44:	00000d18 	cmpnei	zero,zero,52
     a48:	00000d18 	cmpnei	zero,zero,52
     a4c:	00000d18 	cmpnei	zero,zero,52
     a50:	00000d18 	cmpnei	zero,zero,52
     a54:	00000d18 	cmpnei	zero,zero,52
     a58:	00000d18 	cmpnei	zero,zero,52
     a5c:	00000d18 	cmpnei	zero,zero,52
     a60:	000015f0 	cmpltui	zero,zero,87
     a64:	000015f0 	cmpltui	zero,zero,87
     a68:	000015f0 	cmpltui	zero,zero,87
     a6c:	000015f0 	cmpltui	zero,zero,87
     a70:	000015f0 	cmpltui	zero,zero,87
     a74:	000015f0 	cmpltui	zero,zero,87
     a78:	000015f0 	cmpltui	zero,zero,87
     a7c:	000015f0 	cmpltui	zero,zero,87
     a80:	000015f0 	cmpltui	zero,zero,87
     a84:	000015f0 	cmpltui	zero,zero,87
     a88:	00000d4c 	andi	zero,zero,53
     a8c:	00000e08 	cmpgei	zero,zero,56
     a90:	000015f0 	cmpltui	zero,zero,87
     a94:	00000e08 	cmpgei	zero,zero,56
     a98:	000015f0 	cmpltui	zero,zero,87
     a9c:	000015f0 	cmpltui	zero,zero,87
     aa0:	000015f0 	cmpltui	zero,zero,87
     aa4:	000015f0 	cmpltui	zero,zero,87
     aa8:	00000ea8 	cmpgeui	zero,zero,58
     aac:	000015f0 	cmpltui	zero,zero,87
     ab0:	000015f0 	cmpltui	zero,zero,87
     ab4:	00000eb4 	movhi	zero,58
     ab8:	000015f0 	cmpltui	zero,zero,87
     abc:	000015f0 	cmpltui	zero,zero,87
     ac0:	000015f0 	cmpltui	zero,zero,87
     ac4:	000015f0 	cmpltui	zero,zero,87
     ac8:	000015f0 	cmpltui	zero,zero,87
     acc:	0000132c 	andhi	zero,zero,76
     ad0:	000015f0 	cmpltui	zero,zero,87
     ad4:	000015f0 	cmpltui	zero,zero,87
     ad8:	0000138c 	andi	zero,zero,78
     adc:	000015f0 	cmpltui	zero,zero,87
     ae0:	000015f0 	cmpltui	zero,zero,87
     ae4:	000015f0 	cmpltui	zero,zero,87
     ae8:	000015f0 	cmpltui	zero,zero,87
     aec:	000015f0 	cmpltui	zero,zero,87
     af0:	000015f0 	cmpltui	zero,zero,87
     af4:	000015f0 	cmpltui	zero,zero,87
     af8:	000015f0 	cmpltui	zero,zero,87
     afc:	000015f0 	cmpltui	zero,zero,87
     b00:	000015f0 	cmpltui	zero,zero,87
     b04:	0000159c 	xori	zero,zero,86
     b08:	0000153c 	xorhi	zero,zero,84
     b0c:	00000e08 	cmpgei	zero,zero,56
     b10:	00000e08 	cmpgei	zero,zero,56
     b14:	00000e08 	cmpgei	zero,zero,56
     b18:	0000154c 	andi	zero,zero,85
     b1c:	0000153c 	xorhi	zero,zero,84
     b20:	000015f0 	cmpltui	zero,zero,87
     b24:	000015f0 	cmpltui	zero,zero,87
     b28:	00001558 	cmpnei	zero,zero,85
     b2c:	000015f0 	cmpltui	zero,zero,87
     b30:	00001568 	cmpgeui	zero,zero,85
     b34:	0000143c 	xorhi	zero,zero,80
     b38:	00000b78 	rdprs	zero,zero,45
     b3c:	0000145c 	xori	zero,zero,81
     b40:	000015f0 	cmpltui	zero,zero,87
     b44:	00001468 	cmpgeui	zero,zero,81
     b48:	000015f0 	cmpltui	zero,zero,87
     b4c:	000014c4 	movi	zero,83
     b50:	000015f0 	cmpltui	zero,zero,87
     b54:	000015f0 	cmpltui	zero,zero,87
     b58:	000014d4 	movui	zero,83
     b5c:	d9003117 	ldw	r4,196(sp)
     b60:	d8802d15 	stw	r2,180(sp)
     b64:	0109c83a 	sub	r4,zero,r4
     b68:	d9003115 	stw	r4,196(sp)
     b6c:	94800114 	ori	r18,r18,4
     b70:	ac400007 	ldb	r17,0(r21)
     b74:	003f9706 	br	9d4 <__alt_data_end+0xfffe09d4>
     b78:	00800c04 	movi	r2,48
     b7c:	d9002d17 	ldw	r4,180(sp)
     b80:	d9402917 	ldw	r5,164(sp)
     b84:	d8802705 	stb	r2,156(sp)
     b88:	00801e04 	movi	r2,120
     b8c:	d8802745 	stb	r2,157(sp)
     b90:	d8002785 	stb	zero,158(sp)
     b94:	20c00104 	addi	r3,r4,4
     b98:	24c00017 	ldw	r19,0(r4)
     b9c:	002d883a 	mov	r22,zero
     ba0:	90800094 	ori	r2,r18,2
     ba4:	28029a16 	blt	r5,zero,1610 <___vfprintf_internal_r+0xdc0>
     ba8:	00bfdfc4 	movi	r2,-129
     bac:	90a4703a 	and	r18,r18,r2
     bb0:	d8c02d15 	stw	r3,180(sp)
     bb4:	94800094 	ori	r18,r18,2
     bb8:	9802871e 	bne	r19,zero,15d8 <___vfprintf_internal_r+0xd88>
     bbc:	00800074 	movhi	r2,1
     bc0:	10be0004 	addi	r2,r2,-2048
     bc4:	d8803915 	stw	r2,228(sp)
     bc8:	04401e04 	movi	r17,120
     bcc:	d8802917 	ldw	r2,164(sp)
     bd0:	0039883a 	mov	fp,zero
     bd4:	1001e926 	beq	r2,zero,137c <___vfprintf_internal_r+0xb2c>
     bd8:	0027883a 	mov	r19,zero
     bdc:	002d883a 	mov	r22,zero
     be0:	00020506 	br	13f8 <___vfprintf_internal_r+0xba8>
     be4:	d9002c17 	ldw	r4,176(sp)
     be8:	b80b883a 	mov	r5,r23
     bec:	0002b200 	call	2b20 <__swsetup_r>
     bf0:	1005ac1e 	bne	r2,zero,22a4 <___vfprintf_internal_r+0x1a54>
     bf4:	b880030b 	ldhu	r2,12(r23)
     bf8:	00c00284 	movi	r3,10
     bfc:	1080068c 	andi	r2,r2,26
     c00:	10ff3c1e 	bne	r2,r3,8f4 <__alt_data_end+0xfffe08f4>
     c04:	b880038f 	ldh	r2,14(r23)
     c08:	103f3a16 	blt	r2,zero,8f4 <__alt_data_end+0xfffe08f4>
     c0c:	d9c02d17 	ldw	r7,180(sp)
     c10:	d9002c17 	ldw	r4,176(sp)
     c14:	a80d883a 	mov	r6,r21
     c18:	b80b883a 	mov	r5,r23
     c1c:	0002a640 	call	2a64 <__sbprintf>
     c20:	00001106 	br	c68 <___vfprintf_internal_r+0x418>
     c24:	d9002c17 	ldw	r4,176(sp)
     c28:	d9801e04 	addi	r6,sp,120
     c2c:	b80b883a 	mov	r5,r23
     c30:	0007e4c0 	call	7e4c <__sprint_r>
     c34:	1000081e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x408>
     c38:	da000404 	addi	r8,sp,16
     c3c:	003f5306 	br	98c <__alt_data_end+0xfffe098c>
     c40:	d8802017 	ldw	r2,128(sp)
     c44:	10000426 	beq	r2,zero,c58 <___vfprintf_internal_r+0x408>
     c48:	d9002c17 	ldw	r4,176(sp)
     c4c:	d9801e04 	addi	r6,sp,120
     c50:	b80b883a 	mov	r5,r23
     c54:	0007e4c0 	call	7e4c <__sprint_r>
     c58:	b880030b 	ldhu	r2,12(r23)
     c5c:	1080100c 	andi	r2,r2,64
     c60:	1005901e 	bne	r2,zero,22a4 <___vfprintf_internal_r+0x1a54>
     c64:	d8802f17 	ldw	r2,188(sp)
     c68:	dfc04717 	ldw	ra,284(sp)
     c6c:	df004617 	ldw	fp,280(sp)
     c70:	ddc04517 	ldw	r23,276(sp)
     c74:	dd804417 	ldw	r22,272(sp)
     c78:	dd404317 	ldw	r21,268(sp)
     c7c:	dd004217 	ldw	r20,264(sp)
     c80:	dcc04117 	ldw	r19,260(sp)
     c84:	dc804017 	ldw	r18,256(sp)
     c88:	dc403f17 	ldw	r17,252(sp)
     c8c:	dc003e17 	ldw	r16,248(sp)
     c90:	dec04804 	addi	sp,sp,288
     c94:	f800283a 	ret
     c98:	d9002c17 	ldw	r4,176(sp)
     c9c:	0004af40 	call	4af4 <__sinit>
     ca0:	003f0406 	br	8b4 <__alt_data_end+0xfffe08b4>
     ca4:	d8802d17 	ldw	r2,180(sp)
     ca8:	d9002d17 	ldw	r4,180(sp)
     cac:	10800017 	ldw	r2,0(r2)
     cb0:	d8803115 	stw	r2,196(sp)
     cb4:	20800104 	addi	r2,r4,4
     cb8:	d9003117 	ldw	r4,196(sp)
     cbc:	203fa716 	blt	r4,zero,b5c <__alt_data_end+0xfffe0b5c>
     cc0:	d8802d15 	stw	r2,180(sp)
     cc4:	ac400007 	ldb	r17,0(r21)
     cc8:	003f4206 	br	9d4 <__alt_data_end+0xfffe09d4>
     ccc:	ac400007 	ldb	r17,0(r21)
     cd0:	aac00044 	addi	r11,r21,1
     cd4:	8a872826 	beq	r17,r10,2978 <___vfprintf_internal_r+0x2128>
     cd8:	88bff404 	addi	r2,r17,-48
     cdc:	0009883a 	mov	r4,zero
     ce0:	30867d36 	bltu	r6,r2,26d8 <___vfprintf_internal_r+0x1e88>
     ce4:	5c400007 	ldb	r17,0(r11)
     ce8:	210002a4 	muli	r4,r4,10
     cec:	5d400044 	addi	r21,r11,1
     cf0:	a817883a 	mov	r11,r21
     cf4:	2089883a 	add	r4,r4,r2
     cf8:	88bff404 	addi	r2,r17,-48
     cfc:	30bff92e 	bgeu	r6,r2,ce4 <__alt_data_end+0xfffe0ce4>
     d00:	2005c916 	blt	r4,zero,2428 <___vfprintf_internal_r+0x1bd8>
     d04:	d9002915 	stw	r4,164(sp)
     d08:	003f3306 	br	9d8 <__alt_data_end+0xfffe09d8>
     d0c:	94802014 	ori	r18,r18,128
     d10:	ac400007 	ldb	r17,0(r21)
     d14:	003f2f06 	br	9d4 <__alt_data_end+0xfffe09d4>
     d18:	a809883a 	mov	r4,r21
     d1c:	d8003115 	stw	zero,196(sp)
     d20:	88bff404 	addi	r2,r17,-48
     d24:	0017883a 	mov	r11,zero
     d28:	24400007 	ldb	r17,0(r4)
     d2c:	5ac002a4 	muli	r11,r11,10
     d30:	ad400044 	addi	r21,r21,1
     d34:	a809883a 	mov	r4,r21
     d38:	12d7883a 	add	r11,r2,r11
     d3c:	88bff404 	addi	r2,r17,-48
     d40:	30bff92e 	bgeu	r6,r2,d28 <__alt_data_end+0xfffe0d28>
     d44:	dac03115 	stw	r11,196(sp)
     d48:	003f2306 	br	9d8 <__alt_data_end+0xfffe09d8>
     d4c:	18c03fcc 	andi	r3,r3,255
     d50:	18072b1e 	bne	r3,zero,2a00 <___vfprintf_internal_r+0x21b0>
     d54:	94800414 	ori	r18,r18,16
     d58:	9080080c 	andi	r2,r18,32
     d5c:	10037b26 	beq	r2,zero,1b4c <___vfprintf_internal_r+0x12fc>
     d60:	d9402d17 	ldw	r5,180(sp)
     d64:	28800117 	ldw	r2,4(r5)
     d68:	2cc00017 	ldw	r19,0(r5)
     d6c:	29400204 	addi	r5,r5,8
     d70:	d9402d15 	stw	r5,180(sp)
     d74:	102d883a 	mov	r22,r2
     d78:	10044b16 	blt	r2,zero,1ea8 <___vfprintf_internal_r+0x1658>
     d7c:	d9402917 	ldw	r5,164(sp)
     d80:	df002783 	ldbu	fp,158(sp)
     d84:	2803bc16 	blt	r5,zero,1c78 <___vfprintf_internal_r+0x1428>
     d88:	00ffdfc4 	movi	r3,-129
     d8c:	9d84b03a 	or	r2,r19,r22
     d90:	90e4703a 	and	r18,r18,r3
     d94:	10017726 	beq	r2,zero,1374 <___vfprintf_internal_r+0xb24>
     d98:	b0038326 	beq	r22,zero,1ba8 <___vfprintf_internal_r+0x1358>
     d9c:	dc402a15 	stw	r17,168(sp)
     da0:	dc001e04 	addi	r16,sp,120
     da4:	b023883a 	mov	r17,r22
     da8:	402d883a 	mov	r22,r8
     dac:	9809883a 	mov	r4,r19
     db0:	880b883a 	mov	r5,r17
     db4:	01800284 	movi	r6,10
     db8:	000f883a 	mov	r7,zero
     dbc:	000a2440 	call	a244 <__umoddi3>
     dc0:	10800c04 	addi	r2,r2,48
     dc4:	843fffc4 	addi	r16,r16,-1
     dc8:	9809883a 	mov	r4,r19
     dcc:	880b883a 	mov	r5,r17
     dd0:	80800005 	stb	r2,0(r16)
     dd4:	01800284 	movi	r6,10
     dd8:	000f883a 	mov	r7,zero
     ddc:	0009ccc0 	call	9ccc <__udivdi3>
     de0:	1027883a 	mov	r19,r2
     de4:	10c4b03a 	or	r2,r2,r3
     de8:	1823883a 	mov	r17,r3
     dec:	103fef1e 	bne	r2,zero,dac <__alt_data_end+0xfffe0dac>
     df0:	d8c02817 	ldw	r3,160(sp)
     df4:	dc402a17 	ldw	r17,168(sp)
     df8:	b011883a 	mov	r8,r22
     dfc:	1c07c83a 	sub	r3,r3,r16
     e00:	d8c02e15 	stw	r3,184(sp)
     e04:	00005906 	br	f6c <___vfprintf_internal_r+0x71c>
     e08:	18c03fcc 	andi	r3,r3,255
     e0c:	1806fa1e 	bne	r3,zero,29f8 <___vfprintf_internal_r+0x21a8>
     e10:	9080020c 	andi	r2,r18,8
     e14:	10048a26 	beq	r2,zero,2040 <___vfprintf_internal_r+0x17f0>
     e18:	d8c02d17 	ldw	r3,180(sp)
     e1c:	d9002d17 	ldw	r4,180(sp)
     e20:	d9402d17 	ldw	r5,180(sp)
     e24:	18c00017 	ldw	r3,0(r3)
     e28:	21000117 	ldw	r4,4(r4)
     e2c:	29400204 	addi	r5,r5,8
     e30:	d8c03615 	stw	r3,216(sp)
     e34:	d9003815 	stw	r4,224(sp)
     e38:	d9402d15 	stw	r5,180(sp)
     e3c:	d9003617 	ldw	r4,216(sp)
     e40:	d9403817 	ldw	r5,224(sp)
     e44:	da003d15 	stw	r8,244(sp)
     e48:	04000044 	movi	r16,1
     e4c:	0007a700 	call	7a70 <__fpclassifyd>
     e50:	da003d17 	ldw	r8,244(sp)
     e54:	14041f1e 	bne	r2,r16,1ed4 <___vfprintf_internal_r+0x1684>
     e58:	d9003617 	ldw	r4,216(sp)
     e5c:	d9403817 	ldw	r5,224(sp)
     e60:	000d883a 	mov	r6,zero
     e64:	000f883a 	mov	r7,zero
     e68:	000bc280 	call	bc28 <__ledf2>
     e6c:	da003d17 	ldw	r8,244(sp)
     e70:	1005be16 	blt	r2,zero,256c <___vfprintf_internal_r+0x1d1c>
     e74:	df002783 	ldbu	fp,158(sp)
     e78:	008011c4 	movi	r2,71
     e7c:	1445330e 	bge	r2,r17,234c <___vfprintf_internal_r+0x1afc>
     e80:	04000074 	movhi	r16,1
     e84:	843df804 	addi	r16,r16,-2080
     e88:	00c000c4 	movi	r3,3
     e8c:	00bfdfc4 	movi	r2,-129
     e90:	d8c02a15 	stw	r3,168(sp)
     e94:	90a4703a 	and	r18,r18,r2
     e98:	d8c02e15 	stw	r3,184(sp)
     e9c:	d8002915 	stw	zero,164(sp)
     ea0:	d8003215 	stw	zero,200(sp)
     ea4:	00003706 	br	f84 <___vfprintf_internal_r+0x734>
     ea8:	94800214 	ori	r18,r18,8
     eac:	ac400007 	ldb	r17,0(r21)
     eb0:	003ec806 	br	9d4 <__alt_data_end+0xfffe09d4>
     eb4:	18c03fcc 	andi	r3,r3,255
     eb8:	1806db1e 	bne	r3,zero,2a28 <___vfprintf_internal_r+0x21d8>
     ebc:	94800414 	ori	r18,r18,16
     ec0:	9080080c 	andi	r2,r18,32
     ec4:	1002d826 	beq	r2,zero,1a28 <___vfprintf_internal_r+0x11d8>
     ec8:	d9402d17 	ldw	r5,180(sp)
     ecc:	d8c02917 	ldw	r3,164(sp)
     ed0:	d8002785 	stb	zero,158(sp)
     ed4:	28800204 	addi	r2,r5,8
     ed8:	2cc00017 	ldw	r19,0(r5)
     edc:	2d800117 	ldw	r22,4(r5)
     ee0:	18048f16 	blt	r3,zero,2120 <___vfprintf_internal_r+0x18d0>
     ee4:	013fdfc4 	movi	r4,-129
     ee8:	9d86b03a 	or	r3,r19,r22
     eec:	d8802d15 	stw	r2,180(sp)
     ef0:	9124703a 	and	r18,r18,r4
     ef4:	1802d91e 	bne	r3,zero,1a5c <___vfprintf_internal_r+0x120c>
     ef8:	d8c02917 	ldw	r3,164(sp)
     efc:	0039883a 	mov	fp,zero
     f00:	1805c326 	beq	r3,zero,2610 <___vfprintf_internal_r+0x1dc0>
     f04:	0027883a 	mov	r19,zero
     f08:	002d883a 	mov	r22,zero
     f0c:	dc001e04 	addi	r16,sp,120
     f10:	9806d0fa 	srli	r3,r19,3
     f14:	b008977a 	slli	r4,r22,29
     f18:	b02cd0fa 	srli	r22,r22,3
     f1c:	9cc001cc 	andi	r19,r19,7
     f20:	98800c04 	addi	r2,r19,48
     f24:	843fffc4 	addi	r16,r16,-1
     f28:	20e6b03a 	or	r19,r4,r3
     f2c:	80800005 	stb	r2,0(r16)
     f30:	9d86b03a 	or	r3,r19,r22
     f34:	183ff61e 	bne	r3,zero,f10 <__alt_data_end+0xfffe0f10>
     f38:	90c0004c 	andi	r3,r18,1
     f3c:	18013b26 	beq	r3,zero,142c <___vfprintf_internal_r+0xbdc>
     f40:	10803fcc 	andi	r2,r2,255
     f44:	1080201c 	xori	r2,r2,128
     f48:	10bfe004 	addi	r2,r2,-128
     f4c:	00c00c04 	movi	r3,48
     f50:	10c13626 	beq	r2,r3,142c <___vfprintf_internal_r+0xbdc>
     f54:	80ffffc5 	stb	r3,-1(r16)
     f58:	d8c02817 	ldw	r3,160(sp)
     f5c:	80bfffc4 	addi	r2,r16,-1
     f60:	1021883a 	mov	r16,r2
     f64:	1887c83a 	sub	r3,r3,r2
     f68:	d8c02e15 	stw	r3,184(sp)
     f6c:	d8802e17 	ldw	r2,184(sp)
     f70:	d9002917 	ldw	r4,164(sp)
     f74:	1100010e 	bge	r2,r4,f7c <___vfprintf_internal_r+0x72c>
     f78:	2005883a 	mov	r2,r4
     f7c:	d8802a15 	stw	r2,168(sp)
     f80:	d8003215 	stw	zero,200(sp)
     f84:	e7003fcc 	andi	fp,fp,255
     f88:	e700201c 	xori	fp,fp,128
     f8c:	e73fe004 	addi	fp,fp,-128
     f90:	e0000326 	beq	fp,zero,fa0 <___vfprintf_internal_r+0x750>
     f94:	d8c02a17 	ldw	r3,168(sp)
     f98:	18c00044 	addi	r3,r3,1
     f9c:	d8c02a15 	stw	r3,168(sp)
     fa0:	90c0008c 	andi	r3,r18,2
     fa4:	d8c02b15 	stw	r3,172(sp)
     fa8:	18000326 	beq	r3,zero,fb8 <___vfprintf_internal_r+0x768>
     fac:	d8c02a17 	ldw	r3,168(sp)
     fb0:	18c00084 	addi	r3,r3,2
     fb4:	d8c02a15 	stw	r3,168(sp)
     fb8:	90c0210c 	andi	r3,r18,132
     fbc:	d8c03015 	stw	r3,192(sp)
     fc0:	1801a31e 	bne	r3,zero,1650 <___vfprintf_internal_r+0xe00>
     fc4:	d9003117 	ldw	r4,196(sp)
     fc8:	d8c02a17 	ldw	r3,168(sp)
     fcc:	20e7c83a 	sub	r19,r4,r3
     fd0:	04c19f0e 	bge	zero,r19,1650 <___vfprintf_internal_r+0xe00>
     fd4:	02400404 	movi	r9,16
     fd8:	d8c02017 	ldw	r3,128(sp)
     fdc:	d8801f17 	ldw	r2,124(sp)
     fe0:	4cc50d0e 	bge	r9,r19,2418 <___vfprintf_internal_r+0x1bc8>
     fe4:	01400074 	movhi	r5,1
     fe8:	297e0b84 	addi	r5,r5,-2002
     fec:	dc403b15 	stw	r17,236(sp)
     ff0:	d9403515 	stw	r5,212(sp)
     ff4:	9823883a 	mov	r17,r19
     ff8:	482d883a 	mov	r22,r9
     ffc:	9027883a 	mov	r19,r18
    1000:	070001c4 	movi	fp,7
    1004:	8025883a 	mov	r18,r16
    1008:	dc002c17 	ldw	r16,176(sp)
    100c:	00000306 	br	101c <___vfprintf_internal_r+0x7cc>
    1010:	8c7ffc04 	addi	r17,r17,-16
    1014:	42000204 	addi	r8,r8,8
    1018:	b440130e 	bge	r22,r17,1068 <___vfprintf_internal_r+0x818>
    101c:	01000074 	movhi	r4,1
    1020:	18c00404 	addi	r3,r3,16
    1024:	10800044 	addi	r2,r2,1
    1028:	213e0b84 	addi	r4,r4,-2002
    102c:	41000015 	stw	r4,0(r8)
    1030:	45800115 	stw	r22,4(r8)
    1034:	d8c02015 	stw	r3,128(sp)
    1038:	d8801f15 	stw	r2,124(sp)
    103c:	e0bff40e 	bge	fp,r2,1010 <__alt_data_end+0xfffe1010>
    1040:	d9801e04 	addi	r6,sp,120
    1044:	b80b883a 	mov	r5,r23
    1048:	8009883a 	mov	r4,r16
    104c:	0007e4c0 	call	7e4c <__sprint_r>
    1050:	103f011e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1054:	8c7ffc04 	addi	r17,r17,-16
    1058:	d8c02017 	ldw	r3,128(sp)
    105c:	d8801f17 	ldw	r2,124(sp)
    1060:	da000404 	addi	r8,sp,16
    1064:	b47fed16 	blt	r22,r17,101c <__alt_data_end+0xfffe101c>
    1068:	9021883a 	mov	r16,r18
    106c:	9825883a 	mov	r18,r19
    1070:	8827883a 	mov	r19,r17
    1074:	dc403b17 	ldw	r17,236(sp)
    1078:	d9403517 	ldw	r5,212(sp)
    107c:	98c7883a 	add	r3,r19,r3
    1080:	10800044 	addi	r2,r2,1
    1084:	41400015 	stw	r5,0(r8)
    1088:	44c00115 	stw	r19,4(r8)
    108c:	d8c02015 	stw	r3,128(sp)
    1090:	d8801f15 	stw	r2,124(sp)
    1094:	010001c4 	movi	r4,7
    1098:	2082a316 	blt	r4,r2,1b28 <___vfprintf_internal_r+0x12d8>
    109c:	df002787 	ldb	fp,158(sp)
    10a0:	42000204 	addi	r8,r8,8
    10a4:	e0000c26 	beq	fp,zero,10d8 <___vfprintf_internal_r+0x888>
    10a8:	d8801f17 	ldw	r2,124(sp)
    10ac:	d9002784 	addi	r4,sp,158
    10b0:	18c00044 	addi	r3,r3,1
    10b4:	10800044 	addi	r2,r2,1
    10b8:	41000015 	stw	r4,0(r8)
    10bc:	01000044 	movi	r4,1
    10c0:	41000115 	stw	r4,4(r8)
    10c4:	d8c02015 	stw	r3,128(sp)
    10c8:	d8801f15 	stw	r2,124(sp)
    10cc:	010001c4 	movi	r4,7
    10d0:	20823c16 	blt	r4,r2,19c4 <___vfprintf_internal_r+0x1174>
    10d4:	42000204 	addi	r8,r8,8
    10d8:	d8802b17 	ldw	r2,172(sp)
    10dc:	10000c26 	beq	r2,zero,1110 <___vfprintf_internal_r+0x8c0>
    10e0:	d8801f17 	ldw	r2,124(sp)
    10e4:	d9002704 	addi	r4,sp,156
    10e8:	18c00084 	addi	r3,r3,2
    10ec:	10800044 	addi	r2,r2,1
    10f0:	41000015 	stw	r4,0(r8)
    10f4:	01000084 	movi	r4,2
    10f8:	41000115 	stw	r4,4(r8)
    10fc:	d8c02015 	stw	r3,128(sp)
    1100:	d8801f15 	stw	r2,124(sp)
    1104:	010001c4 	movi	r4,7
    1108:	20823616 	blt	r4,r2,19e4 <___vfprintf_internal_r+0x1194>
    110c:	42000204 	addi	r8,r8,8
    1110:	d9003017 	ldw	r4,192(sp)
    1114:	00802004 	movi	r2,128
    1118:	20819926 	beq	r4,r2,1780 <___vfprintf_internal_r+0xf30>
    111c:	d9402917 	ldw	r5,164(sp)
    1120:	d8802e17 	ldw	r2,184(sp)
    1124:	28adc83a 	sub	r22,r5,r2
    1128:	0580310e 	bge	zero,r22,11f0 <___vfprintf_internal_r+0x9a0>
    112c:	07000404 	movi	fp,16
    1130:	d8801f17 	ldw	r2,124(sp)
    1134:	e584140e 	bge	fp,r22,2188 <___vfprintf_internal_r+0x1938>
    1138:	01400074 	movhi	r5,1
    113c:	297e0784 	addi	r5,r5,-2018
    1140:	dc402915 	stw	r17,164(sp)
    1144:	d9402b15 	stw	r5,172(sp)
    1148:	b023883a 	mov	r17,r22
    114c:	04c001c4 	movi	r19,7
    1150:	a82d883a 	mov	r22,r21
    1154:	902b883a 	mov	r21,r18
    1158:	8025883a 	mov	r18,r16
    115c:	dc002c17 	ldw	r16,176(sp)
    1160:	00000306 	br	1170 <___vfprintf_internal_r+0x920>
    1164:	8c7ffc04 	addi	r17,r17,-16
    1168:	42000204 	addi	r8,r8,8
    116c:	e440110e 	bge	fp,r17,11b4 <___vfprintf_internal_r+0x964>
    1170:	18c00404 	addi	r3,r3,16
    1174:	10800044 	addi	r2,r2,1
    1178:	45000015 	stw	r20,0(r8)
    117c:	47000115 	stw	fp,4(r8)
    1180:	d8c02015 	stw	r3,128(sp)
    1184:	d8801f15 	stw	r2,124(sp)
    1188:	98bff60e 	bge	r19,r2,1164 <__alt_data_end+0xfffe1164>
    118c:	d9801e04 	addi	r6,sp,120
    1190:	b80b883a 	mov	r5,r23
    1194:	8009883a 	mov	r4,r16
    1198:	0007e4c0 	call	7e4c <__sprint_r>
    119c:	103eae1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    11a0:	8c7ffc04 	addi	r17,r17,-16
    11a4:	d8c02017 	ldw	r3,128(sp)
    11a8:	d8801f17 	ldw	r2,124(sp)
    11ac:	da000404 	addi	r8,sp,16
    11b0:	e47fef16 	blt	fp,r17,1170 <__alt_data_end+0xfffe1170>
    11b4:	9021883a 	mov	r16,r18
    11b8:	a825883a 	mov	r18,r21
    11bc:	b02b883a 	mov	r21,r22
    11c0:	882d883a 	mov	r22,r17
    11c4:	dc402917 	ldw	r17,164(sp)
    11c8:	d9002b17 	ldw	r4,172(sp)
    11cc:	1d87883a 	add	r3,r3,r22
    11d0:	10800044 	addi	r2,r2,1
    11d4:	41000015 	stw	r4,0(r8)
    11d8:	45800115 	stw	r22,4(r8)
    11dc:	d8c02015 	stw	r3,128(sp)
    11e0:	d8801f15 	stw	r2,124(sp)
    11e4:	010001c4 	movi	r4,7
    11e8:	2081ee16 	blt	r4,r2,19a4 <___vfprintf_internal_r+0x1154>
    11ec:	42000204 	addi	r8,r8,8
    11f0:	9080400c 	andi	r2,r18,256
    11f4:	1001181e 	bne	r2,zero,1658 <___vfprintf_internal_r+0xe08>
    11f8:	d9402e17 	ldw	r5,184(sp)
    11fc:	d8801f17 	ldw	r2,124(sp)
    1200:	44000015 	stw	r16,0(r8)
    1204:	1947883a 	add	r3,r3,r5
    1208:	10800044 	addi	r2,r2,1
    120c:	41400115 	stw	r5,4(r8)
    1210:	d8c02015 	stw	r3,128(sp)
    1214:	d8801f15 	stw	r2,124(sp)
    1218:	010001c4 	movi	r4,7
    121c:	2081d316 	blt	r4,r2,196c <___vfprintf_internal_r+0x111c>
    1220:	42000204 	addi	r8,r8,8
    1224:	9480010c 	andi	r18,r18,4
    1228:	90003226 	beq	r18,zero,12f4 <___vfprintf_internal_r+0xaa4>
    122c:	d9403117 	ldw	r5,196(sp)
    1230:	d8802a17 	ldw	r2,168(sp)
    1234:	28a1c83a 	sub	r16,r5,r2
    1238:	04002e0e 	bge	zero,r16,12f4 <___vfprintf_internal_r+0xaa4>
    123c:	04400404 	movi	r17,16
    1240:	d8801f17 	ldw	r2,124(sp)
    1244:	8c04a20e 	bge	r17,r16,24d0 <___vfprintf_internal_r+0x1c80>
    1248:	01400074 	movhi	r5,1
    124c:	297e0b84 	addi	r5,r5,-2002
    1250:	d9403515 	stw	r5,212(sp)
    1254:	048001c4 	movi	r18,7
    1258:	dcc02c17 	ldw	r19,176(sp)
    125c:	00000306 	br	126c <___vfprintf_internal_r+0xa1c>
    1260:	843ffc04 	addi	r16,r16,-16
    1264:	42000204 	addi	r8,r8,8
    1268:	8c00130e 	bge	r17,r16,12b8 <___vfprintf_internal_r+0xa68>
    126c:	01000074 	movhi	r4,1
    1270:	18c00404 	addi	r3,r3,16
    1274:	10800044 	addi	r2,r2,1
    1278:	213e0b84 	addi	r4,r4,-2002
    127c:	41000015 	stw	r4,0(r8)
    1280:	44400115 	stw	r17,4(r8)
    1284:	d8c02015 	stw	r3,128(sp)
    1288:	d8801f15 	stw	r2,124(sp)
    128c:	90bff40e 	bge	r18,r2,1260 <__alt_data_end+0xfffe1260>
    1290:	d9801e04 	addi	r6,sp,120
    1294:	b80b883a 	mov	r5,r23
    1298:	9809883a 	mov	r4,r19
    129c:	0007e4c0 	call	7e4c <__sprint_r>
    12a0:	103e6d1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    12a4:	843ffc04 	addi	r16,r16,-16
    12a8:	d8c02017 	ldw	r3,128(sp)
    12ac:	d8801f17 	ldw	r2,124(sp)
    12b0:	da000404 	addi	r8,sp,16
    12b4:	8c3fed16 	blt	r17,r16,126c <__alt_data_end+0xfffe126c>
    12b8:	d9403517 	ldw	r5,212(sp)
    12bc:	1c07883a 	add	r3,r3,r16
    12c0:	10800044 	addi	r2,r2,1
    12c4:	41400015 	stw	r5,0(r8)
    12c8:	44000115 	stw	r16,4(r8)
    12cc:	d8c02015 	stw	r3,128(sp)
    12d0:	d8801f15 	stw	r2,124(sp)
    12d4:	010001c4 	movi	r4,7
    12d8:	2080060e 	bge	r4,r2,12f4 <___vfprintf_internal_r+0xaa4>
    12dc:	d9002c17 	ldw	r4,176(sp)
    12e0:	d9801e04 	addi	r6,sp,120
    12e4:	b80b883a 	mov	r5,r23
    12e8:	0007e4c0 	call	7e4c <__sprint_r>
    12ec:	103e5a1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    12f0:	d8c02017 	ldw	r3,128(sp)
    12f4:	d8803117 	ldw	r2,196(sp)
    12f8:	d9002a17 	ldw	r4,168(sp)
    12fc:	1100010e 	bge	r2,r4,1304 <___vfprintf_internal_r+0xab4>
    1300:	2005883a 	mov	r2,r4
    1304:	d9402f17 	ldw	r5,188(sp)
    1308:	288b883a 	add	r5,r5,r2
    130c:	d9402f15 	stw	r5,188(sp)
    1310:	18019e1e 	bne	r3,zero,198c <___vfprintf_internal_r+0x113c>
    1314:	a8800007 	ldb	r2,0(r21)
    1318:	d8001f15 	stw	zero,124(sp)
    131c:	da000404 	addi	r8,sp,16
    1320:	103d851e 	bne	r2,zero,938 <__alt_data_end+0xfffe0938>
    1324:	a821883a 	mov	r16,r21
    1328:	003d9b06 	br	998 <__alt_data_end+0xfffe0998>
    132c:	18c03fcc 	andi	r3,r3,255
    1330:	1805c11e 	bne	r3,zero,2a38 <___vfprintf_internal_r+0x21e8>
    1334:	94800414 	ori	r18,r18,16
    1338:	9080080c 	andi	r2,r18,32
    133c:	10020c26 	beq	r2,zero,1b70 <___vfprintf_internal_r+0x1320>
    1340:	d8802d17 	ldw	r2,180(sp)
    1344:	d9002917 	ldw	r4,164(sp)
    1348:	d8002785 	stb	zero,158(sp)
    134c:	10c00204 	addi	r3,r2,8
    1350:	14c00017 	ldw	r19,0(r2)
    1354:	15800117 	ldw	r22,4(r2)
    1358:	20040f16 	blt	r4,zero,2398 <___vfprintf_internal_r+0x1b48>
    135c:	013fdfc4 	movi	r4,-129
    1360:	9d84b03a 	or	r2,r19,r22
    1364:	d8c02d15 	stw	r3,180(sp)
    1368:	9124703a 	and	r18,r18,r4
    136c:	0039883a 	mov	fp,zero
    1370:	103e891e 	bne	r2,zero,d98 <__alt_data_end+0xfffe0d98>
    1374:	d9002917 	ldw	r4,164(sp)
    1378:	2002c11e 	bne	r4,zero,1e80 <___vfprintf_internal_r+0x1630>
    137c:	d8002915 	stw	zero,164(sp)
    1380:	d8002e15 	stw	zero,184(sp)
    1384:	dc001e04 	addi	r16,sp,120
    1388:	003ef806 	br	f6c <__alt_data_end+0xfffe0f6c>
    138c:	18c03fcc 	andi	r3,r3,255
    1390:	18059d1e 	bne	r3,zero,2a08 <___vfprintf_internal_r+0x21b8>
    1394:	01400074 	movhi	r5,1
    1398:	297dfb04 	addi	r5,r5,-2068
    139c:	d9403915 	stw	r5,228(sp)
    13a0:	9080080c 	andi	r2,r18,32
    13a4:	10005226 	beq	r2,zero,14f0 <___vfprintf_internal_r+0xca0>
    13a8:	d8802d17 	ldw	r2,180(sp)
    13ac:	14c00017 	ldw	r19,0(r2)
    13b0:	15800117 	ldw	r22,4(r2)
    13b4:	10800204 	addi	r2,r2,8
    13b8:	d8802d15 	stw	r2,180(sp)
    13bc:	9080004c 	andi	r2,r18,1
    13c0:	10019026 	beq	r2,zero,1a04 <___vfprintf_internal_r+0x11b4>
    13c4:	9d84b03a 	or	r2,r19,r22
    13c8:	10036926 	beq	r2,zero,2170 <___vfprintf_internal_r+0x1920>
    13cc:	d8c02917 	ldw	r3,164(sp)
    13d0:	00800c04 	movi	r2,48
    13d4:	d8802705 	stb	r2,156(sp)
    13d8:	dc402745 	stb	r17,157(sp)
    13dc:	d8002785 	stb	zero,158(sp)
    13e0:	90800094 	ori	r2,r18,2
    13e4:	18045d16 	blt	r3,zero,255c <___vfprintf_internal_r+0x1d0c>
    13e8:	00bfdfc4 	movi	r2,-129
    13ec:	90a4703a 	and	r18,r18,r2
    13f0:	94800094 	ori	r18,r18,2
    13f4:	0039883a 	mov	fp,zero
    13f8:	d9003917 	ldw	r4,228(sp)
    13fc:	dc001e04 	addi	r16,sp,120
    1400:	988003cc 	andi	r2,r19,15
    1404:	b006973a 	slli	r3,r22,28
    1408:	2085883a 	add	r2,r4,r2
    140c:	9826d13a 	srli	r19,r19,4
    1410:	10800003 	ldbu	r2,0(r2)
    1414:	b02cd13a 	srli	r22,r22,4
    1418:	843fffc4 	addi	r16,r16,-1
    141c:	1ce6b03a 	or	r19,r3,r19
    1420:	80800005 	stb	r2,0(r16)
    1424:	9d84b03a 	or	r2,r19,r22
    1428:	103ff51e 	bne	r2,zero,1400 <__alt_data_end+0xfffe1400>
    142c:	d8c02817 	ldw	r3,160(sp)
    1430:	1c07c83a 	sub	r3,r3,r16
    1434:	d8c02e15 	stw	r3,184(sp)
    1438:	003ecc06 	br	f6c <__alt_data_end+0xfffe0f6c>
    143c:	18c03fcc 	andi	r3,r3,255
    1440:	183e9f26 	beq	r3,zero,ec0 <__alt_data_end+0xfffe0ec0>
    1444:	d9c02785 	stb	r7,158(sp)
    1448:	003e9d06 	br	ec0 <__alt_data_end+0xfffe0ec0>
    144c:	00c00044 	movi	r3,1
    1450:	01c00ac4 	movi	r7,43
    1454:	ac400007 	ldb	r17,0(r21)
    1458:	003d5e06 	br	9d4 <__alt_data_end+0xfffe09d4>
    145c:	94800814 	ori	r18,r18,32
    1460:	ac400007 	ldb	r17,0(r21)
    1464:	003d5b06 	br	9d4 <__alt_data_end+0xfffe09d4>
    1468:	d8c02d17 	ldw	r3,180(sp)
    146c:	d8002785 	stb	zero,158(sp)
    1470:	1c000017 	ldw	r16,0(r3)
    1474:	1cc00104 	addi	r19,r3,4
    1478:	80041926 	beq	r16,zero,24e0 <___vfprintf_internal_r+0x1c90>
    147c:	d9002917 	ldw	r4,164(sp)
    1480:	2003d016 	blt	r4,zero,23c4 <___vfprintf_internal_r+0x1b74>
    1484:	200d883a 	mov	r6,r4
    1488:	000b883a 	mov	r5,zero
    148c:	8009883a 	mov	r4,r16
    1490:	da003d15 	stw	r8,244(sp)
    1494:	00060600 	call	6060 <memchr>
    1498:	da003d17 	ldw	r8,244(sp)
    149c:	10045426 	beq	r2,zero,25f0 <___vfprintf_internal_r+0x1da0>
    14a0:	1405c83a 	sub	r2,r2,r16
    14a4:	d8802e15 	stw	r2,184(sp)
    14a8:	1003cc16 	blt	r2,zero,23dc <___vfprintf_internal_r+0x1b8c>
    14ac:	df002783 	ldbu	fp,158(sp)
    14b0:	d8802a15 	stw	r2,168(sp)
    14b4:	dcc02d15 	stw	r19,180(sp)
    14b8:	d8002915 	stw	zero,164(sp)
    14bc:	d8003215 	stw	zero,200(sp)
    14c0:	003eb006 	br	f84 <__alt_data_end+0xfffe0f84>
    14c4:	18c03fcc 	andi	r3,r3,255
    14c8:	183f9b26 	beq	r3,zero,1338 <__alt_data_end+0xfffe1338>
    14cc:	d9c02785 	stb	r7,158(sp)
    14d0:	003f9906 	br	1338 <__alt_data_end+0xfffe1338>
    14d4:	18c03fcc 	andi	r3,r3,255
    14d8:	1805551e 	bne	r3,zero,2a30 <___vfprintf_internal_r+0x21e0>
    14dc:	01400074 	movhi	r5,1
    14e0:	297e0004 	addi	r5,r5,-2048
    14e4:	d9403915 	stw	r5,228(sp)
    14e8:	9080080c 	andi	r2,r18,32
    14ec:	103fae1e 	bne	r2,zero,13a8 <__alt_data_end+0xfffe13a8>
    14f0:	9080040c 	andi	r2,r18,16
    14f4:	1002de26 	beq	r2,zero,2070 <___vfprintf_internal_r+0x1820>
    14f8:	d8c02d17 	ldw	r3,180(sp)
    14fc:	002d883a 	mov	r22,zero
    1500:	1cc00017 	ldw	r19,0(r3)
    1504:	18c00104 	addi	r3,r3,4
    1508:	d8c02d15 	stw	r3,180(sp)
    150c:	003fab06 	br	13bc <__alt_data_end+0xfffe13bc>
    1510:	38803fcc 	andi	r2,r7,255
    1514:	1080201c 	xori	r2,r2,128
    1518:	10bfe004 	addi	r2,r2,-128
    151c:	1002d21e 	bne	r2,zero,2068 <___vfprintf_internal_r+0x1818>
    1520:	00c00044 	movi	r3,1
    1524:	01c00804 	movi	r7,32
    1528:	ac400007 	ldb	r17,0(r21)
    152c:	003d2906 	br	9d4 <__alt_data_end+0xfffe09d4>
    1530:	94800054 	ori	r18,r18,1
    1534:	ac400007 	ldb	r17,0(r21)
    1538:	003d2606 	br	9d4 <__alt_data_end+0xfffe09d4>
    153c:	18c03fcc 	andi	r3,r3,255
    1540:	183e0526 	beq	r3,zero,d58 <__alt_data_end+0xfffe0d58>
    1544:	d9c02785 	stb	r7,158(sp)
    1548:	003e0306 	br	d58 <__alt_data_end+0xfffe0d58>
    154c:	94801014 	ori	r18,r18,64
    1550:	ac400007 	ldb	r17,0(r21)
    1554:	003d1f06 	br	9d4 <__alt_data_end+0xfffe09d4>
    1558:	ac400007 	ldb	r17,0(r21)
    155c:	8a438726 	beq	r17,r9,237c <___vfprintf_internal_r+0x1b2c>
    1560:	94800414 	ori	r18,r18,16
    1564:	003d1b06 	br	9d4 <__alt_data_end+0xfffe09d4>
    1568:	18c03fcc 	andi	r3,r3,255
    156c:	1805341e 	bne	r3,zero,2a40 <___vfprintf_internal_r+0x21f0>
    1570:	9080080c 	andi	r2,r18,32
    1574:	1002cd26 	beq	r2,zero,20ac <___vfprintf_internal_r+0x185c>
    1578:	d9402d17 	ldw	r5,180(sp)
    157c:	d9002f17 	ldw	r4,188(sp)
    1580:	28800017 	ldw	r2,0(r5)
    1584:	2007d7fa 	srai	r3,r4,31
    1588:	29400104 	addi	r5,r5,4
    158c:	d9402d15 	stw	r5,180(sp)
    1590:	11000015 	stw	r4,0(r2)
    1594:	10c00115 	stw	r3,4(r2)
    1598:	003ce506 	br	930 <__alt_data_end+0xfffe0930>
    159c:	d8c02d17 	ldw	r3,180(sp)
    15a0:	d9002d17 	ldw	r4,180(sp)
    15a4:	d8002785 	stb	zero,158(sp)
    15a8:	18800017 	ldw	r2,0(r3)
    15ac:	21000104 	addi	r4,r4,4
    15b0:	00c00044 	movi	r3,1
    15b4:	d8c02a15 	stw	r3,168(sp)
    15b8:	d8801405 	stb	r2,80(sp)
    15bc:	d9002d15 	stw	r4,180(sp)
    15c0:	d8c02e15 	stw	r3,184(sp)
    15c4:	d8002915 	stw	zero,164(sp)
    15c8:	d8003215 	stw	zero,200(sp)
    15cc:	dc001404 	addi	r16,sp,80
    15d0:	0039883a 	mov	fp,zero
    15d4:	003e7206 	br	fa0 <__alt_data_end+0xfffe0fa0>
    15d8:	01000074 	movhi	r4,1
    15dc:	213e0004 	addi	r4,r4,-2048
    15e0:	0039883a 	mov	fp,zero
    15e4:	d9003915 	stw	r4,228(sp)
    15e8:	04401e04 	movi	r17,120
    15ec:	003f8206 	br	13f8 <__alt_data_end+0xfffe13f8>
    15f0:	18c03fcc 	andi	r3,r3,255
    15f4:	1805061e 	bne	r3,zero,2a10 <___vfprintf_internal_r+0x21c0>
    15f8:	883d9126 	beq	r17,zero,c40 <__alt_data_end+0xfffe0c40>
    15fc:	00c00044 	movi	r3,1
    1600:	d8c02a15 	stw	r3,168(sp)
    1604:	dc401405 	stb	r17,80(sp)
    1608:	d8002785 	stb	zero,158(sp)
    160c:	003fec06 	br	15c0 <__alt_data_end+0xfffe15c0>
    1610:	01400074 	movhi	r5,1
    1614:	297e0004 	addi	r5,r5,-2048
    1618:	d9403915 	stw	r5,228(sp)
    161c:	d8c02d15 	stw	r3,180(sp)
    1620:	1025883a 	mov	r18,r2
    1624:	04401e04 	movi	r17,120
    1628:	9d84b03a 	or	r2,r19,r22
    162c:	1000fc1e 	bne	r2,zero,1a20 <___vfprintf_internal_r+0x11d0>
    1630:	0039883a 	mov	fp,zero
    1634:	00800084 	movi	r2,2
    1638:	10803fcc 	andi	r2,r2,255
    163c:	00c00044 	movi	r3,1
    1640:	10c20f26 	beq	r2,r3,1e80 <___vfprintf_internal_r+0x1630>
    1644:	00c00084 	movi	r3,2
    1648:	10fd6326 	beq	r2,r3,bd8 <__alt_data_end+0xfffe0bd8>
    164c:	003e2d06 	br	f04 <__alt_data_end+0xfffe0f04>
    1650:	d8c02017 	ldw	r3,128(sp)
    1654:	003e9306 	br	10a4 <__alt_data_end+0xfffe10a4>
    1658:	00801944 	movi	r2,101
    165c:	14407e0e 	bge	r2,r17,1858 <___vfprintf_internal_r+0x1008>
    1660:	d9003617 	ldw	r4,216(sp)
    1664:	d9403817 	ldw	r5,224(sp)
    1668:	000d883a 	mov	r6,zero
    166c:	000f883a 	mov	r7,zero
    1670:	d8c03c15 	stw	r3,240(sp)
    1674:	da003d15 	stw	r8,244(sp)
    1678:	000bac40 	call	bac4 <__eqdf2>
    167c:	d8c03c17 	ldw	r3,240(sp)
    1680:	da003d17 	ldw	r8,244(sp)
    1684:	1000f71e 	bne	r2,zero,1a64 <___vfprintf_internal_r+0x1214>
    1688:	d8801f17 	ldw	r2,124(sp)
    168c:	01000074 	movhi	r4,1
    1690:	213e0704 	addi	r4,r4,-2020
    1694:	18c00044 	addi	r3,r3,1
    1698:	10800044 	addi	r2,r2,1
    169c:	41000015 	stw	r4,0(r8)
    16a0:	01000044 	movi	r4,1
    16a4:	41000115 	stw	r4,4(r8)
    16a8:	d8c02015 	stw	r3,128(sp)
    16ac:	d8801f15 	stw	r2,124(sp)
    16b0:	010001c4 	movi	r4,7
    16b4:	2082b816 	blt	r4,r2,2198 <___vfprintf_internal_r+0x1948>
    16b8:	42000204 	addi	r8,r8,8
    16bc:	d8802617 	ldw	r2,152(sp)
    16c0:	d9403317 	ldw	r5,204(sp)
    16c4:	11400216 	blt	r2,r5,16d0 <___vfprintf_internal_r+0xe80>
    16c8:	9080004c 	andi	r2,r18,1
    16cc:	103ed526 	beq	r2,zero,1224 <__alt_data_end+0xfffe1224>
    16d0:	d8803717 	ldw	r2,220(sp)
    16d4:	d9003417 	ldw	r4,208(sp)
    16d8:	d9403717 	ldw	r5,220(sp)
    16dc:	1887883a 	add	r3,r3,r2
    16e0:	d8801f17 	ldw	r2,124(sp)
    16e4:	41000015 	stw	r4,0(r8)
    16e8:	41400115 	stw	r5,4(r8)
    16ec:	10800044 	addi	r2,r2,1
    16f0:	d8c02015 	stw	r3,128(sp)
    16f4:	d8801f15 	stw	r2,124(sp)
    16f8:	010001c4 	movi	r4,7
    16fc:	20832916 	blt	r4,r2,23a4 <___vfprintf_internal_r+0x1b54>
    1700:	42000204 	addi	r8,r8,8
    1704:	d8803317 	ldw	r2,204(sp)
    1708:	143fffc4 	addi	r16,r2,-1
    170c:	043ec50e 	bge	zero,r16,1224 <__alt_data_end+0xfffe1224>
    1710:	04400404 	movi	r17,16
    1714:	d8801f17 	ldw	r2,124(sp)
    1718:	8c00880e 	bge	r17,r16,193c <___vfprintf_internal_r+0x10ec>
    171c:	01400074 	movhi	r5,1
    1720:	297e0784 	addi	r5,r5,-2018
    1724:	d9402b15 	stw	r5,172(sp)
    1728:	058001c4 	movi	r22,7
    172c:	dcc02c17 	ldw	r19,176(sp)
    1730:	00000306 	br	1740 <___vfprintf_internal_r+0xef0>
    1734:	42000204 	addi	r8,r8,8
    1738:	843ffc04 	addi	r16,r16,-16
    173c:	8c00820e 	bge	r17,r16,1948 <___vfprintf_internal_r+0x10f8>
    1740:	18c00404 	addi	r3,r3,16
    1744:	10800044 	addi	r2,r2,1
    1748:	45000015 	stw	r20,0(r8)
    174c:	44400115 	stw	r17,4(r8)
    1750:	d8c02015 	stw	r3,128(sp)
    1754:	d8801f15 	stw	r2,124(sp)
    1758:	b0bff60e 	bge	r22,r2,1734 <__alt_data_end+0xfffe1734>
    175c:	d9801e04 	addi	r6,sp,120
    1760:	b80b883a 	mov	r5,r23
    1764:	9809883a 	mov	r4,r19
    1768:	0007e4c0 	call	7e4c <__sprint_r>
    176c:	103d3a1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1770:	d8c02017 	ldw	r3,128(sp)
    1774:	d8801f17 	ldw	r2,124(sp)
    1778:	da000404 	addi	r8,sp,16
    177c:	003fee06 	br	1738 <__alt_data_end+0xfffe1738>
    1780:	d9403117 	ldw	r5,196(sp)
    1784:	d8802a17 	ldw	r2,168(sp)
    1788:	28adc83a 	sub	r22,r5,r2
    178c:	05be630e 	bge	zero,r22,111c <__alt_data_end+0xfffe111c>
    1790:	07000404 	movi	fp,16
    1794:	d8801f17 	ldw	r2,124(sp)
    1798:	e5838f0e 	bge	fp,r22,25d8 <___vfprintf_internal_r+0x1d88>
    179c:	01400074 	movhi	r5,1
    17a0:	297e0784 	addi	r5,r5,-2018
    17a4:	dc403015 	stw	r17,192(sp)
    17a8:	d9402b15 	stw	r5,172(sp)
    17ac:	b023883a 	mov	r17,r22
    17b0:	04c001c4 	movi	r19,7
    17b4:	a82d883a 	mov	r22,r21
    17b8:	902b883a 	mov	r21,r18
    17bc:	8025883a 	mov	r18,r16
    17c0:	dc002c17 	ldw	r16,176(sp)
    17c4:	00000306 	br	17d4 <___vfprintf_internal_r+0xf84>
    17c8:	8c7ffc04 	addi	r17,r17,-16
    17cc:	42000204 	addi	r8,r8,8
    17d0:	e440110e 	bge	fp,r17,1818 <___vfprintf_internal_r+0xfc8>
    17d4:	18c00404 	addi	r3,r3,16
    17d8:	10800044 	addi	r2,r2,1
    17dc:	45000015 	stw	r20,0(r8)
    17e0:	47000115 	stw	fp,4(r8)
    17e4:	d8c02015 	stw	r3,128(sp)
    17e8:	d8801f15 	stw	r2,124(sp)
    17ec:	98bff60e 	bge	r19,r2,17c8 <__alt_data_end+0xfffe17c8>
    17f0:	d9801e04 	addi	r6,sp,120
    17f4:	b80b883a 	mov	r5,r23
    17f8:	8009883a 	mov	r4,r16
    17fc:	0007e4c0 	call	7e4c <__sprint_r>
    1800:	103d151e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1804:	8c7ffc04 	addi	r17,r17,-16
    1808:	d8c02017 	ldw	r3,128(sp)
    180c:	d8801f17 	ldw	r2,124(sp)
    1810:	da000404 	addi	r8,sp,16
    1814:	e47fef16 	blt	fp,r17,17d4 <__alt_data_end+0xfffe17d4>
    1818:	9021883a 	mov	r16,r18
    181c:	a825883a 	mov	r18,r21
    1820:	b02b883a 	mov	r21,r22
    1824:	882d883a 	mov	r22,r17
    1828:	dc403017 	ldw	r17,192(sp)
    182c:	d9002b17 	ldw	r4,172(sp)
    1830:	1d87883a 	add	r3,r3,r22
    1834:	10800044 	addi	r2,r2,1
    1838:	41000015 	stw	r4,0(r8)
    183c:	45800115 	stw	r22,4(r8)
    1840:	d8c02015 	stw	r3,128(sp)
    1844:	d8801f15 	stw	r2,124(sp)
    1848:	010001c4 	movi	r4,7
    184c:	20818e16 	blt	r4,r2,1e88 <___vfprintf_internal_r+0x1638>
    1850:	42000204 	addi	r8,r8,8
    1854:	003e3106 	br	111c <__alt_data_end+0xfffe111c>
    1858:	d9403317 	ldw	r5,204(sp)
    185c:	00800044 	movi	r2,1
    1860:	18c00044 	addi	r3,r3,1
    1864:	1141530e 	bge	r2,r5,1db4 <___vfprintf_internal_r+0x1564>
    1868:	dc401f17 	ldw	r17,124(sp)
    186c:	00800044 	movi	r2,1
    1870:	40800115 	stw	r2,4(r8)
    1874:	8c400044 	addi	r17,r17,1
    1878:	44000015 	stw	r16,0(r8)
    187c:	d8c02015 	stw	r3,128(sp)
    1880:	dc401f15 	stw	r17,124(sp)
    1884:	008001c4 	movi	r2,7
    1888:	14416b16 	blt	r2,r17,1e38 <___vfprintf_internal_r+0x15e8>
    188c:	42000204 	addi	r8,r8,8
    1890:	d8803717 	ldw	r2,220(sp)
    1894:	d9003417 	ldw	r4,208(sp)
    1898:	8c400044 	addi	r17,r17,1
    189c:	10c7883a 	add	r3,r2,r3
    18a0:	40800115 	stw	r2,4(r8)
    18a4:	41000015 	stw	r4,0(r8)
    18a8:	d8c02015 	stw	r3,128(sp)
    18ac:	dc401f15 	stw	r17,124(sp)
    18b0:	008001c4 	movi	r2,7
    18b4:	14416916 	blt	r2,r17,1e5c <___vfprintf_internal_r+0x160c>
    18b8:	45800204 	addi	r22,r8,8
    18bc:	d9003617 	ldw	r4,216(sp)
    18c0:	d9403817 	ldw	r5,224(sp)
    18c4:	000d883a 	mov	r6,zero
    18c8:	000f883a 	mov	r7,zero
    18cc:	d8c03c15 	stw	r3,240(sp)
    18d0:	000bac40 	call	bac4 <__eqdf2>
    18d4:	d8c03c17 	ldw	r3,240(sp)
    18d8:	1000bc26 	beq	r2,zero,1bcc <___vfprintf_internal_r+0x137c>
    18dc:	d9403317 	ldw	r5,204(sp)
    18e0:	84000044 	addi	r16,r16,1
    18e4:	8c400044 	addi	r17,r17,1
    18e8:	28bfffc4 	addi	r2,r5,-1
    18ec:	1887883a 	add	r3,r3,r2
    18f0:	b0800115 	stw	r2,4(r22)
    18f4:	b4000015 	stw	r16,0(r22)
    18f8:	d8c02015 	stw	r3,128(sp)
    18fc:	dc401f15 	stw	r17,124(sp)
    1900:	008001c4 	movi	r2,7
    1904:	14414316 	blt	r2,r17,1e14 <___vfprintf_internal_r+0x15c4>
    1908:	b5800204 	addi	r22,r22,8
    190c:	d9003a17 	ldw	r4,232(sp)
    1910:	df0022c4 	addi	fp,sp,139
    1914:	8c400044 	addi	r17,r17,1
    1918:	20c7883a 	add	r3,r4,r3
    191c:	b7000015 	stw	fp,0(r22)
    1920:	b1000115 	stw	r4,4(r22)
    1924:	d8c02015 	stw	r3,128(sp)
    1928:	dc401f15 	stw	r17,124(sp)
    192c:	008001c4 	movi	r2,7
    1930:	14400e16 	blt	r2,r17,196c <___vfprintf_internal_r+0x111c>
    1934:	b2000204 	addi	r8,r22,8
    1938:	003e3a06 	br	1224 <__alt_data_end+0xfffe1224>
    193c:	01000074 	movhi	r4,1
    1940:	213e0784 	addi	r4,r4,-2018
    1944:	d9002b15 	stw	r4,172(sp)
    1948:	d9002b17 	ldw	r4,172(sp)
    194c:	1c07883a 	add	r3,r3,r16
    1950:	44000115 	stw	r16,4(r8)
    1954:	41000015 	stw	r4,0(r8)
    1958:	10800044 	addi	r2,r2,1
    195c:	d8c02015 	stw	r3,128(sp)
    1960:	d8801f15 	stw	r2,124(sp)
    1964:	010001c4 	movi	r4,7
    1968:	20be2d0e 	bge	r4,r2,1220 <__alt_data_end+0xfffe1220>
    196c:	d9002c17 	ldw	r4,176(sp)
    1970:	d9801e04 	addi	r6,sp,120
    1974:	b80b883a 	mov	r5,r23
    1978:	0007e4c0 	call	7e4c <__sprint_r>
    197c:	103cb61e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1980:	d8c02017 	ldw	r3,128(sp)
    1984:	da000404 	addi	r8,sp,16
    1988:	003e2606 	br	1224 <__alt_data_end+0xfffe1224>
    198c:	d9002c17 	ldw	r4,176(sp)
    1990:	d9801e04 	addi	r6,sp,120
    1994:	b80b883a 	mov	r5,r23
    1998:	0007e4c0 	call	7e4c <__sprint_r>
    199c:	103e5d26 	beq	r2,zero,1314 <__alt_data_end+0xfffe1314>
    19a0:	003cad06 	br	c58 <__alt_data_end+0xfffe0c58>
    19a4:	d9002c17 	ldw	r4,176(sp)
    19a8:	d9801e04 	addi	r6,sp,120
    19ac:	b80b883a 	mov	r5,r23
    19b0:	0007e4c0 	call	7e4c <__sprint_r>
    19b4:	103ca81e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    19b8:	d8c02017 	ldw	r3,128(sp)
    19bc:	da000404 	addi	r8,sp,16
    19c0:	003e0b06 	br	11f0 <__alt_data_end+0xfffe11f0>
    19c4:	d9002c17 	ldw	r4,176(sp)
    19c8:	d9801e04 	addi	r6,sp,120
    19cc:	b80b883a 	mov	r5,r23
    19d0:	0007e4c0 	call	7e4c <__sprint_r>
    19d4:	103ca01e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    19d8:	d8c02017 	ldw	r3,128(sp)
    19dc:	da000404 	addi	r8,sp,16
    19e0:	003dbd06 	br	10d8 <__alt_data_end+0xfffe10d8>
    19e4:	d9002c17 	ldw	r4,176(sp)
    19e8:	d9801e04 	addi	r6,sp,120
    19ec:	b80b883a 	mov	r5,r23
    19f0:	0007e4c0 	call	7e4c <__sprint_r>
    19f4:	103c981e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    19f8:	d8c02017 	ldw	r3,128(sp)
    19fc:	da000404 	addi	r8,sp,16
    1a00:	003dc306 	br	1110 <__alt_data_end+0xfffe1110>
    1a04:	d8802917 	ldw	r2,164(sp)
    1a08:	d8002785 	stb	zero,158(sp)
    1a0c:	103f0616 	blt	r2,zero,1628 <__alt_data_end+0xfffe1628>
    1a10:	00ffdfc4 	movi	r3,-129
    1a14:	9d84b03a 	or	r2,r19,r22
    1a18:	90e4703a 	and	r18,r18,r3
    1a1c:	103c6b26 	beq	r2,zero,bcc <__alt_data_end+0xfffe0bcc>
    1a20:	0039883a 	mov	fp,zero
    1a24:	003e7406 	br	13f8 <__alt_data_end+0xfffe13f8>
    1a28:	9080040c 	andi	r2,r18,16
    1a2c:	1001b326 	beq	r2,zero,20fc <___vfprintf_internal_r+0x18ac>
    1a30:	d9002d17 	ldw	r4,180(sp)
    1a34:	d9402917 	ldw	r5,164(sp)
    1a38:	d8002785 	stb	zero,158(sp)
    1a3c:	20800104 	addi	r2,r4,4
    1a40:	24c00017 	ldw	r19,0(r4)
    1a44:	002d883a 	mov	r22,zero
    1a48:	2801b516 	blt	r5,zero,2120 <___vfprintf_internal_r+0x18d0>
    1a4c:	00ffdfc4 	movi	r3,-129
    1a50:	d8802d15 	stw	r2,180(sp)
    1a54:	90e4703a 	and	r18,r18,r3
    1a58:	983d2726 	beq	r19,zero,ef8 <__alt_data_end+0xfffe0ef8>
    1a5c:	0039883a 	mov	fp,zero
    1a60:	003d2a06 	br	f0c <__alt_data_end+0xfffe0f0c>
    1a64:	dc402617 	ldw	r17,152(sp)
    1a68:	0441d30e 	bge	zero,r17,21b8 <___vfprintf_internal_r+0x1968>
    1a6c:	dc403217 	ldw	r17,200(sp)
    1a70:	d8803317 	ldw	r2,204(sp)
    1a74:	1440010e 	bge	r2,r17,1a7c <___vfprintf_internal_r+0x122c>
    1a78:	1023883a 	mov	r17,r2
    1a7c:	04400a0e 	bge	zero,r17,1aa8 <___vfprintf_internal_r+0x1258>
    1a80:	d8801f17 	ldw	r2,124(sp)
    1a84:	1c47883a 	add	r3,r3,r17
    1a88:	44000015 	stw	r16,0(r8)
    1a8c:	10800044 	addi	r2,r2,1
    1a90:	44400115 	stw	r17,4(r8)
    1a94:	d8c02015 	stw	r3,128(sp)
    1a98:	d8801f15 	stw	r2,124(sp)
    1a9c:	010001c4 	movi	r4,7
    1aa0:	20826516 	blt	r4,r2,2438 <___vfprintf_internal_r+0x1be8>
    1aa4:	42000204 	addi	r8,r8,8
    1aa8:	88026116 	blt	r17,zero,2430 <___vfprintf_internal_r+0x1be0>
    1aac:	d9003217 	ldw	r4,200(sp)
    1ab0:	2463c83a 	sub	r17,r4,r17
    1ab4:	04407b0e 	bge	zero,r17,1ca4 <___vfprintf_internal_r+0x1454>
    1ab8:	05800404 	movi	r22,16
    1abc:	d8801f17 	ldw	r2,124(sp)
    1ac0:	b4419d0e 	bge	r22,r17,2138 <___vfprintf_internal_r+0x18e8>
    1ac4:	01000074 	movhi	r4,1
    1ac8:	213e0784 	addi	r4,r4,-2018
    1acc:	d9002b15 	stw	r4,172(sp)
    1ad0:	070001c4 	movi	fp,7
    1ad4:	dcc02c17 	ldw	r19,176(sp)
    1ad8:	00000306 	br	1ae8 <___vfprintf_internal_r+0x1298>
    1adc:	42000204 	addi	r8,r8,8
    1ae0:	8c7ffc04 	addi	r17,r17,-16
    1ae4:	b441970e 	bge	r22,r17,2144 <___vfprintf_internal_r+0x18f4>
    1ae8:	18c00404 	addi	r3,r3,16
    1aec:	10800044 	addi	r2,r2,1
    1af0:	45000015 	stw	r20,0(r8)
    1af4:	45800115 	stw	r22,4(r8)
    1af8:	d8c02015 	stw	r3,128(sp)
    1afc:	d8801f15 	stw	r2,124(sp)
    1b00:	e0bff60e 	bge	fp,r2,1adc <__alt_data_end+0xfffe1adc>
    1b04:	d9801e04 	addi	r6,sp,120
    1b08:	b80b883a 	mov	r5,r23
    1b0c:	9809883a 	mov	r4,r19
    1b10:	0007e4c0 	call	7e4c <__sprint_r>
    1b14:	103c501e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1b18:	d8c02017 	ldw	r3,128(sp)
    1b1c:	d8801f17 	ldw	r2,124(sp)
    1b20:	da000404 	addi	r8,sp,16
    1b24:	003fee06 	br	1ae0 <__alt_data_end+0xfffe1ae0>
    1b28:	d9002c17 	ldw	r4,176(sp)
    1b2c:	d9801e04 	addi	r6,sp,120
    1b30:	b80b883a 	mov	r5,r23
    1b34:	0007e4c0 	call	7e4c <__sprint_r>
    1b38:	103c471e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1b3c:	d8c02017 	ldw	r3,128(sp)
    1b40:	df002787 	ldb	fp,158(sp)
    1b44:	da000404 	addi	r8,sp,16
    1b48:	003d5606 	br	10a4 <__alt_data_end+0xfffe10a4>
    1b4c:	9080040c 	andi	r2,r18,16
    1b50:	10016126 	beq	r2,zero,20d8 <___vfprintf_internal_r+0x1888>
    1b54:	d8802d17 	ldw	r2,180(sp)
    1b58:	14c00017 	ldw	r19,0(r2)
    1b5c:	10800104 	addi	r2,r2,4
    1b60:	d8802d15 	stw	r2,180(sp)
    1b64:	982dd7fa 	srai	r22,r19,31
    1b68:	b005883a 	mov	r2,r22
    1b6c:	003c8206 	br	d78 <__alt_data_end+0xfffe0d78>
    1b70:	9080040c 	andi	r2,r18,16
    1b74:	10003526 	beq	r2,zero,1c4c <___vfprintf_internal_r+0x13fc>
    1b78:	d9402d17 	ldw	r5,180(sp)
    1b7c:	d8c02917 	ldw	r3,164(sp)
    1b80:	d8002785 	stb	zero,158(sp)
    1b84:	28800104 	addi	r2,r5,4
    1b88:	2cc00017 	ldw	r19,0(r5)
    1b8c:	002d883a 	mov	r22,zero
    1b90:	18003716 	blt	r3,zero,1c70 <___vfprintf_internal_r+0x1420>
    1b94:	00ffdfc4 	movi	r3,-129
    1b98:	d8802d15 	stw	r2,180(sp)
    1b9c:	90e4703a 	and	r18,r18,r3
    1ba0:	0039883a 	mov	fp,zero
    1ba4:	983df326 	beq	r19,zero,1374 <__alt_data_end+0xfffe1374>
    1ba8:	00800244 	movi	r2,9
    1bac:	14fc7b36 	bltu	r2,r19,d9c <__alt_data_end+0xfffe0d9c>
    1bb0:	d8c02817 	ldw	r3,160(sp)
    1bb4:	dc001dc4 	addi	r16,sp,119
    1bb8:	9cc00c04 	addi	r19,r19,48
    1bbc:	1c07c83a 	sub	r3,r3,r16
    1bc0:	dcc01dc5 	stb	r19,119(sp)
    1bc4:	d8c02e15 	stw	r3,184(sp)
    1bc8:	003ce806 	br	f6c <__alt_data_end+0xfffe0f6c>
    1bcc:	d8803317 	ldw	r2,204(sp)
    1bd0:	143fffc4 	addi	r16,r2,-1
    1bd4:	043f4d0e 	bge	zero,r16,190c <__alt_data_end+0xfffe190c>
    1bd8:	07000404 	movi	fp,16
    1bdc:	e400810e 	bge	fp,r16,1de4 <___vfprintf_internal_r+0x1594>
    1be0:	01400074 	movhi	r5,1
    1be4:	297e0784 	addi	r5,r5,-2018
    1be8:	d9402b15 	stw	r5,172(sp)
    1bec:	01c001c4 	movi	r7,7
    1bf0:	dcc02c17 	ldw	r19,176(sp)
    1bf4:	00000306 	br	1c04 <___vfprintf_internal_r+0x13b4>
    1bf8:	b5800204 	addi	r22,r22,8
    1bfc:	843ffc04 	addi	r16,r16,-16
    1c00:	e4007b0e 	bge	fp,r16,1df0 <___vfprintf_internal_r+0x15a0>
    1c04:	18c00404 	addi	r3,r3,16
    1c08:	8c400044 	addi	r17,r17,1
    1c0c:	b5000015 	stw	r20,0(r22)
    1c10:	b7000115 	stw	fp,4(r22)
    1c14:	d8c02015 	stw	r3,128(sp)
    1c18:	dc401f15 	stw	r17,124(sp)
    1c1c:	3c7ff60e 	bge	r7,r17,1bf8 <__alt_data_end+0xfffe1bf8>
    1c20:	d9801e04 	addi	r6,sp,120
    1c24:	b80b883a 	mov	r5,r23
    1c28:	9809883a 	mov	r4,r19
    1c2c:	d9c03c15 	stw	r7,240(sp)
    1c30:	0007e4c0 	call	7e4c <__sprint_r>
    1c34:	d9c03c17 	ldw	r7,240(sp)
    1c38:	103c071e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1c3c:	d8c02017 	ldw	r3,128(sp)
    1c40:	dc401f17 	ldw	r17,124(sp)
    1c44:	dd800404 	addi	r22,sp,16
    1c48:	003fec06 	br	1bfc <__alt_data_end+0xfffe1bfc>
    1c4c:	9080100c 	andi	r2,r18,64
    1c50:	d8002785 	stb	zero,158(sp)
    1c54:	10010e26 	beq	r2,zero,2090 <___vfprintf_internal_r+0x1840>
    1c58:	d9002d17 	ldw	r4,180(sp)
    1c5c:	d9402917 	ldw	r5,164(sp)
    1c60:	002d883a 	mov	r22,zero
    1c64:	20800104 	addi	r2,r4,4
    1c68:	24c0000b 	ldhu	r19,0(r4)
    1c6c:	283fc90e 	bge	r5,zero,1b94 <__alt_data_end+0xfffe1b94>
    1c70:	d8802d15 	stw	r2,180(sp)
    1c74:	0039883a 	mov	fp,zero
    1c78:	9d84b03a 	or	r2,r19,r22
    1c7c:	103c461e 	bne	r2,zero,d98 <__alt_data_end+0xfffe0d98>
    1c80:	00800044 	movi	r2,1
    1c84:	003e6c06 	br	1638 <__alt_data_end+0xfffe1638>
    1c88:	d9002c17 	ldw	r4,176(sp)
    1c8c:	d9801e04 	addi	r6,sp,120
    1c90:	b80b883a 	mov	r5,r23
    1c94:	0007e4c0 	call	7e4c <__sprint_r>
    1c98:	103bef1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1c9c:	d8c02017 	ldw	r3,128(sp)
    1ca0:	da000404 	addi	r8,sp,16
    1ca4:	d9003217 	ldw	r4,200(sp)
    1ca8:	d8802617 	ldw	r2,152(sp)
    1cac:	d9403317 	ldw	r5,204(sp)
    1cb0:	8123883a 	add	r17,r16,r4
    1cb4:	11400216 	blt	r2,r5,1cc0 <___vfprintf_internal_r+0x1470>
    1cb8:	9100004c 	andi	r4,r18,1
    1cbc:	20000d26 	beq	r4,zero,1cf4 <___vfprintf_internal_r+0x14a4>
    1cc0:	d9003717 	ldw	r4,220(sp)
    1cc4:	d9403417 	ldw	r5,208(sp)
    1cc8:	1907883a 	add	r3,r3,r4
    1ccc:	d9001f17 	ldw	r4,124(sp)
    1cd0:	41400015 	stw	r5,0(r8)
    1cd4:	d9403717 	ldw	r5,220(sp)
    1cd8:	21000044 	addi	r4,r4,1
    1cdc:	d8c02015 	stw	r3,128(sp)
    1ce0:	41400115 	stw	r5,4(r8)
    1ce4:	d9001f15 	stw	r4,124(sp)
    1ce8:	014001c4 	movi	r5,7
    1cec:	2901e816 	blt	r5,r4,2490 <___vfprintf_internal_r+0x1c40>
    1cf0:	42000204 	addi	r8,r8,8
    1cf4:	d9003317 	ldw	r4,204(sp)
    1cf8:	8121883a 	add	r16,r16,r4
    1cfc:	2085c83a 	sub	r2,r4,r2
    1d00:	8461c83a 	sub	r16,r16,r17
    1d04:	1400010e 	bge	r2,r16,1d0c <___vfprintf_internal_r+0x14bc>
    1d08:	1021883a 	mov	r16,r2
    1d0c:	04000a0e 	bge	zero,r16,1d38 <___vfprintf_internal_r+0x14e8>
    1d10:	d9001f17 	ldw	r4,124(sp)
    1d14:	1c07883a 	add	r3,r3,r16
    1d18:	44400015 	stw	r17,0(r8)
    1d1c:	21000044 	addi	r4,r4,1
    1d20:	44000115 	stw	r16,4(r8)
    1d24:	d8c02015 	stw	r3,128(sp)
    1d28:	d9001f15 	stw	r4,124(sp)
    1d2c:	014001c4 	movi	r5,7
    1d30:	2901fb16 	blt	r5,r4,2520 <___vfprintf_internal_r+0x1cd0>
    1d34:	42000204 	addi	r8,r8,8
    1d38:	8001f716 	blt	r16,zero,2518 <___vfprintf_internal_r+0x1cc8>
    1d3c:	1421c83a 	sub	r16,r2,r16
    1d40:	043d380e 	bge	zero,r16,1224 <__alt_data_end+0xfffe1224>
    1d44:	04400404 	movi	r17,16
    1d48:	d8801f17 	ldw	r2,124(sp)
    1d4c:	8c3efb0e 	bge	r17,r16,193c <__alt_data_end+0xfffe193c>
    1d50:	01400074 	movhi	r5,1
    1d54:	297e0784 	addi	r5,r5,-2018
    1d58:	d9402b15 	stw	r5,172(sp)
    1d5c:	058001c4 	movi	r22,7
    1d60:	dcc02c17 	ldw	r19,176(sp)
    1d64:	00000306 	br	1d74 <___vfprintf_internal_r+0x1524>
    1d68:	42000204 	addi	r8,r8,8
    1d6c:	843ffc04 	addi	r16,r16,-16
    1d70:	8c3ef50e 	bge	r17,r16,1948 <__alt_data_end+0xfffe1948>
    1d74:	18c00404 	addi	r3,r3,16
    1d78:	10800044 	addi	r2,r2,1
    1d7c:	45000015 	stw	r20,0(r8)
    1d80:	44400115 	stw	r17,4(r8)
    1d84:	d8c02015 	stw	r3,128(sp)
    1d88:	d8801f15 	stw	r2,124(sp)
    1d8c:	b0bff60e 	bge	r22,r2,1d68 <__alt_data_end+0xfffe1d68>
    1d90:	d9801e04 	addi	r6,sp,120
    1d94:	b80b883a 	mov	r5,r23
    1d98:	9809883a 	mov	r4,r19
    1d9c:	0007e4c0 	call	7e4c <__sprint_r>
    1da0:	103bad1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1da4:	d8c02017 	ldw	r3,128(sp)
    1da8:	d8801f17 	ldw	r2,124(sp)
    1dac:	da000404 	addi	r8,sp,16
    1db0:	003fee06 	br	1d6c <__alt_data_end+0xfffe1d6c>
    1db4:	9088703a 	and	r4,r18,r2
    1db8:	203eab1e 	bne	r4,zero,1868 <__alt_data_end+0xfffe1868>
    1dbc:	dc401f17 	ldw	r17,124(sp)
    1dc0:	40800115 	stw	r2,4(r8)
    1dc4:	44000015 	stw	r16,0(r8)
    1dc8:	8c400044 	addi	r17,r17,1
    1dcc:	d8c02015 	stw	r3,128(sp)
    1dd0:	dc401f15 	stw	r17,124(sp)
    1dd4:	008001c4 	movi	r2,7
    1dd8:	14400e16 	blt	r2,r17,1e14 <___vfprintf_internal_r+0x15c4>
    1ddc:	45800204 	addi	r22,r8,8
    1de0:	003eca06 	br	190c <__alt_data_end+0xfffe190c>
    1de4:	01000074 	movhi	r4,1
    1de8:	213e0784 	addi	r4,r4,-2018
    1dec:	d9002b15 	stw	r4,172(sp)
    1df0:	d8802b17 	ldw	r2,172(sp)
    1df4:	1c07883a 	add	r3,r3,r16
    1df8:	8c400044 	addi	r17,r17,1
    1dfc:	b0800015 	stw	r2,0(r22)
    1e00:	b4000115 	stw	r16,4(r22)
    1e04:	d8c02015 	stw	r3,128(sp)
    1e08:	dc401f15 	stw	r17,124(sp)
    1e0c:	008001c4 	movi	r2,7
    1e10:	147ebd0e 	bge	r2,r17,1908 <__alt_data_end+0xfffe1908>
    1e14:	d9002c17 	ldw	r4,176(sp)
    1e18:	d9801e04 	addi	r6,sp,120
    1e1c:	b80b883a 	mov	r5,r23
    1e20:	0007e4c0 	call	7e4c <__sprint_r>
    1e24:	103b8c1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1e28:	d8c02017 	ldw	r3,128(sp)
    1e2c:	dc401f17 	ldw	r17,124(sp)
    1e30:	dd800404 	addi	r22,sp,16
    1e34:	003eb506 	br	190c <__alt_data_end+0xfffe190c>
    1e38:	d9002c17 	ldw	r4,176(sp)
    1e3c:	d9801e04 	addi	r6,sp,120
    1e40:	b80b883a 	mov	r5,r23
    1e44:	0007e4c0 	call	7e4c <__sprint_r>
    1e48:	103b831e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1e4c:	d8c02017 	ldw	r3,128(sp)
    1e50:	dc401f17 	ldw	r17,124(sp)
    1e54:	da000404 	addi	r8,sp,16
    1e58:	003e8d06 	br	1890 <__alt_data_end+0xfffe1890>
    1e5c:	d9002c17 	ldw	r4,176(sp)
    1e60:	d9801e04 	addi	r6,sp,120
    1e64:	b80b883a 	mov	r5,r23
    1e68:	0007e4c0 	call	7e4c <__sprint_r>
    1e6c:	103b7a1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1e70:	d8c02017 	ldw	r3,128(sp)
    1e74:	dc401f17 	ldw	r17,124(sp)
    1e78:	dd800404 	addi	r22,sp,16
    1e7c:	003e8f06 	br	18bc <__alt_data_end+0xfffe18bc>
    1e80:	0027883a 	mov	r19,zero
    1e84:	003f4a06 	br	1bb0 <__alt_data_end+0xfffe1bb0>
    1e88:	d9002c17 	ldw	r4,176(sp)
    1e8c:	d9801e04 	addi	r6,sp,120
    1e90:	b80b883a 	mov	r5,r23
    1e94:	0007e4c0 	call	7e4c <__sprint_r>
    1e98:	103b6f1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    1e9c:	d8c02017 	ldw	r3,128(sp)
    1ea0:	da000404 	addi	r8,sp,16
    1ea4:	003c9d06 	br	111c <__alt_data_end+0xfffe111c>
    1ea8:	04e7c83a 	sub	r19,zero,r19
    1eac:	9804c03a 	cmpne	r2,r19,zero
    1eb0:	05adc83a 	sub	r22,zero,r22
    1eb4:	b0adc83a 	sub	r22,r22,r2
    1eb8:	d8802917 	ldw	r2,164(sp)
    1ebc:	07000b44 	movi	fp,45
    1ec0:	df002785 	stb	fp,158(sp)
    1ec4:	10017b16 	blt	r2,zero,24b4 <___vfprintf_internal_r+0x1c64>
    1ec8:	00bfdfc4 	movi	r2,-129
    1ecc:	90a4703a 	and	r18,r18,r2
    1ed0:	003bb106 	br	d98 <__alt_data_end+0xfffe0d98>
    1ed4:	d9003617 	ldw	r4,216(sp)
    1ed8:	d9403817 	ldw	r5,224(sp)
    1edc:	da003d15 	stw	r8,244(sp)
    1ee0:	0007a700 	call	7a70 <__fpclassifyd>
    1ee4:	da003d17 	ldw	r8,244(sp)
    1ee8:	1000f026 	beq	r2,zero,22ac <___vfprintf_internal_r+0x1a5c>
    1eec:	d9002917 	ldw	r4,164(sp)
    1ef0:	05bff7c4 	movi	r22,-33
    1ef4:	00bfffc4 	movi	r2,-1
    1ef8:	8dac703a 	and	r22,r17,r22
    1efc:	20820026 	beq	r4,r2,2700 <___vfprintf_internal_r+0x1eb0>
    1f00:	008011c4 	movi	r2,71
    1f04:	b081f726 	beq	r22,r2,26e4 <___vfprintf_internal_r+0x1e94>
    1f08:	d9003817 	ldw	r4,224(sp)
    1f0c:	90c04014 	ori	r3,r18,256
    1f10:	d8c02b15 	stw	r3,172(sp)
    1f14:	20021516 	blt	r4,zero,276c <___vfprintf_internal_r+0x1f1c>
    1f18:	dcc03817 	ldw	r19,224(sp)
    1f1c:	d8002a05 	stb	zero,168(sp)
    1f20:	00801984 	movi	r2,102
    1f24:	8881f926 	beq	r17,r2,270c <___vfprintf_internal_r+0x1ebc>
    1f28:	00801184 	movi	r2,70
    1f2c:	88821c26 	beq	r17,r2,27a0 <___vfprintf_internal_r+0x1f50>
    1f30:	00801144 	movi	r2,69
    1f34:	b081ef26 	beq	r22,r2,26f4 <___vfprintf_internal_r+0x1ea4>
    1f38:	d8c02917 	ldw	r3,164(sp)
    1f3c:	d8802104 	addi	r2,sp,132
    1f40:	d8800315 	stw	r2,12(sp)
    1f44:	d9403617 	ldw	r5,216(sp)
    1f48:	d8802504 	addi	r2,sp,148
    1f4c:	d9002c17 	ldw	r4,176(sp)
    1f50:	d8800215 	stw	r2,8(sp)
    1f54:	d8802604 	addi	r2,sp,152
    1f58:	d8c00015 	stw	r3,0(sp)
    1f5c:	d8800115 	stw	r2,4(sp)
    1f60:	01c00084 	movi	r7,2
    1f64:	980d883a 	mov	r6,r19
    1f68:	d8c03c15 	stw	r3,240(sp)
    1f6c:	da003d15 	stw	r8,244(sp)
    1f70:	0002e740 	call	2e74 <_dtoa_r>
    1f74:	1021883a 	mov	r16,r2
    1f78:	008019c4 	movi	r2,103
    1f7c:	d8c03c17 	ldw	r3,240(sp)
    1f80:	da003d17 	ldw	r8,244(sp)
    1f84:	88817126 	beq	r17,r2,254c <___vfprintf_internal_r+0x1cfc>
    1f88:	008011c4 	movi	r2,71
    1f8c:	88829226 	beq	r17,r2,29d8 <___vfprintf_internal_r+0x2188>
    1f90:	80f9883a 	add	fp,r16,r3
    1f94:	d9003617 	ldw	r4,216(sp)
    1f98:	000d883a 	mov	r6,zero
    1f9c:	000f883a 	mov	r7,zero
    1fa0:	980b883a 	mov	r5,r19
    1fa4:	da003d15 	stw	r8,244(sp)
    1fa8:	000bac40 	call	bac4 <__eqdf2>
    1fac:	da003d17 	ldw	r8,244(sp)
    1fb0:	10018d26 	beq	r2,zero,25e8 <___vfprintf_internal_r+0x1d98>
    1fb4:	d8802117 	ldw	r2,132(sp)
    1fb8:	1700062e 	bgeu	r2,fp,1fd4 <___vfprintf_internal_r+0x1784>
    1fbc:	01000c04 	movi	r4,48
    1fc0:	10c00044 	addi	r3,r2,1
    1fc4:	d8c02115 	stw	r3,132(sp)
    1fc8:	11000005 	stb	r4,0(r2)
    1fcc:	d8802117 	ldw	r2,132(sp)
    1fd0:	173ffb36 	bltu	r2,fp,1fc0 <__alt_data_end+0xfffe1fc0>
    1fd4:	1405c83a 	sub	r2,r2,r16
    1fd8:	d8803315 	stw	r2,204(sp)
    1fdc:	008011c4 	movi	r2,71
    1fe0:	b0817626 	beq	r22,r2,25bc <___vfprintf_internal_r+0x1d6c>
    1fe4:	00801944 	movi	r2,101
    1fe8:	1442810e 	bge	r2,r17,29f0 <___vfprintf_internal_r+0x21a0>
    1fec:	d8c02617 	ldw	r3,152(sp)
    1ff0:	00801984 	movi	r2,102
    1ff4:	d8c03215 	stw	r3,200(sp)
    1ff8:	8881fe26 	beq	r17,r2,27f4 <___vfprintf_internal_r+0x1fa4>
    1ffc:	d8c03217 	ldw	r3,200(sp)
    2000:	d9003317 	ldw	r4,204(sp)
    2004:	1901dd16 	blt	r3,r4,277c <___vfprintf_internal_r+0x1f2c>
    2008:	9480004c 	andi	r18,r18,1
    200c:	90022b1e 	bne	r18,zero,28bc <___vfprintf_internal_r+0x206c>
    2010:	1805883a 	mov	r2,r3
    2014:	18028016 	blt	r3,zero,2a18 <___vfprintf_internal_r+0x21c8>
    2018:	d8c03217 	ldw	r3,200(sp)
    201c:	044019c4 	movi	r17,103
    2020:	d8c02e15 	stw	r3,184(sp)
    2024:	df002a07 	ldb	fp,168(sp)
    2028:	e001531e 	bne	fp,zero,2578 <___vfprintf_internal_r+0x1d28>
    202c:	df002783 	ldbu	fp,158(sp)
    2030:	d8802a15 	stw	r2,168(sp)
    2034:	dc802b17 	ldw	r18,172(sp)
    2038:	d8002915 	stw	zero,164(sp)
    203c:	003bd106 	br	f84 <__alt_data_end+0xfffe0f84>
    2040:	d8802d17 	ldw	r2,180(sp)
    2044:	d8c02d17 	ldw	r3,180(sp)
    2048:	d9002d17 	ldw	r4,180(sp)
    204c:	10800017 	ldw	r2,0(r2)
    2050:	18c00117 	ldw	r3,4(r3)
    2054:	21000204 	addi	r4,r4,8
    2058:	d8803615 	stw	r2,216(sp)
    205c:	d8c03815 	stw	r3,224(sp)
    2060:	d9002d15 	stw	r4,180(sp)
    2064:	003b7506 	br	e3c <__alt_data_end+0xfffe0e3c>
    2068:	ac400007 	ldb	r17,0(r21)
    206c:	003a5906 	br	9d4 <__alt_data_end+0xfffe09d4>
    2070:	9080100c 	andi	r2,r18,64
    2074:	1000a826 	beq	r2,zero,2318 <___vfprintf_internal_r+0x1ac8>
    2078:	d9002d17 	ldw	r4,180(sp)
    207c:	002d883a 	mov	r22,zero
    2080:	24c0000b 	ldhu	r19,0(r4)
    2084:	21000104 	addi	r4,r4,4
    2088:	d9002d15 	stw	r4,180(sp)
    208c:	003ccb06 	br	13bc <__alt_data_end+0xfffe13bc>
    2090:	d8c02d17 	ldw	r3,180(sp)
    2094:	d9002917 	ldw	r4,164(sp)
    2098:	002d883a 	mov	r22,zero
    209c:	18800104 	addi	r2,r3,4
    20a0:	1cc00017 	ldw	r19,0(r3)
    20a4:	203ebb0e 	bge	r4,zero,1b94 <__alt_data_end+0xfffe1b94>
    20a8:	003ef106 	br	1c70 <__alt_data_end+0xfffe1c70>
    20ac:	9080040c 	andi	r2,r18,16
    20b0:	1000921e 	bne	r2,zero,22fc <___vfprintf_internal_r+0x1aac>
    20b4:	9480100c 	andi	r18,r18,64
    20b8:	90013926 	beq	r18,zero,25a0 <___vfprintf_internal_r+0x1d50>
    20bc:	d9002d17 	ldw	r4,180(sp)
    20c0:	d9402f17 	ldw	r5,188(sp)
    20c4:	20800017 	ldw	r2,0(r4)
    20c8:	21000104 	addi	r4,r4,4
    20cc:	d9002d15 	stw	r4,180(sp)
    20d0:	1140000d 	sth	r5,0(r2)
    20d4:	003a1606 	br	930 <__alt_data_end+0xfffe0930>
    20d8:	9080100c 	andi	r2,r18,64
    20dc:	10008026 	beq	r2,zero,22e0 <___vfprintf_internal_r+0x1a90>
    20e0:	d8c02d17 	ldw	r3,180(sp)
    20e4:	1cc0000f 	ldh	r19,0(r3)
    20e8:	18c00104 	addi	r3,r3,4
    20ec:	d8c02d15 	stw	r3,180(sp)
    20f0:	982dd7fa 	srai	r22,r19,31
    20f4:	b005883a 	mov	r2,r22
    20f8:	003b1f06 	br	d78 <__alt_data_end+0xfffe0d78>
    20fc:	9080100c 	andi	r2,r18,64
    2100:	d8002785 	stb	zero,158(sp)
    2104:	10008a1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x1ae0>
    2108:	d9402d17 	ldw	r5,180(sp)
    210c:	d8c02917 	ldw	r3,164(sp)
    2110:	002d883a 	mov	r22,zero
    2114:	28800104 	addi	r2,r5,4
    2118:	2cc00017 	ldw	r19,0(r5)
    211c:	183e4b0e 	bge	r3,zero,1a4c <__alt_data_end+0xfffe1a4c>
    2120:	9d86b03a 	or	r3,r19,r22
    2124:	d8802d15 	stw	r2,180(sp)
    2128:	183e4c1e 	bne	r3,zero,1a5c <__alt_data_end+0xfffe1a5c>
    212c:	0039883a 	mov	fp,zero
    2130:	0005883a 	mov	r2,zero
    2134:	003d4006 	br	1638 <__alt_data_end+0xfffe1638>
    2138:	01400074 	movhi	r5,1
    213c:	297e0784 	addi	r5,r5,-2018
    2140:	d9402b15 	stw	r5,172(sp)
    2144:	d9402b17 	ldw	r5,172(sp)
    2148:	1c47883a 	add	r3,r3,r17
    214c:	10800044 	addi	r2,r2,1
    2150:	41400015 	stw	r5,0(r8)
    2154:	44400115 	stw	r17,4(r8)
    2158:	d8c02015 	stw	r3,128(sp)
    215c:	d8801f15 	stw	r2,124(sp)
    2160:	010001c4 	movi	r4,7
    2164:	20bec816 	blt	r4,r2,1c88 <__alt_data_end+0xfffe1c88>
    2168:	42000204 	addi	r8,r8,8
    216c:	003ecd06 	br	1ca4 <__alt_data_end+0xfffe1ca4>
    2170:	d9002917 	ldw	r4,164(sp)
    2174:	d8002785 	stb	zero,158(sp)
    2178:	203d2d16 	blt	r4,zero,1630 <__alt_data_end+0xfffe1630>
    217c:	00bfdfc4 	movi	r2,-129
    2180:	90a4703a 	and	r18,r18,r2
    2184:	003a9106 	br	bcc <__alt_data_end+0xfffe0bcc>
    2188:	01000074 	movhi	r4,1
    218c:	213e0784 	addi	r4,r4,-2018
    2190:	d9002b15 	stw	r4,172(sp)
    2194:	003c0c06 	br	11c8 <__alt_data_end+0xfffe11c8>
    2198:	d9002c17 	ldw	r4,176(sp)
    219c:	d9801e04 	addi	r6,sp,120
    21a0:	b80b883a 	mov	r5,r23
    21a4:	0007e4c0 	call	7e4c <__sprint_r>
    21a8:	103aab1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    21ac:	d8c02017 	ldw	r3,128(sp)
    21b0:	da000404 	addi	r8,sp,16
    21b4:	003d4106 	br	16bc <__alt_data_end+0xfffe16bc>
    21b8:	d8801f17 	ldw	r2,124(sp)
    21bc:	01400074 	movhi	r5,1
    21c0:	01000044 	movi	r4,1
    21c4:	18c00044 	addi	r3,r3,1
    21c8:	10800044 	addi	r2,r2,1
    21cc:	297e0704 	addi	r5,r5,-2020
    21d0:	41000115 	stw	r4,4(r8)
    21d4:	41400015 	stw	r5,0(r8)
    21d8:	d8c02015 	stw	r3,128(sp)
    21dc:	d8801f15 	stw	r2,124(sp)
    21e0:	010001c4 	movi	r4,7
    21e4:	20805c16 	blt	r4,r2,2358 <___vfprintf_internal_r+0x1b08>
    21e8:	42000204 	addi	r8,r8,8
    21ec:	8800041e 	bne	r17,zero,2200 <___vfprintf_internal_r+0x19b0>
    21f0:	d8803317 	ldw	r2,204(sp)
    21f4:	1000021e 	bne	r2,zero,2200 <___vfprintf_internal_r+0x19b0>
    21f8:	9080004c 	andi	r2,r18,1
    21fc:	103c0926 	beq	r2,zero,1224 <__alt_data_end+0xfffe1224>
    2200:	d9003717 	ldw	r4,220(sp)
    2204:	d8801f17 	ldw	r2,124(sp)
    2208:	d9403417 	ldw	r5,208(sp)
    220c:	20c7883a 	add	r3,r4,r3
    2210:	10800044 	addi	r2,r2,1
    2214:	41000115 	stw	r4,4(r8)
    2218:	41400015 	stw	r5,0(r8)
    221c:	d8c02015 	stw	r3,128(sp)
    2220:	d8801f15 	stw	r2,124(sp)
    2224:	010001c4 	movi	r4,7
    2228:	20812116 	blt	r4,r2,26b0 <___vfprintf_internal_r+0x1e60>
    222c:	42000204 	addi	r8,r8,8
    2230:	0463c83a 	sub	r17,zero,r17
    2234:	0440730e 	bge	zero,r17,2404 <___vfprintf_internal_r+0x1bb4>
    2238:	05800404 	movi	r22,16
    223c:	b440860e 	bge	r22,r17,2458 <___vfprintf_internal_r+0x1c08>
    2240:	01400074 	movhi	r5,1
    2244:	297e0784 	addi	r5,r5,-2018
    2248:	d9402b15 	stw	r5,172(sp)
    224c:	070001c4 	movi	fp,7
    2250:	dcc02c17 	ldw	r19,176(sp)
    2254:	00000306 	br	2264 <___vfprintf_internal_r+0x1a14>
    2258:	42000204 	addi	r8,r8,8
    225c:	8c7ffc04 	addi	r17,r17,-16
    2260:	b440800e 	bge	r22,r17,2464 <___vfprintf_internal_r+0x1c14>
    2264:	18c00404 	addi	r3,r3,16
    2268:	10800044 	addi	r2,r2,1
    226c:	45000015 	stw	r20,0(r8)
    2270:	45800115 	stw	r22,4(r8)
    2274:	d8c02015 	stw	r3,128(sp)
    2278:	d8801f15 	stw	r2,124(sp)
    227c:	e0bff60e 	bge	fp,r2,2258 <__alt_data_end+0xfffe2258>
    2280:	d9801e04 	addi	r6,sp,120
    2284:	b80b883a 	mov	r5,r23
    2288:	9809883a 	mov	r4,r19
    228c:	0007e4c0 	call	7e4c <__sprint_r>
    2290:	103a711e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    2294:	d8c02017 	ldw	r3,128(sp)
    2298:	d8801f17 	ldw	r2,124(sp)
    229c:	da000404 	addi	r8,sp,16
    22a0:	003fee06 	br	225c <__alt_data_end+0xfffe225c>
    22a4:	00bfffc4 	movi	r2,-1
    22a8:	003a6f06 	br	c68 <__alt_data_end+0xfffe0c68>
    22ac:	008011c4 	movi	r2,71
    22b0:	1440b816 	blt	r2,r17,2594 <___vfprintf_internal_r+0x1d44>
    22b4:	04000074 	movhi	r16,1
    22b8:	843df904 	addi	r16,r16,-2076
    22bc:	00c000c4 	movi	r3,3
    22c0:	00bfdfc4 	movi	r2,-129
    22c4:	d8c02a15 	stw	r3,168(sp)
    22c8:	90a4703a 	and	r18,r18,r2
    22cc:	df002783 	ldbu	fp,158(sp)
    22d0:	d8c02e15 	stw	r3,184(sp)
    22d4:	d8002915 	stw	zero,164(sp)
    22d8:	d8003215 	stw	zero,200(sp)
    22dc:	003b2906 	br	f84 <__alt_data_end+0xfffe0f84>
    22e0:	d9002d17 	ldw	r4,180(sp)
    22e4:	24c00017 	ldw	r19,0(r4)
    22e8:	21000104 	addi	r4,r4,4
    22ec:	d9002d15 	stw	r4,180(sp)
    22f0:	982dd7fa 	srai	r22,r19,31
    22f4:	b005883a 	mov	r2,r22
    22f8:	003a9f06 	br	d78 <__alt_data_end+0xfffe0d78>
    22fc:	d9402d17 	ldw	r5,180(sp)
    2300:	d8c02f17 	ldw	r3,188(sp)
    2304:	28800017 	ldw	r2,0(r5)
    2308:	29400104 	addi	r5,r5,4
    230c:	d9402d15 	stw	r5,180(sp)
    2310:	10c00015 	stw	r3,0(r2)
    2314:	00398606 	br	930 <__alt_data_end+0xfffe0930>
    2318:	d9402d17 	ldw	r5,180(sp)
    231c:	002d883a 	mov	r22,zero
    2320:	2cc00017 	ldw	r19,0(r5)
    2324:	29400104 	addi	r5,r5,4
    2328:	d9402d15 	stw	r5,180(sp)
    232c:	003c2306 	br	13bc <__alt_data_end+0xfffe13bc>
    2330:	d8c02d17 	ldw	r3,180(sp)
    2334:	d9002917 	ldw	r4,164(sp)
    2338:	002d883a 	mov	r22,zero
    233c:	18800104 	addi	r2,r3,4
    2340:	1cc0000b 	ldhu	r19,0(r3)
    2344:	203dc10e 	bge	r4,zero,1a4c <__alt_data_end+0xfffe1a4c>
    2348:	003f7506 	br	2120 <__alt_data_end+0xfffe2120>
    234c:	04000074 	movhi	r16,1
    2350:	843df704 	addi	r16,r16,-2084
    2354:	003acc06 	br	e88 <__alt_data_end+0xfffe0e88>
    2358:	d9002c17 	ldw	r4,176(sp)
    235c:	d9801e04 	addi	r6,sp,120
    2360:	b80b883a 	mov	r5,r23
    2364:	0007e4c0 	call	7e4c <__sprint_r>
    2368:	103a3b1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    236c:	dc402617 	ldw	r17,152(sp)
    2370:	d8c02017 	ldw	r3,128(sp)
    2374:	da000404 	addi	r8,sp,16
    2378:	003f9c06 	br	21ec <__alt_data_end+0xfffe21ec>
    237c:	ac400043 	ldbu	r17,1(r21)
    2380:	94800814 	ori	r18,r18,32
    2384:	ad400044 	addi	r21,r21,1
    2388:	8c403fcc 	andi	r17,r17,255
    238c:	8c40201c 	xori	r17,r17,128
    2390:	8c7fe004 	addi	r17,r17,-128
    2394:	00398f06 	br	9d4 <__alt_data_end+0xfffe09d4>
    2398:	d8c02d15 	stw	r3,180(sp)
    239c:	0039883a 	mov	fp,zero
    23a0:	003e3506 	br	1c78 <__alt_data_end+0xfffe1c78>
    23a4:	d9002c17 	ldw	r4,176(sp)
    23a8:	d9801e04 	addi	r6,sp,120
    23ac:	b80b883a 	mov	r5,r23
    23b0:	0007e4c0 	call	7e4c <__sprint_r>
    23b4:	103a281e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    23b8:	d8c02017 	ldw	r3,128(sp)
    23bc:	da000404 	addi	r8,sp,16
    23c0:	003cd006 	br	1704 <__alt_data_end+0xfffe1704>
    23c4:	8009883a 	mov	r4,r16
    23c8:	da003d15 	stw	r8,244(sp)
    23cc:	00007b80 	call	7b8 <strlen>
    23d0:	d8802e15 	stw	r2,184(sp)
    23d4:	da003d17 	ldw	r8,244(sp)
    23d8:	103c340e 	bge	r2,zero,14ac <__alt_data_end+0xfffe14ac>
    23dc:	0005883a 	mov	r2,zero
    23e0:	003c3206 	br	14ac <__alt_data_end+0xfffe14ac>
    23e4:	d9002c17 	ldw	r4,176(sp)
    23e8:	d9801e04 	addi	r6,sp,120
    23ec:	b80b883a 	mov	r5,r23
    23f0:	0007e4c0 	call	7e4c <__sprint_r>
    23f4:	103a181e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    23f8:	d8c02017 	ldw	r3,128(sp)
    23fc:	d8801f17 	ldw	r2,124(sp)
    2400:	da000404 	addi	r8,sp,16
    2404:	d9403317 	ldw	r5,204(sp)
    2408:	10800044 	addi	r2,r2,1
    240c:	44000015 	stw	r16,0(r8)
    2410:	28c7883a 	add	r3,r5,r3
    2414:	003b7d06 	br	120c <__alt_data_end+0xfffe120c>
    2418:	01000074 	movhi	r4,1
    241c:	213e0b84 	addi	r4,r4,-2002
    2420:	d9003515 	stw	r4,212(sp)
    2424:	003b1406 	br	1078 <__alt_data_end+0xfffe1078>
    2428:	013fffc4 	movi	r4,-1
    242c:	003a3506 	br	d04 <__alt_data_end+0xfffe0d04>
    2430:	0023883a 	mov	r17,zero
    2434:	003d9d06 	br	1aac <__alt_data_end+0xfffe1aac>
    2438:	d9002c17 	ldw	r4,176(sp)
    243c:	d9801e04 	addi	r6,sp,120
    2440:	b80b883a 	mov	r5,r23
    2444:	0007e4c0 	call	7e4c <__sprint_r>
    2448:	103a031e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    244c:	d8c02017 	ldw	r3,128(sp)
    2450:	da000404 	addi	r8,sp,16
    2454:	003d9406 	br	1aa8 <__alt_data_end+0xfffe1aa8>
    2458:	01000074 	movhi	r4,1
    245c:	213e0784 	addi	r4,r4,-2018
    2460:	d9002b15 	stw	r4,172(sp)
    2464:	d9002b17 	ldw	r4,172(sp)
    2468:	1c47883a 	add	r3,r3,r17
    246c:	10800044 	addi	r2,r2,1
    2470:	41000015 	stw	r4,0(r8)
    2474:	44400115 	stw	r17,4(r8)
    2478:	d8c02015 	stw	r3,128(sp)
    247c:	d8801f15 	stw	r2,124(sp)
    2480:	010001c4 	movi	r4,7
    2484:	20bfd716 	blt	r4,r2,23e4 <__alt_data_end+0xfffe23e4>
    2488:	42000204 	addi	r8,r8,8
    248c:	003fdd06 	br	2404 <__alt_data_end+0xfffe2404>
    2490:	d9002c17 	ldw	r4,176(sp)
    2494:	d9801e04 	addi	r6,sp,120
    2498:	b80b883a 	mov	r5,r23
    249c:	0007e4c0 	call	7e4c <__sprint_r>
    24a0:	1039ed1e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    24a4:	d8802617 	ldw	r2,152(sp)
    24a8:	d8c02017 	ldw	r3,128(sp)
    24ac:	da000404 	addi	r8,sp,16
    24b0:	003e1006 	br	1cf4 <__alt_data_end+0xfffe1cf4>
    24b4:	00800044 	movi	r2,1
    24b8:	10803fcc 	andi	r2,r2,255
    24bc:	00c00044 	movi	r3,1
    24c0:	10fa3526 	beq	r2,r3,d98 <__alt_data_end+0xfffe0d98>
    24c4:	00c00084 	movi	r3,2
    24c8:	10fbcb26 	beq	r2,r3,13f8 <__alt_data_end+0xfffe13f8>
    24cc:	003a8f06 	br	f0c <__alt_data_end+0xfffe0f0c>
    24d0:	01000074 	movhi	r4,1
    24d4:	213e0b84 	addi	r4,r4,-2002
    24d8:	d9003515 	stw	r4,212(sp)
    24dc:	003b7606 	br	12b8 <__alt_data_end+0xfffe12b8>
    24e0:	d8802917 	ldw	r2,164(sp)
    24e4:	00c00184 	movi	r3,6
    24e8:	1880012e 	bgeu	r3,r2,24f0 <___vfprintf_internal_r+0x1ca0>
    24ec:	1805883a 	mov	r2,r3
    24f0:	d8802e15 	stw	r2,184(sp)
    24f4:	1000ef16 	blt	r2,zero,28b4 <___vfprintf_internal_r+0x2064>
    24f8:	04000074 	movhi	r16,1
    24fc:	d8802a15 	stw	r2,168(sp)
    2500:	dcc02d15 	stw	r19,180(sp)
    2504:	d8002915 	stw	zero,164(sp)
    2508:	d8003215 	stw	zero,200(sp)
    250c:	843e0504 	addi	r16,r16,-2028
    2510:	0039883a 	mov	fp,zero
    2514:	003aa206 	br	fa0 <__alt_data_end+0xfffe0fa0>
    2518:	0021883a 	mov	r16,zero
    251c:	003e0706 	br	1d3c <__alt_data_end+0xfffe1d3c>
    2520:	d9002c17 	ldw	r4,176(sp)
    2524:	d9801e04 	addi	r6,sp,120
    2528:	b80b883a 	mov	r5,r23
    252c:	0007e4c0 	call	7e4c <__sprint_r>
    2530:	1039c91e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    2534:	d8802617 	ldw	r2,152(sp)
    2538:	d9403317 	ldw	r5,204(sp)
    253c:	d8c02017 	ldw	r3,128(sp)
    2540:	da000404 	addi	r8,sp,16
    2544:	2885c83a 	sub	r2,r5,r2
    2548:	003dfb06 	br	1d38 <__alt_data_end+0xfffe1d38>
    254c:	9080004c 	andi	r2,r18,1
    2550:	103e8f1e 	bne	r2,zero,1f90 <__alt_data_end+0xfffe1f90>
    2554:	d8802117 	ldw	r2,132(sp)
    2558:	003e9e06 	br	1fd4 <__alt_data_end+0xfffe1fd4>
    255c:	1025883a 	mov	r18,r2
    2560:	0039883a 	mov	fp,zero
    2564:	00800084 	movi	r2,2
    2568:	003fd306 	br	24b8 <__alt_data_end+0xfffe24b8>
    256c:	07000b44 	movi	fp,45
    2570:	df002785 	stb	fp,158(sp)
    2574:	003a4006 	br	e78 <__alt_data_end+0xfffe0e78>
    2578:	00c00b44 	movi	r3,45
    257c:	d8c02785 	stb	r3,158(sp)
    2580:	d8802a15 	stw	r2,168(sp)
    2584:	dc802b17 	ldw	r18,172(sp)
    2588:	d8002915 	stw	zero,164(sp)
    258c:	07000b44 	movi	fp,45
    2590:	003a8006 	br	f94 <__alt_data_end+0xfffe0f94>
    2594:	04000074 	movhi	r16,1
    2598:	843dfa04 	addi	r16,r16,-2072
    259c:	003f4706 	br	22bc <__alt_data_end+0xfffe22bc>
    25a0:	d8c02d17 	ldw	r3,180(sp)
    25a4:	d9002f17 	ldw	r4,188(sp)
    25a8:	18800017 	ldw	r2,0(r3)
    25ac:	18c00104 	addi	r3,r3,4
    25b0:	d8c02d15 	stw	r3,180(sp)
    25b4:	11000015 	stw	r4,0(r2)
    25b8:	0038dd06 	br	930 <__alt_data_end+0xfffe0930>
    25bc:	dd802617 	ldw	r22,152(sp)
    25c0:	00bfff44 	movi	r2,-3
    25c4:	b0801c16 	blt	r22,r2,2638 <___vfprintf_internal_r+0x1de8>
    25c8:	d9402917 	ldw	r5,164(sp)
    25cc:	2d801a16 	blt	r5,r22,2638 <___vfprintf_internal_r+0x1de8>
    25d0:	dd803215 	stw	r22,200(sp)
    25d4:	003e8906 	br	1ffc <__alt_data_end+0xfffe1ffc>
    25d8:	01000074 	movhi	r4,1
    25dc:	213e0784 	addi	r4,r4,-2018
    25e0:	d9002b15 	stw	r4,172(sp)
    25e4:	003c9106 	br	182c <__alt_data_end+0xfffe182c>
    25e8:	e005883a 	mov	r2,fp
    25ec:	003e7906 	br	1fd4 <__alt_data_end+0xfffe1fd4>
    25f0:	d9402917 	ldw	r5,164(sp)
    25f4:	df002783 	ldbu	fp,158(sp)
    25f8:	dcc02d15 	stw	r19,180(sp)
    25fc:	d9402a15 	stw	r5,168(sp)
    2600:	d9402e15 	stw	r5,184(sp)
    2604:	d8002915 	stw	zero,164(sp)
    2608:	d8003215 	stw	zero,200(sp)
    260c:	003a5d06 	br	f84 <__alt_data_end+0xfffe0f84>
    2610:	9080004c 	andi	r2,r18,1
    2614:	0039883a 	mov	fp,zero
    2618:	10000426 	beq	r2,zero,262c <___vfprintf_internal_r+0x1ddc>
    261c:	00800c04 	movi	r2,48
    2620:	dc001dc4 	addi	r16,sp,119
    2624:	d8801dc5 	stb	r2,119(sp)
    2628:	003b8006 	br	142c <__alt_data_end+0xfffe142c>
    262c:	d8002e15 	stw	zero,184(sp)
    2630:	dc001e04 	addi	r16,sp,120
    2634:	003a4d06 	br	f6c <__alt_data_end+0xfffe0f6c>
    2638:	8c7fff84 	addi	r17,r17,-2
    263c:	b5bfffc4 	addi	r22,r22,-1
    2640:	dd802615 	stw	r22,152(sp)
    2644:	dc4022c5 	stb	r17,139(sp)
    2648:	b000bf16 	blt	r22,zero,2948 <___vfprintf_internal_r+0x20f8>
    264c:	00800ac4 	movi	r2,43
    2650:	d8802305 	stb	r2,140(sp)
    2654:	00800244 	movi	r2,9
    2658:	15807016 	blt	r2,r22,281c <___vfprintf_internal_r+0x1fcc>
    265c:	00800c04 	movi	r2,48
    2660:	b5800c04 	addi	r22,r22,48
    2664:	d8802345 	stb	r2,141(sp)
    2668:	dd802385 	stb	r22,142(sp)
    266c:	d88023c4 	addi	r2,sp,143
    2670:	df0022c4 	addi	fp,sp,139
    2674:	d8c03317 	ldw	r3,204(sp)
    2678:	1739c83a 	sub	fp,r2,fp
    267c:	d9003317 	ldw	r4,204(sp)
    2680:	e0c7883a 	add	r3,fp,r3
    2684:	df003a15 	stw	fp,232(sp)
    2688:	d8c02e15 	stw	r3,184(sp)
    268c:	00800044 	movi	r2,1
    2690:	1100b30e 	bge	r2,r4,2960 <___vfprintf_internal_r+0x2110>
    2694:	d8c02e17 	ldw	r3,184(sp)
    2698:	18c00044 	addi	r3,r3,1
    269c:	d8c02e15 	stw	r3,184(sp)
    26a0:	1805883a 	mov	r2,r3
    26a4:	1800ac16 	blt	r3,zero,2958 <___vfprintf_internal_r+0x2108>
    26a8:	d8003215 	stw	zero,200(sp)
    26ac:	003e5d06 	br	2024 <__alt_data_end+0xfffe2024>
    26b0:	d9002c17 	ldw	r4,176(sp)
    26b4:	d9801e04 	addi	r6,sp,120
    26b8:	b80b883a 	mov	r5,r23
    26bc:	0007e4c0 	call	7e4c <__sprint_r>
    26c0:	1039651e 	bne	r2,zero,c58 <__alt_data_end+0xfffe0c58>
    26c4:	dc402617 	ldw	r17,152(sp)
    26c8:	d8c02017 	ldw	r3,128(sp)
    26cc:	d8801f17 	ldw	r2,124(sp)
    26d0:	da000404 	addi	r8,sp,16
    26d4:	003ed606 	br	2230 <__alt_data_end+0xfffe2230>
    26d8:	582b883a 	mov	r21,r11
    26dc:	d8002915 	stw	zero,164(sp)
    26e0:	0038bd06 	br	9d8 <__alt_data_end+0xfffe09d8>
    26e4:	d8802917 	ldw	r2,164(sp)
    26e8:	103e071e 	bne	r2,zero,1f08 <__alt_data_end+0xfffe1f08>
    26ec:	dc002915 	stw	r16,164(sp)
    26f0:	003e0506 	br	1f08 <__alt_data_end+0xfffe1f08>
    26f4:	d9002917 	ldw	r4,164(sp)
    26f8:	20c00044 	addi	r3,r4,1
    26fc:	003e0f06 	br	1f3c <__alt_data_end+0xfffe1f3c>
    2700:	01400184 	movi	r5,6
    2704:	d9402915 	stw	r5,164(sp)
    2708:	003dff06 	br	1f08 <__alt_data_end+0xfffe1f08>
    270c:	d8802104 	addi	r2,sp,132
    2710:	d8800315 	stw	r2,12(sp)
    2714:	d8802504 	addi	r2,sp,148
    2718:	d8800215 	stw	r2,8(sp)
    271c:	d8802604 	addi	r2,sp,152
    2720:	d8800115 	stw	r2,4(sp)
    2724:	d8802917 	ldw	r2,164(sp)
    2728:	d9403617 	ldw	r5,216(sp)
    272c:	d9002c17 	ldw	r4,176(sp)
    2730:	d8800015 	stw	r2,0(sp)
    2734:	01c000c4 	movi	r7,3
    2738:	980d883a 	mov	r6,r19
    273c:	da003d15 	stw	r8,244(sp)
    2740:	0002e740 	call	2e74 <_dtoa_r>
    2744:	d8c02917 	ldw	r3,164(sp)
    2748:	da003d17 	ldw	r8,244(sp)
    274c:	1021883a 	mov	r16,r2
    2750:	10f9883a 	add	fp,r2,r3
    2754:	81000007 	ldb	r4,0(r16)
    2758:	00800c04 	movi	r2,48
    275c:	20805e26 	beq	r4,r2,28d8 <___vfprintf_internal_r+0x2088>
    2760:	d8c02617 	ldw	r3,152(sp)
    2764:	e0f9883a 	add	fp,fp,r3
    2768:	003e0a06 	br	1f94 <__alt_data_end+0xfffe1f94>
    276c:	00c00b44 	movi	r3,45
    2770:	24e0003c 	xorhi	r19,r4,32768
    2774:	d8c02a05 	stb	r3,168(sp)
    2778:	003de906 	br	1f20 <__alt_data_end+0xfffe1f20>
    277c:	d8c03217 	ldw	r3,200(sp)
    2780:	00c07a0e 	bge	zero,r3,296c <___vfprintf_internal_r+0x211c>
    2784:	00800044 	movi	r2,1
    2788:	d9003317 	ldw	r4,204(sp)
    278c:	1105883a 	add	r2,r2,r4
    2790:	d8802e15 	stw	r2,184(sp)
    2794:	10004e16 	blt	r2,zero,28d0 <___vfprintf_internal_r+0x2080>
    2798:	044019c4 	movi	r17,103
    279c:	003e2106 	br	2024 <__alt_data_end+0xfffe2024>
    27a0:	d9002917 	ldw	r4,164(sp)
    27a4:	d8802104 	addi	r2,sp,132
    27a8:	d8800315 	stw	r2,12(sp)
    27ac:	d9000015 	stw	r4,0(sp)
    27b0:	d8802504 	addi	r2,sp,148
    27b4:	d9403617 	ldw	r5,216(sp)
    27b8:	d9002c17 	ldw	r4,176(sp)
    27bc:	d8800215 	stw	r2,8(sp)
    27c0:	d8802604 	addi	r2,sp,152
    27c4:	d8800115 	stw	r2,4(sp)
    27c8:	01c000c4 	movi	r7,3
    27cc:	980d883a 	mov	r6,r19
    27d0:	da003d15 	stw	r8,244(sp)
    27d4:	0002e740 	call	2e74 <_dtoa_r>
    27d8:	d8c02917 	ldw	r3,164(sp)
    27dc:	da003d17 	ldw	r8,244(sp)
    27e0:	1021883a 	mov	r16,r2
    27e4:	00801184 	movi	r2,70
    27e8:	80f9883a 	add	fp,r16,r3
    27ec:	88bfd926 	beq	r17,r2,2754 <__alt_data_end+0xfffe2754>
    27f0:	003de806 	br	1f94 <__alt_data_end+0xfffe1f94>
    27f4:	d9002917 	ldw	r4,164(sp)
    27f8:	00c04d0e 	bge	zero,r3,2930 <___vfprintf_internal_r+0x20e0>
    27fc:	2000441e 	bne	r4,zero,2910 <___vfprintf_internal_r+0x20c0>
    2800:	9480004c 	andi	r18,r18,1
    2804:	9000421e 	bne	r18,zero,2910 <___vfprintf_internal_r+0x20c0>
    2808:	1805883a 	mov	r2,r3
    280c:	18007016 	blt	r3,zero,29d0 <___vfprintf_internal_r+0x2180>
    2810:	d8c03217 	ldw	r3,200(sp)
    2814:	d8c02e15 	stw	r3,184(sp)
    2818:	003e0206 	br	2024 <__alt_data_end+0xfffe2024>
    281c:	df0022c4 	addi	fp,sp,139
    2820:	dc002915 	stw	r16,164(sp)
    2824:	4027883a 	mov	r19,r8
    2828:	e021883a 	mov	r16,fp
    282c:	b009883a 	mov	r4,r22
    2830:	01400284 	movi	r5,10
    2834:	000a8000 	call	a800 <__modsi3>
    2838:	10800c04 	addi	r2,r2,48
    283c:	843fffc4 	addi	r16,r16,-1
    2840:	b009883a 	mov	r4,r22
    2844:	01400284 	movi	r5,10
    2848:	80800005 	stb	r2,0(r16)
    284c:	000a77c0 	call	a77c <__divsi3>
    2850:	102d883a 	mov	r22,r2
    2854:	00800244 	movi	r2,9
    2858:	15bff416 	blt	r2,r22,282c <__alt_data_end+0xfffe282c>
    285c:	9811883a 	mov	r8,r19
    2860:	b0800c04 	addi	r2,r22,48
    2864:	8027883a 	mov	r19,r16
    2868:	997fffc4 	addi	r5,r19,-1
    286c:	98bfffc5 	stb	r2,-1(r19)
    2870:	dc002917 	ldw	r16,164(sp)
    2874:	2f006a2e 	bgeu	r5,fp,2a20 <___vfprintf_internal_r+0x21d0>
    2878:	d9c02384 	addi	r7,sp,142
    287c:	3ccfc83a 	sub	r7,r7,r19
    2880:	d9002344 	addi	r4,sp,141
    2884:	e1cf883a 	add	r7,fp,r7
    2888:	00000106 	br	2890 <___vfprintf_internal_r+0x2040>
    288c:	28800003 	ldbu	r2,0(r5)
    2890:	20800005 	stb	r2,0(r4)
    2894:	21000044 	addi	r4,r4,1
    2898:	29400044 	addi	r5,r5,1
    289c:	393ffb1e 	bne	r7,r4,288c <__alt_data_end+0xfffe288c>
    28a0:	d8802304 	addi	r2,sp,140
    28a4:	14c5c83a 	sub	r2,r2,r19
    28a8:	d8c02344 	addi	r3,sp,141
    28ac:	1885883a 	add	r2,r3,r2
    28b0:	003f7006 	br	2674 <__alt_data_end+0xfffe2674>
    28b4:	0005883a 	mov	r2,zero
    28b8:	003f0f06 	br	24f8 <__alt_data_end+0xfffe24f8>
    28bc:	d8c03217 	ldw	r3,200(sp)
    28c0:	18c00044 	addi	r3,r3,1
    28c4:	d8c02e15 	stw	r3,184(sp)
    28c8:	1805883a 	mov	r2,r3
    28cc:	183fb20e 	bge	r3,zero,2798 <__alt_data_end+0xfffe2798>
    28d0:	0005883a 	mov	r2,zero
    28d4:	003fb006 	br	2798 <__alt_data_end+0xfffe2798>
    28d8:	d9003617 	ldw	r4,216(sp)
    28dc:	000d883a 	mov	r6,zero
    28e0:	000f883a 	mov	r7,zero
    28e4:	980b883a 	mov	r5,r19
    28e8:	d8c03c15 	stw	r3,240(sp)
    28ec:	da003d15 	stw	r8,244(sp)
    28f0:	000bac40 	call	bac4 <__eqdf2>
    28f4:	d8c03c17 	ldw	r3,240(sp)
    28f8:	da003d17 	ldw	r8,244(sp)
    28fc:	103f9826 	beq	r2,zero,2760 <__alt_data_end+0xfffe2760>
    2900:	00800044 	movi	r2,1
    2904:	10c7c83a 	sub	r3,r2,r3
    2908:	d8c02615 	stw	r3,152(sp)
    290c:	003f9506 	br	2764 <__alt_data_end+0xfffe2764>
    2910:	d9002917 	ldw	r4,164(sp)
    2914:	d8c03217 	ldw	r3,200(sp)
    2918:	20800044 	addi	r2,r4,1
    291c:	1885883a 	add	r2,r3,r2
    2920:	d8802e15 	stw	r2,184(sp)
    2924:	103dbf0e 	bge	r2,zero,2024 <__alt_data_end+0xfffe2024>
    2928:	0005883a 	mov	r2,zero
    292c:	003dbd06 	br	2024 <__alt_data_end+0xfffe2024>
    2930:	2000211e 	bne	r4,zero,29b8 <___vfprintf_internal_r+0x2168>
    2934:	9480004c 	andi	r18,r18,1
    2938:	90001f1e 	bne	r18,zero,29b8 <___vfprintf_internal_r+0x2168>
    293c:	00800044 	movi	r2,1
    2940:	d8802e15 	stw	r2,184(sp)
    2944:	003db706 	br	2024 <__alt_data_end+0xfffe2024>
    2948:	00800b44 	movi	r2,45
    294c:	05adc83a 	sub	r22,zero,r22
    2950:	d8802305 	stb	r2,140(sp)
    2954:	003f3f06 	br	2654 <__alt_data_end+0xfffe2654>
    2958:	0005883a 	mov	r2,zero
    295c:	003f5206 	br	26a8 <__alt_data_end+0xfffe26a8>
    2960:	90a4703a 	and	r18,r18,r2
    2964:	903f4e26 	beq	r18,zero,26a0 <__alt_data_end+0xfffe26a0>
    2968:	003f4a06 	br	2694 <__alt_data_end+0xfffe2694>
    296c:	00800084 	movi	r2,2
    2970:	10c5c83a 	sub	r2,r2,r3
    2974:	003f8406 	br	2788 <__alt_data_end+0xfffe2788>
    2978:	d8802d17 	ldw	r2,180(sp)
    297c:	d9002d17 	ldw	r4,180(sp)
    2980:	ac400043 	ldbu	r17,1(r21)
    2984:	10800017 	ldw	r2,0(r2)
    2988:	582b883a 	mov	r21,r11
    298c:	d8802915 	stw	r2,164(sp)
    2990:	20800104 	addi	r2,r4,4
    2994:	d9002917 	ldw	r4,164(sp)
    2998:	d8802d15 	stw	r2,180(sp)
    299c:	203e7a0e 	bge	r4,zero,2388 <__alt_data_end+0xfffe2388>
    29a0:	8c403fcc 	andi	r17,r17,255
    29a4:	00bfffc4 	movi	r2,-1
    29a8:	8c40201c 	xori	r17,r17,128
    29ac:	d8802915 	stw	r2,164(sp)
    29b0:	8c7fe004 	addi	r17,r17,-128
    29b4:	00380706 	br	9d4 <__alt_data_end+0xfffe09d4>
    29b8:	d8c02917 	ldw	r3,164(sp)
    29bc:	18c00084 	addi	r3,r3,2
    29c0:	d8c02e15 	stw	r3,184(sp)
    29c4:	1805883a 	mov	r2,r3
    29c8:	183d960e 	bge	r3,zero,2024 <__alt_data_end+0xfffe2024>
    29cc:	003fd606 	br	2928 <__alt_data_end+0xfffe2928>
    29d0:	0005883a 	mov	r2,zero
    29d4:	003f8e06 	br	2810 <__alt_data_end+0xfffe2810>
    29d8:	9080004c 	andi	r2,r18,1
    29dc:	103f811e 	bne	r2,zero,27e4 <__alt_data_end+0xfffe27e4>
    29e0:	d8802117 	ldw	r2,132(sp)
    29e4:	1405c83a 	sub	r2,r2,r16
    29e8:	d8803315 	stw	r2,204(sp)
    29ec:	b47ef326 	beq	r22,r17,25bc <__alt_data_end+0xfffe25bc>
    29f0:	dd802617 	ldw	r22,152(sp)
    29f4:	003f1106 	br	263c <__alt_data_end+0xfffe263c>
    29f8:	d9c02785 	stb	r7,158(sp)
    29fc:	00390406 	br	e10 <__alt_data_end+0xfffe0e10>
    2a00:	d9c02785 	stb	r7,158(sp)
    2a04:	0038d306 	br	d54 <__alt_data_end+0xfffe0d54>
    2a08:	d9c02785 	stb	r7,158(sp)
    2a0c:	003a6106 	br	1394 <__alt_data_end+0xfffe1394>
    2a10:	d9c02785 	stb	r7,158(sp)
    2a14:	003af806 	br	15f8 <__alt_data_end+0xfffe15f8>
    2a18:	0005883a 	mov	r2,zero
    2a1c:	003d7e06 	br	2018 <__alt_data_end+0xfffe2018>
    2a20:	d8802344 	addi	r2,sp,141
    2a24:	003f1306 	br	2674 <__alt_data_end+0xfffe2674>
    2a28:	d9c02785 	stb	r7,158(sp)
    2a2c:	00392306 	br	ebc <__alt_data_end+0xfffe0ebc>
    2a30:	d9c02785 	stb	r7,158(sp)
    2a34:	003aa906 	br	14dc <__alt_data_end+0xfffe14dc>
    2a38:	d9c02785 	stb	r7,158(sp)
    2a3c:	003a3d06 	br	1334 <__alt_data_end+0xfffe1334>
    2a40:	d9c02785 	stb	r7,158(sp)
    2a44:	003aca06 	br	1570 <__alt_data_end+0xfffe1570>

00002a48 <__vfprintf_internal>:
    2a48:	00800074 	movhi	r2,1
    2a4c:	10856204 	addi	r2,r2,5512
    2a50:	300f883a 	mov	r7,r6
    2a54:	280d883a 	mov	r6,r5
    2a58:	200b883a 	mov	r5,r4
    2a5c:	11000017 	ldw	r4,0(r2)
    2a60:	00008501 	jmpi	850 <___vfprintf_internal_r>

00002a64 <__sbprintf>:
    2a64:	2880030b 	ldhu	r2,12(r5)
    2a68:	2ac01917 	ldw	r11,100(r5)
    2a6c:	2a80038b 	ldhu	r10,14(r5)
    2a70:	2a400717 	ldw	r9,28(r5)
    2a74:	2a000917 	ldw	r8,36(r5)
    2a78:	defee204 	addi	sp,sp,-1144
    2a7c:	00c10004 	movi	r3,1024
    2a80:	dc011a15 	stw	r16,1128(sp)
    2a84:	10bfff4c 	andi	r2,r2,65533
    2a88:	2821883a 	mov	r16,r5
    2a8c:	d8cb883a 	add	r5,sp,r3
    2a90:	dc811c15 	stw	r18,1136(sp)
    2a94:	dc411b15 	stw	r17,1132(sp)
    2a98:	dfc11d15 	stw	ra,1140(sp)
    2a9c:	2025883a 	mov	r18,r4
    2aa0:	d881030d 	sth	r2,1036(sp)
    2aa4:	dac11915 	stw	r11,1124(sp)
    2aa8:	da81038d 	sth	r10,1038(sp)
    2aac:	da410715 	stw	r9,1052(sp)
    2ab0:	da010915 	stw	r8,1060(sp)
    2ab4:	dec10015 	stw	sp,1024(sp)
    2ab8:	dec10415 	stw	sp,1040(sp)
    2abc:	d8c10215 	stw	r3,1032(sp)
    2ac0:	d8c10515 	stw	r3,1044(sp)
    2ac4:	d8010615 	stw	zero,1048(sp)
    2ac8:	00008500 	call	850 <___vfprintf_internal_r>
    2acc:	1023883a 	mov	r17,r2
    2ad0:	10000416 	blt	r2,zero,2ae4 <__sbprintf+0x80>
    2ad4:	d9410004 	addi	r5,sp,1024
    2ad8:	9009883a 	mov	r4,r18
    2adc:	00047180 	call	4718 <_fflush_r>
    2ae0:	10000d1e 	bne	r2,zero,2b18 <__sbprintf+0xb4>
    2ae4:	d881030b 	ldhu	r2,1036(sp)
    2ae8:	1080100c 	andi	r2,r2,64
    2aec:	10000326 	beq	r2,zero,2afc <__sbprintf+0x98>
    2af0:	8080030b 	ldhu	r2,12(r16)
    2af4:	10801014 	ori	r2,r2,64
    2af8:	8080030d 	sth	r2,12(r16)
    2afc:	8805883a 	mov	r2,r17
    2b00:	dfc11d17 	ldw	ra,1140(sp)
    2b04:	dc811c17 	ldw	r18,1136(sp)
    2b08:	dc411b17 	ldw	r17,1132(sp)
    2b0c:	dc011a17 	ldw	r16,1128(sp)
    2b10:	dec11e04 	addi	sp,sp,1144
    2b14:	f800283a 	ret
    2b18:	047fffc4 	movi	r17,-1
    2b1c:	003ff106 	br	2ae4 <__alt_data_end+0xfffe2ae4>

00002b20 <__swsetup_r>:
    2b20:	00800074 	movhi	r2,1
    2b24:	defffd04 	addi	sp,sp,-12
    2b28:	10856204 	addi	r2,r2,5512
    2b2c:	dc400115 	stw	r17,4(sp)
    2b30:	2023883a 	mov	r17,r4
    2b34:	11000017 	ldw	r4,0(r2)
    2b38:	dc000015 	stw	r16,0(sp)
    2b3c:	dfc00215 	stw	ra,8(sp)
    2b40:	2821883a 	mov	r16,r5
    2b44:	20000226 	beq	r4,zero,2b50 <__swsetup_r+0x30>
    2b48:	20800e17 	ldw	r2,56(r4)
    2b4c:	10003126 	beq	r2,zero,2c14 <__swsetup_r+0xf4>
    2b50:	8080030b 	ldhu	r2,12(r16)
    2b54:	10c0020c 	andi	r3,r2,8
    2b58:	1009883a 	mov	r4,r2
    2b5c:	18000f26 	beq	r3,zero,2b9c <__swsetup_r+0x7c>
    2b60:	80c00417 	ldw	r3,16(r16)
    2b64:	18001526 	beq	r3,zero,2bbc <__swsetup_r+0x9c>
    2b68:	1100004c 	andi	r4,r2,1
    2b6c:	20001c1e 	bne	r4,zero,2be0 <__swsetup_r+0xc0>
    2b70:	1080008c 	andi	r2,r2,2
    2b74:	1000291e 	bne	r2,zero,2c1c <__swsetup_r+0xfc>
    2b78:	80800517 	ldw	r2,20(r16)
    2b7c:	80800215 	stw	r2,8(r16)
    2b80:	18001c26 	beq	r3,zero,2bf4 <__swsetup_r+0xd4>
    2b84:	0005883a 	mov	r2,zero
    2b88:	dfc00217 	ldw	ra,8(sp)
    2b8c:	dc400117 	ldw	r17,4(sp)
    2b90:	dc000017 	ldw	r16,0(sp)
    2b94:	dec00304 	addi	sp,sp,12
    2b98:	f800283a 	ret
    2b9c:	2080040c 	andi	r2,r4,16
    2ba0:	10002e26 	beq	r2,zero,2c5c <__swsetup_r+0x13c>
    2ba4:	2080010c 	andi	r2,r4,4
    2ba8:	10001e1e 	bne	r2,zero,2c24 <__swsetup_r+0x104>
    2bac:	80c00417 	ldw	r3,16(r16)
    2bb0:	20800214 	ori	r2,r4,8
    2bb4:	8080030d 	sth	r2,12(r16)
    2bb8:	183feb1e 	bne	r3,zero,2b68 <__alt_data_end+0xfffe2b68>
    2bbc:	1100a00c 	andi	r4,r2,640
    2bc0:	01408004 	movi	r5,512
    2bc4:	217fe826 	beq	r4,r5,2b68 <__alt_data_end+0xfffe2b68>
    2bc8:	800b883a 	mov	r5,r16
    2bcc:	8809883a 	mov	r4,r17
    2bd0:	00056980 	call	5698 <__smakebuf_r>
    2bd4:	8080030b 	ldhu	r2,12(r16)
    2bd8:	80c00417 	ldw	r3,16(r16)
    2bdc:	003fe206 	br	2b68 <__alt_data_end+0xfffe2b68>
    2be0:	80800517 	ldw	r2,20(r16)
    2be4:	80000215 	stw	zero,8(r16)
    2be8:	0085c83a 	sub	r2,zero,r2
    2bec:	80800615 	stw	r2,24(r16)
    2bf0:	183fe41e 	bne	r3,zero,2b84 <__alt_data_end+0xfffe2b84>
    2bf4:	80c0030b 	ldhu	r3,12(r16)
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	1900200c 	andi	r4,r3,128
    2c00:	203fe126 	beq	r4,zero,2b88 <__alt_data_end+0xfffe2b88>
    2c04:	18c01014 	ori	r3,r3,64
    2c08:	80c0030d 	sth	r3,12(r16)
    2c0c:	00bfffc4 	movi	r2,-1
    2c10:	003fdd06 	br	2b88 <__alt_data_end+0xfffe2b88>
    2c14:	0004af40 	call	4af4 <__sinit>
    2c18:	003fcd06 	br	2b50 <__alt_data_end+0xfffe2b50>
    2c1c:	0005883a 	mov	r2,zero
    2c20:	003fd606 	br	2b7c <__alt_data_end+0xfffe2b7c>
    2c24:	81400c17 	ldw	r5,48(r16)
    2c28:	28000626 	beq	r5,zero,2c44 <__swsetup_r+0x124>
    2c2c:	80801004 	addi	r2,r16,64
    2c30:	28800326 	beq	r5,r2,2c40 <__swsetup_r+0x120>
    2c34:	8809883a 	mov	r4,r17
    2c38:	0004c680 	call	4c68 <_free_r>
    2c3c:	8100030b 	ldhu	r4,12(r16)
    2c40:	80000c15 	stw	zero,48(r16)
    2c44:	80c00417 	ldw	r3,16(r16)
    2c48:	00bff6c4 	movi	r2,-37
    2c4c:	1108703a 	and	r4,r2,r4
    2c50:	80000115 	stw	zero,4(r16)
    2c54:	80c00015 	stw	r3,0(r16)
    2c58:	003fd506 	br	2bb0 <__alt_data_end+0xfffe2bb0>
    2c5c:	00800244 	movi	r2,9
    2c60:	88800015 	stw	r2,0(r17)
    2c64:	20801014 	ori	r2,r4,64
    2c68:	8080030d 	sth	r2,12(r16)
    2c6c:	00bfffc4 	movi	r2,-1
    2c70:	003fc506 	br	2b88 <__alt_data_end+0xfffe2b88>

00002c74 <quorem>:
    2c74:	defff704 	addi	sp,sp,-36
    2c78:	dc800215 	stw	r18,8(sp)
    2c7c:	20800417 	ldw	r2,16(r4)
    2c80:	2c800417 	ldw	r18,16(r5)
    2c84:	dfc00815 	stw	ra,32(sp)
    2c88:	ddc00715 	stw	r23,28(sp)
    2c8c:	dd800615 	stw	r22,24(sp)
    2c90:	dd400515 	stw	r21,20(sp)
    2c94:	dd000415 	stw	r20,16(sp)
    2c98:	dcc00315 	stw	r19,12(sp)
    2c9c:	dc400115 	stw	r17,4(sp)
    2ca0:	dc000015 	stw	r16,0(sp)
    2ca4:	14807116 	blt	r2,r18,2e6c <quorem+0x1f8>
    2ca8:	94bfffc4 	addi	r18,r18,-1
    2cac:	94ad883a 	add	r22,r18,r18
    2cb0:	b5ad883a 	add	r22,r22,r22
    2cb4:	2c400504 	addi	r17,r5,20
    2cb8:	8da9883a 	add	r20,r17,r22
    2cbc:	25400504 	addi	r21,r4,20
    2cc0:	282f883a 	mov	r23,r5
    2cc4:	adad883a 	add	r22,r21,r22
    2cc8:	a1400017 	ldw	r5,0(r20)
    2ccc:	2021883a 	mov	r16,r4
    2cd0:	b1000017 	ldw	r4,0(r22)
    2cd4:	29400044 	addi	r5,r5,1
    2cd8:	000a8740 	call	a874 <__udivsi3>
    2cdc:	1027883a 	mov	r19,r2
    2ce0:	10002c26 	beq	r2,zero,2d94 <quorem+0x120>
    2ce4:	a813883a 	mov	r9,r21
    2ce8:	880b883a 	mov	r5,r17
    2cec:	0009883a 	mov	r4,zero
    2cf0:	000d883a 	mov	r6,zero
    2cf4:	2a000017 	ldw	r8,0(r5)
    2cf8:	49c00017 	ldw	r7,0(r9)
    2cfc:	29400104 	addi	r5,r5,4
    2d00:	40bfffcc 	andi	r2,r8,65535
    2d04:	14c5383a 	mul	r2,r2,r19
    2d08:	4010d43a 	srli	r8,r8,16
    2d0c:	38ffffcc 	andi	r3,r7,65535
    2d10:	1105883a 	add	r2,r2,r4
    2d14:	1008d43a 	srli	r4,r2,16
    2d18:	44d1383a 	mul	r8,r8,r19
    2d1c:	198d883a 	add	r6,r3,r6
    2d20:	10ffffcc 	andi	r3,r2,65535
    2d24:	30c7c83a 	sub	r3,r6,r3
    2d28:	380ed43a 	srli	r7,r7,16
    2d2c:	4105883a 	add	r2,r8,r4
    2d30:	180dd43a 	srai	r6,r3,16
    2d34:	113fffcc 	andi	r4,r2,65535
    2d38:	390fc83a 	sub	r7,r7,r4
    2d3c:	398d883a 	add	r6,r7,r6
    2d40:	300e943a 	slli	r7,r6,16
    2d44:	18ffffcc 	andi	r3,r3,65535
    2d48:	1008d43a 	srli	r4,r2,16
    2d4c:	38ceb03a 	or	r7,r7,r3
    2d50:	49c00015 	stw	r7,0(r9)
    2d54:	300dd43a 	srai	r6,r6,16
    2d58:	4a400104 	addi	r9,r9,4
    2d5c:	a17fe52e 	bgeu	r20,r5,2cf4 <__alt_data_end+0xfffe2cf4>
    2d60:	b0800017 	ldw	r2,0(r22)
    2d64:	10000b1e 	bne	r2,zero,2d94 <quorem+0x120>
    2d68:	b0bfff04 	addi	r2,r22,-4
    2d6c:	a880082e 	bgeu	r21,r2,2d90 <quorem+0x11c>
    2d70:	b0ffff17 	ldw	r3,-4(r22)
    2d74:	18000326 	beq	r3,zero,2d84 <quorem+0x110>
    2d78:	00000506 	br	2d90 <quorem+0x11c>
    2d7c:	10c00017 	ldw	r3,0(r2)
    2d80:	1800031e 	bne	r3,zero,2d90 <quorem+0x11c>
    2d84:	10bfff04 	addi	r2,r2,-4
    2d88:	94bfffc4 	addi	r18,r18,-1
    2d8c:	a8bffb36 	bltu	r21,r2,2d7c <__alt_data_end+0xfffe2d7c>
    2d90:	84800415 	stw	r18,16(r16)
    2d94:	b80b883a 	mov	r5,r23
    2d98:	8009883a 	mov	r4,r16
    2d9c:	0006dd80 	call	6dd8 <__mcmp>
    2da0:	10002616 	blt	r2,zero,2e3c <quorem+0x1c8>
    2da4:	9cc00044 	addi	r19,r19,1
    2da8:	a805883a 	mov	r2,r21
    2dac:	000b883a 	mov	r5,zero
    2db0:	11000017 	ldw	r4,0(r2)
    2db4:	89800017 	ldw	r6,0(r17)
    2db8:	10800104 	addi	r2,r2,4
    2dbc:	20ffffcc 	andi	r3,r4,65535
    2dc0:	194b883a 	add	r5,r3,r5
    2dc4:	30ffffcc 	andi	r3,r6,65535
    2dc8:	28c7c83a 	sub	r3,r5,r3
    2dcc:	300cd43a 	srli	r6,r6,16
    2dd0:	2008d43a 	srli	r4,r4,16
    2dd4:	180bd43a 	srai	r5,r3,16
    2dd8:	18ffffcc 	andi	r3,r3,65535
    2ddc:	2189c83a 	sub	r4,r4,r6
    2de0:	2149883a 	add	r4,r4,r5
    2de4:	200c943a 	slli	r6,r4,16
    2de8:	8c400104 	addi	r17,r17,4
    2dec:	200bd43a 	srai	r5,r4,16
    2df0:	30c6b03a 	or	r3,r6,r3
    2df4:	10ffff15 	stw	r3,-4(r2)
    2df8:	a47fed2e 	bgeu	r20,r17,2db0 <__alt_data_end+0xfffe2db0>
    2dfc:	9485883a 	add	r2,r18,r18
    2e00:	1085883a 	add	r2,r2,r2
    2e04:	a887883a 	add	r3,r21,r2
    2e08:	18800017 	ldw	r2,0(r3)
    2e0c:	10000b1e 	bne	r2,zero,2e3c <quorem+0x1c8>
    2e10:	18bfff04 	addi	r2,r3,-4
    2e14:	a880082e 	bgeu	r21,r2,2e38 <quorem+0x1c4>
    2e18:	18ffff17 	ldw	r3,-4(r3)
    2e1c:	18000326 	beq	r3,zero,2e2c <quorem+0x1b8>
    2e20:	00000506 	br	2e38 <quorem+0x1c4>
    2e24:	10c00017 	ldw	r3,0(r2)
    2e28:	1800031e 	bne	r3,zero,2e38 <quorem+0x1c4>
    2e2c:	10bfff04 	addi	r2,r2,-4
    2e30:	94bfffc4 	addi	r18,r18,-1
    2e34:	a8bffb36 	bltu	r21,r2,2e24 <__alt_data_end+0xfffe2e24>
    2e38:	84800415 	stw	r18,16(r16)
    2e3c:	9805883a 	mov	r2,r19
    2e40:	dfc00817 	ldw	ra,32(sp)
    2e44:	ddc00717 	ldw	r23,28(sp)
    2e48:	dd800617 	ldw	r22,24(sp)
    2e4c:	dd400517 	ldw	r21,20(sp)
    2e50:	dd000417 	ldw	r20,16(sp)
    2e54:	dcc00317 	ldw	r19,12(sp)
    2e58:	dc800217 	ldw	r18,8(sp)
    2e5c:	dc400117 	ldw	r17,4(sp)
    2e60:	dc000017 	ldw	r16,0(sp)
    2e64:	dec00904 	addi	sp,sp,36
    2e68:	f800283a 	ret
    2e6c:	0005883a 	mov	r2,zero
    2e70:	003ff306 	br	2e40 <__alt_data_end+0xfffe2e40>

00002e74 <_dtoa_r>:
    2e74:	20801017 	ldw	r2,64(r4)
    2e78:	deffde04 	addi	sp,sp,-136
    2e7c:	df002015 	stw	fp,128(sp)
    2e80:	dcc01b15 	stw	r19,108(sp)
    2e84:	dc801a15 	stw	r18,104(sp)
    2e88:	dc401915 	stw	r17,100(sp)
    2e8c:	dc001815 	stw	r16,96(sp)
    2e90:	dfc02115 	stw	ra,132(sp)
    2e94:	ddc01f15 	stw	r23,124(sp)
    2e98:	dd801e15 	stw	r22,120(sp)
    2e9c:	dd401d15 	stw	r21,116(sp)
    2ea0:	dd001c15 	stw	r20,112(sp)
    2ea4:	d9c00315 	stw	r7,12(sp)
    2ea8:	2039883a 	mov	fp,r4
    2eac:	3023883a 	mov	r17,r6
    2eb0:	2825883a 	mov	r18,r5
    2eb4:	dc002417 	ldw	r16,144(sp)
    2eb8:	3027883a 	mov	r19,r6
    2ebc:	10000826 	beq	r2,zero,2ee0 <_dtoa_r+0x6c>
    2ec0:	21801117 	ldw	r6,68(r4)
    2ec4:	00c00044 	movi	r3,1
    2ec8:	100b883a 	mov	r5,r2
    2ecc:	1986983a 	sll	r3,r3,r6
    2ed0:	11800115 	stw	r6,4(r2)
    2ed4:	10c00215 	stw	r3,8(r2)
    2ed8:	00065b80 	call	65b8 <_Bfree>
    2edc:	e0001015 	stw	zero,64(fp)
    2ee0:	88002e16 	blt	r17,zero,2f9c <_dtoa_r+0x128>
    2ee4:	80000015 	stw	zero,0(r16)
    2ee8:	889ffc2c 	andhi	r2,r17,32752
    2eec:	00dffc34 	movhi	r3,32752
    2ef0:	10c01c26 	beq	r2,r3,2f64 <_dtoa_r+0xf0>
    2ef4:	000d883a 	mov	r6,zero
    2ef8:	000f883a 	mov	r7,zero
    2efc:	9009883a 	mov	r4,r18
    2f00:	980b883a 	mov	r5,r19
    2f04:	000bac40 	call	bac4 <__eqdf2>
    2f08:	10002b1e 	bne	r2,zero,2fb8 <_dtoa_r+0x144>
    2f0c:	d9c02317 	ldw	r7,140(sp)
    2f10:	00800044 	movi	r2,1
    2f14:	38800015 	stw	r2,0(r7)
    2f18:	d8802517 	ldw	r2,148(sp)
    2f1c:	10019e26 	beq	r2,zero,3598 <_dtoa_r+0x724>
    2f20:	d8c02517 	ldw	r3,148(sp)
    2f24:	00800074 	movhi	r2,1
    2f28:	10be0744 	addi	r2,r2,-2019
    2f2c:	18800015 	stw	r2,0(r3)
    2f30:	10bfffc4 	addi	r2,r2,-1
    2f34:	dfc02117 	ldw	ra,132(sp)
    2f38:	df002017 	ldw	fp,128(sp)
    2f3c:	ddc01f17 	ldw	r23,124(sp)
    2f40:	dd801e17 	ldw	r22,120(sp)
    2f44:	dd401d17 	ldw	r21,116(sp)
    2f48:	dd001c17 	ldw	r20,112(sp)
    2f4c:	dcc01b17 	ldw	r19,108(sp)
    2f50:	dc801a17 	ldw	r18,104(sp)
    2f54:	dc401917 	ldw	r17,100(sp)
    2f58:	dc001817 	ldw	r16,96(sp)
    2f5c:	dec02204 	addi	sp,sp,136
    2f60:	f800283a 	ret
    2f64:	d8c02317 	ldw	r3,140(sp)
    2f68:	0089c3c4 	movi	r2,9999
    2f6c:	18800015 	stw	r2,0(r3)
    2f70:	90017726 	beq	r18,zero,3550 <_dtoa_r+0x6dc>
    2f74:	00800074 	movhi	r2,1
    2f78:	10be1304 	addi	r2,r2,-1972
    2f7c:	d9002517 	ldw	r4,148(sp)
    2f80:	203fec26 	beq	r4,zero,2f34 <__alt_data_end+0xfffe2f34>
    2f84:	10c000c7 	ldb	r3,3(r2)
    2f88:	1801781e 	bne	r3,zero,356c <_dtoa_r+0x6f8>
    2f8c:	10c000c4 	addi	r3,r2,3
    2f90:	d9802517 	ldw	r6,148(sp)
    2f94:	30c00015 	stw	r3,0(r6)
    2f98:	003fe606 	br	2f34 <__alt_data_end+0xfffe2f34>
    2f9c:	04e00034 	movhi	r19,32768
    2fa0:	9cffffc4 	addi	r19,r19,-1
    2fa4:	00800044 	movi	r2,1
    2fa8:	8ce6703a 	and	r19,r17,r19
    2fac:	80800015 	stw	r2,0(r16)
    2fb0:	9823883a 	mov	r17,r19
    2fb4:	003fcc06 	br	2ee8 <__alt_data_end+0xfffe2ee8>
    2fb8:	d8800204 	addi	r2,sp,8
    2fbc:	d8800015 	stw	r2,0(sp)
    2fc0:	d9c00104 	addi	r7,sp,4
    2fc4:	900b883a 	mov	r5,r18
    2fc8:	980d883a 	mov	r6,r19
    2fcc:	e009883a 	mov	r4,fp
    2fd0:	8820d53a 	srli	r16,r17,20
    2fd4:	00071a40 	call	71a4 <__d2b>
    2fd8:	d8800915 	stw	r2,36(sp)
    2fdc:	8001651e 	bne	r16,zero,3574 <_dtoa_r+0x700>
    2fe0:	dd800217 	ldw	r22,8(sp)
    2fe4:	dc000117 	ldw	r16,4(sp)
    2fe8:	00800804 	movi	r2,32
    2fec:	b421883a 	add	r16,r22,r16
    2ff0:	80c10c84 	addi	r3,r16,1074
    2ff4:	10c2d10e 	bge	r2,r3,3b3c <_dtoa_r+0xcc8>
    2ff8:	00801004 	movi	r2,64
    2ffc:	81010484 	addi	r4,r16,1042
    3000:	10c7c83a 	sub	r3,r2,r3
    3004:	9108d83a 	srl	r4,r18,r4
    3008:	88e2983a 	sll	r17,r17,r3
    300c:	2448b03a 	or	r4,r4,r17
    3010:	000ce8c0 	call	ce8c <__floatunsidf>
    3014:	017f8434 	movhi	r5,65040
    3018:	01800044 	movi	r6,1
    301c:	1009883a 	mov	r4,r2
    3020:	194b883a 	add	r5,r3,r5
    3024:	843fffc4 	addi	r16,r16,-1
    3028:	d9801115 	stw	r6,68(sp)
    302c:	000d883a 	mov	r6,zero
    3030:	01cffe34 	movhi	r7,16376
    3034:	000c4340 	call	c434 <__subdf3>
    3038:	0198dbf4 	movhi	r6,25455
    303c:	01cff4f4 	movhi	r7,16339
    3040:	3190d844 	addi	r6,r6,17249
    3044:	39e1e9c4 	addi	r7,r7,-30809
    3048:	1009883a 	mov	r4,r2
    304c:	180b883a 	mov	r5,r3
    3050:	000bd1c0 	call	bd1c <__muldf3>
    3054:	01a2d874 	movhi	r6,35681
    3058:	01cff1f4 	movhi	r7,16327
    305c:	31b22cc4 	addi	r6,r6,-14157
    3060:	39e28a04 	addi	r7,r7,-30168
    3064:	180b883a 	mov	r5,r3
    3068:	1009883a 	mov	r4,r2
    306c:	000a9300 	call	a930 <__adddf3>
    3070:	8009883a 	mov	r4,r16
    3074:	1029883a 	mov	r20,r2
    3078:	1823883a 	mov	r17,r3
    307c:	000cdb00 	call	cdb0 <__floatsidf>
    3080:	019427f4 	movhi	r6,20639
    3084:	01cff4f4 	movhi	r7,16339
    3088:	319e7ec4 	addi	r6,r6,31227
    308c:	39d104c4 	addi	r7,r7,17427
    3090:	1009883a 	mov	r4,r2
    3094:	180b883a 	mov	r5,r3
    3098:	000bd1c0 	call	bd1c <__muldf3>
    309c:	100d883a 	mov	r6,r2
    30a0:	180f883a 	mov	r7,r3
    30a4:	a009883a 	mov	r4,r20
    30a8:	880b883a 	mov	r5,r17
    30ac:	000a9300 	call	a930 <__adddf3>
    30b0:	1009883a 	mov	r4,r2
    30b4:	180b883a 	mov	r5,r3
    30b8:	1029883a 	mov	r20,r2
    30bc:	1823883a 	mov	r17,r3
    30c0:	000cd300 	call	cd30 <__fixdfsi>
    30c4:	000d883a 	mov	r6,zero
    30c8:	000f883a 	mov	r7,zero
    30cc:	a009883a 	mov	r4,r20
    30d0:	880b883a 	mov	r5,r17
    30d4:	d8800515 	stw	r2,20(sp)
    30d8:	000bc280 	call	bc28 <__ledf2>
    30dc:	10028716 	blt	r2,zero,3afc <_dtoa_r+0xc88>
    30e0:	d8c00517 	ldw	r3,20(sp)
    30e4:	00800584 	movi	r2,22
    30e8:	10c27536 	bltu	r2,r3,3ac0 <_dtoa_r+0xc4c>
    30ec:	180490fa 	slli	r2,r3,3
    30f0:	00c00074 	movhi	r3,1
    30f4:	18fe2f04 	addi	r3,r3,-1860
    30f8:	1885883a 	add	r2,r3,r2
    30fc:	11000017 	ldw	r4,0(r2)
    3100:	11400117 	ldw	r5,4(r2)
    3104:	900d883a 	mov	r6,r18
    3108:	980f883a 	mov	r7,r19
    310c:	000bb4c0 	call	bb4c <__gedf2>
    3110:	00828d0e 	bge	zero,r2,3b48 <_dtoa_r+0xcd4>
    3114:	d9000517 	ldw	r4,20(sp)
    3118:	d8000e15 	stw	zero,56(sp)
    311c:	213fffc4 	addi	r4,r4,-1
    3120:	d9000515 	stw	r4,20(sp)
    3124:	b42dc83a 	sub	r22,r22,r16
    3128:	b5bfffc4 	addi	r22,r22,-1
    312c:	b0026f16 	blt	r22,zero,3aec <_dtoa_r+0xc78>
    3130:	d8000815 	stw	zero,32(sp)
    3134:	d9c00517 	ldw	r7,20(sp)
    3138:	38026416 	blt	r7,zero,3acc <_dtoa_r+0xc58>
    313c:	b1ed883a 	add	r22,r22,r7
    3140:	d9c00d15 	stw	r7,52(sp)
    3144:	d8000a15 	stw	zero,40(sp)
    3148:	d9800317 	ldw	r6,12(sp)
    314c:	00800244 	movi	r2,9
    3150:	11811436 	bltu	r2,r6,35a4 <_dtoa_r+0x730>
    3154:	00800144 	movi	r2,5
    3158:	1184e10e 	bge	r2,r6,44e0 <_dtoa_r+0x166c>
    315c:	31bfff04 	addi	r6,r6,-4
    3160:	d9800315 	stw	r6,12(sp)
    3164:	0023883a 	mov	r17,zero
    3168:	d9800317 	ldw	r6,12(sp)
    316c:	008000c4 	movi	r2,3
    3170:	30836726 	beq	r6,r2,3f10 <_dtoa_r+0x109c>
    3174:	1183410e 	bge	r2,r6,3e7c <_dtoa_r+0x1008>
    3178:	d9c00317 	ldw	r7,12(sp)
    317c:	00800104 	movi	r2,4
    3180:	38827c26 	beq	r7,r2,3b74 <_dtoa_r+0xd00>
    3184:	00800144 	movi	r2,5
    3188:	3884c41e 	bne	r7,r2,449c <_dtoa_r+0x1628>
    318c:	00800044 	movi	r2,1
    3190:	d8800b15 	stw	r2,44(sp)
    3194:	d8c00517 	ldw	r3,20(sp)
    3198:	d9002217 	ldw	r4,136(sp)
    319c:	1907883a 	add	r3,r3,r4
    31a0:	19800044 	addi	r6,r3,1
    31a4:	d8c00c15 	stw	r3,48(sp)
    31a8:	d9800615 	stw	r6,24(sp)
    31ac:	0183a40e 	bge	zero,r6,4040 <_dtoa_r+0x11cc>
    31b0:	d9800617 	ldw	r6,24(sp)
    31b4:	3021883a 	mov	r16,r6
    31b8:	e0001115 	stw	zero,68(fp)
    31bc:	008005c4 	movi	r2,23
    31c0:	1184c92e 	bgeu	r2,r6,44e8 <_dtoa_r+0x1674>
    31c4:	00c00044 	movi	r3,1
    31c8:	00800104 	movi	r2,4
    31cc:	1085883a 	add	r2,r2,r2
    31d0:	11000504 	addi	r4,r2,20
    31d4:	180b883a 	mov	r5,r3
    31d8:	18c00044 	addi	r3,r3,1
    31dc:	313ffb2e 	bgeu	r6,r4,31cc <__alt_data_end+0xfffe31cc>
    31e0:	e1401115 	stw	r5,68(fp)
    31e4:	e009883a 	mov	r4,fp
    31e8:	00065100 	call	6510 <_Balloc>
    31ec:	d8800715 	stw	r2,28(sp)
    31f0:	e0801015 	stw	r2,64(fp)
    31f4:	00800384 	movi	r2,14
    31f8:	1400f736 	bltu	r2,r16,35d8 <_dtoa_r+0x764>
    31fc:	8800f626 	beq	r17,zero,35d8 <_dtoa_r+0x764>
    3200:	d9c00517 	ldw	r7,20(sp)
    3204:	01c39a0e 	bge	zero,r7,4070 <_dtoa_r+0x11fc>
    3208:	388003cc 	andi	r2,r7,15
    320c:	100490fa 	slli	r2,r2,3
    3210:	382bd13a 	srai	r21,r7,4
    3214:	00c00074 	movhi	r3,1
    3218:	18fe2f04 	addi	r3,r3,-1860
    321c:	1885883a 	add	r2,r3,r2
    3220:	a8c0040c 	andi	r3,r21,16
    3224:	12400017 	ldw	r9,0(r2)
    3228:	12000117 	ldw	r8,4(r2)
    322c:	18037926 	beq	r3,zero,4014 <_dtoa_r+0x11a0>
    3230:	00800074 	movhi	r2,1
    3234:	10be2504 	addi	r2,r2,-1900
    3238:	11800817 	ldw	r6,32(r2)
    323c:	11c00917 	ldw	r7,36(r2)
    3240:	9009883a 	mov	r4,r18
    3244:	980b883a 	mov	r5,r19
    3248:	da001715 	stw	r8,92(sp)
    324c:	da401615 	stw	r9,88(sp)
    3250:	000b1dc0 	call	b1dc <__divdf3>
    3254:	da001717 	ldw	r8,92(sp)
    3258:	da401617 	ldw	r9,88(sp)
    325c:	ad4003cc 	andi	r21,r21,15
    3260:	040000c4 	movi	r16,3
    3264:	1023883a 	mov	r17,r2
    3268:	1829883a 	mov	r20,r3
    326c:	a8001126 	beq	r21,zero,32b4 <_dtoa_r+0x440>
    3270:	05c00074 	movhi	r23,1
    3274:	bdfe2504 	addi	r23,r23,-1900
    3278:	4805883a 	mov	r2,r9
    327c:	4007883a 	mov	r3,r8
    3280:	a980004c 	andi	r6,r21,1
    3284:	1009883a 	mov	r4,r2
    3288:	a82bd07a 	srai	r21,r21,1
    328c:	180b883a 	mov	r5,r3
    3290:	30000426 	beq	r6,zero,32a4 <_dtoa_r+0x430>
    3294:	b9800017 	ldw	r6,0(r23)
    3298:	b9c00117 	ldw	r7,4(r23)
    329c:	84000044 	addi	r16,r16,1
    32a0:	000bd1c0 	call	bd1c <__muldf3>
    32a4:	bdc00204 	addi	r23,r23,8
    32a8:	a83ff51e 	bne	r21,zero,3280 <__alt_data_end+0xfffe3280>
    32ac:	1013883a 	mov	r9,r2
    32b0:	1811883a 	mov	r8,r3
    32b4:	480d883a 	mov	r6,r9
    32b8:	400f883a 	mov	r7,r8
    32bc:	8809883a 	mov	r4,r17
    32c0:	a00b883a 	mov	r5,r20
    32c4:	000b1dc0 	call	b1dc <__divdf3>
    32c8:	d8800f15 	stw	r2,60(sp)
    32cc:	d8c01015 	stw	r3,64(sp)
    32d0:	d8c00e17 	ldw	r3,56(sp)
    32d4:	18000626 	beq	r3,zero,32f0 <_dtoa_r+0x47c>
    32d8:	d9000f17 	ldw	r4,60(sp)
    32dc:	d9401017 	ldw	r5,64(sp)
    32e0:	000d883a 	mov	r6,zero
    32e4:	01cffc34 	movhi	r7,16368
    32e8:	000bc280 	call	bc28 <__ledf2>
    32ec:	10040b16 	blt	r2,zero,431c <_dtoa_r+0x14a8>
    32f0:	8009883a 	mov	r4,r16
    32f4:	000cdb00 	call	cdb0 <__floatsidf>
    32f8:	d9800f17 	ldw	r6,60(sp)
    32fc:	d9c01017 	ldw	r7,64(sp)
    3300:	1009883a 	mov	r4,r2
    3304:	180b883a 	mov	r5,r3
    3308:	000bd1c0 	call	bd1c <__muldf3>
    330c:	000d883a 	mov	r6,zero
    3310:	01d00734 	movhi	r7,16412
    3314:	1009883a 	mov	r4,r2
    3318:	180b883a 	mov	r5,r3
    331c:	000a9300 	call	a930 <__adddf3>
    3320:	1021883a 	mov	r16,r2
    3324:	d8800617 	ldw	r2,24(sp)
    3328:	047f3034 	movhi	r17,64704
    332c:	1c63883a 	add	r17,r3,r17
    3330:	10031826 	beq	r2,zero,3f94 <_dtoa_r+0x1120>
    3334:	d8c00517 	ldw	r3,20(sp)
    3338:	db000617 	ldw	r12,24(sp)
    333c:	d8c01315 	stw	r3,76(sp)
    3340:	d9000b17 	ldw	r4,44(sp)
    3344:	20038f26 	beq	r4,zero,4184 <_dtoa_r+0x1310>
    3348:	60bfffc4 	addi	r2,r12,-1
    334c:	100490fa 	slli	r2,r2,3
    3350:	00c00074 	movhi	r3,1
    3354:	18fe2f04 	addi	r3,r3,-1860
    3358:	1885883a 	add	r2,r3,r2
    335c:	11800017 	ldw	r6,0(r2)
    3360:	11c00117 	ldw	r7,4(r2)
    3364:	d8800717 	ldw	r2,28(sp)
    3368:	0009883a 	mov	r4,zero
    336c:	014ff834 	movhi	r5,16352
    3370:	db001615 	stw	r12,88(sp)
    3374:	15c00044 	addi	r23,r2,1
    3378:	000b1dc0 	call	b1dc <__divdf3>
    337c:	800d883a 	mov	r6,r16
    3380:	880f883a 	mov	r7,r17
    3384:	1009883a 	mov	r4,r2
    3388:	180b883a 	mov	r5,r3
    338c:	000c4340 	call	c434 <__subdf3>
    3390:	d9401017 	ldw	r5,64(sp)
    3394:	d9000f17 	ldw	r4,60(sp)
    3398:	102b883a 	mov	r21,r2
    339c:	d8c01215 	stw	r3,72(sp)
    33a0:	000cd300 	call	cd30 <__fixdfsi>
    33a4:	1009883a 	mov	r4,r2
    33a8:	1029883a 	mov	r20,r2
    33ac:	000cdb00 	call	cdb0 <__floatsidf>
    33b0:	d9000f17 	ldw	r4,60(sp)
    33b4:	d9401017 	ldw	r5,64(sp)
    33b8:	100d883a 	mov	r6,r2
    33bc:	180f883a 	mov	r7,r3
    33c0:	000c4340 	call	c434 <__subdf3>
    33c4:	1823883a 	mov	r17,r3
    33c8:	d8c00717 	ldw	r3,28(sp)
    33cc:	d9401217 	ldw	r5,72(sp)
    33d0:	a2000c04 	addi	r8,r20,48
    33d4:	1021883a 	mov	r16,r2
    33d8:	1a000005 	stb	r8,0(r3)
    33dc:	800d883a 	mov	r6,r16
    33e0:	880f883a 	mov	r7,r17
    33e4:	a809883a 	mov	r4,r21
    33e8:	4029883a 	mov	r20,r8
    33ec:	000bb4c0 	call	bb4c <__gedf2>
    33f0:	00841d16 	blt	zero,r2,4468 <_dtoa_r+0x15f4>
    33f4:	800d883a 	mov	r6,r16
    33f8:	880f883a 	mov	r7,r17
    33fc:	0009883a 	mov	r4,zero
    3400:	014ffc34 	movhi	r5,16368
    3404:	000c4340 	call	c434 <__subdf3>
    3408:	d9401217 	ldw	r5,72(sp)
    340c:	100d883a 	mov	r6,r2
    3410:	180f883a 	mov	r7,r3
    3414:	a809883a 	mov	r4,r21
    3418:	000bb4c0 	call	bb4c <__gedf2>
    341c:	db001617 	ldw	r12,88(sp)
    3420:	00840e16 	blt	zero,r2,445c <_dtoa_r+0x15e8>
    3424:	00800044 	movi	r2,1
    3428:	13006b0e 	bge	r2,r12,35d8 <_dtoa_r+0x764>
    342c:	d9000717 	ldw	r4,28(sp)
    3430:	dd800f15 	stw	r22,60(sp)
    3434:	dcc01015 	stw	r19,64(sp)
    3438:	2319883a 	add	r12,r4,r12
    343c:	dcc01217 	ldw	r19,72(sp)
    3440:	602d883a 	mov	r22,r12
    3444:	dc801215 	stw	r18,72(sp)
    3448:	b825883a 	mov	r18,r23
    344c:	00000906 	br	3474 <_dtoa_r+0x600>
    3450:	000c4340 	call	c434 <__subdf3>
    3454:	a80d883a 	mov	r6,r21
    3458:	980f883a 	mov	r7,r19
    345c:	1009883a 	mov	r4,r2
    3460:	180b883a 	mov	r5,r3
    3464:	000bc280 	call	bc28 <__ledf2>
    3468:	1003e816 	blt	r2,zero,440c <_dtoa_r+0x1598>
    346c:	b825883a 	mov	r18,r23
    3470:	bd83e926 	beq	r23,r22,4418 <_dtoa_r+0x15a4>
    3474:	a809883a 	mov	r4,r21
    3478:	980b883a 	mov	r5,r19
    347c:	000d883a 	mov	r6,zero
    3480:	01d00934 	movhi	r7,16420
    3484:	000bd1c0 	call	bd1c <__muldf3>
    3488:	000d883a 	mov	r6,zero
    348c:	01d00934 	movhi	r7,16420
    3490:	8009883a 	mov	r4,r16
    3494:	880b883a 	mov	r5,r17
    3498:	102b883a 	mov	r21,r2
    349c:	1827883a 	mov	r19,r3
    34a0:	000bd1c0 	call	bd1c <__muldf3>
    34a4:	180b883a 	mov	r5,r3
    34a8:	1009883a 	mov	r4,r2
    34ac:	1821883a 	mov	r16,r3
    34b0:	1023883a 	mov	r17,r2
    34b4:	000cd300 	call	cd30 <__fixdfsi>
    34b8:	1009883a 	mov	r4,r2
    34bc:	1029883a 	mov	r20,r2
    34c0:	000cdb00 	call	cdb0 <__floatsidf>
    34c4:	8809883a 	mov	r4,r17
    34c8:	800b883a 	mov	r5,r16
    34cc:	100d883a 	mov	r6,r2
    34d0:	180f883a 	mov	r7,r3
    34d4:	000c4340 	call	c434 <__subdf3>
    34d8:	a5000c04 	addi	r20,r20,48
    34dc:	a80d883a 	mov	r6,r21
    34e0:	980f883a 	mov	r7,r19
    34e4:	1009883a 	mov	r4,r2
    34e8:	180b883a 	mov	r5,r3
    34ec:	95000005 	stb	r20,0(r18)
    34f0:	1021883a 	mov	r16,r2
    34f4:	1823883a 	mov	r17,r3
    34f8:	000bc280 	call	bc28 <__ledf2>
    34fc:	bdc00044 	addi	r23,r23,1
    3500:	800d883a 	mov	r6,r16
    3504:	880f883a 	mov	r7,r17
    3508:	0009883a 	mov	r4,zero
    350c:	014ffc34 	movhi	r5,16368
    3510:	103fcf0e 	bge	r2,zero,3450 <__alt_data_end+0xfffe3450>
    3514:	d8c01317 	ldw	r3,76(sp)
    3518:	d8c00515 	stw	r3,20(sp)
    351c:	d9400917 	ldw	r5,36(sp)
    3520:	e009883a 	mov	r4,fp
    3524:	00065b80 	call	65b8 <_Bfree>
    3528:	d9000517 	ldw	r4,20(sp)
    352c:	d9802317 	ldw	r6,140(sp)
    3530:	d9c02517 	ldw	r7,148(sp)
    3534:	b8000005 	stb	zero,0(r23)
    3538:	20800044 	addi	r2,r4,1
    353c:	30800015 	stw	r2,0(r6)
    3540:	3802aa26 	beq	r7,zero,3fec <_dtoa_r+0x1178>
    3544:	3dc00015 	stw	r23,0(r7)
    3548:	d8800717 	ldw	r2,28(sp)
    354c:	003e7906 	br	2f34 <__alt_data_end+0xfffe2f34>
    3550:	00800434 	movhi	r2,16
    3554:	10bfffc4 	addi	r2,r2,-1
    3558:	88a2703a 	and	r17,r17,r2
    355c:	883e851e 	bne	r17,zero,2f74 <__alt_data_end+0xfffe2f74>
    3560:	00800074 	movhi	r2,1
    3564:	10be1004 	addi	r2,r2,-1984
    3568:	003e8406 	br	2f7c <__alt_data_end+0xfffe2f7c>
    356c:	10c00204 	addi	r3,r2,8
    3570:	003e8706 	br	2f90 <__alt_data_end+0xfffe2f90>
    3574:	01400434 	movhi	r5,16
    3578:	297fffc4 	addi	r5,r5,-1
    357c:	994a703a 	and	r5,r19,r5
    3580:	9009883a 	mov	r4,r18
    3584:	843f0044 	addi	r16,r16,-1023
    3588:	294ffc34 	orhi	r5,r5,16368
    358c:	dd800217 	ldw	r22,8(sp)
    3590:	d8001115 	stw	zero,68(sp)
    3594:	003ea506 	br	302c <__alt_data_end+0xfffe302c>
    3598:	00800074 	movhi	r2,1
    359c:	10be0704 	addi	r2,r2,-2020
    35a0:	003e6406 	br	2f34 <__alt_data_end+0xfffe2f34>
    35a4:	e0001115 	stw	zero,68(fp)
    35a8:	000b883a 	mov	r5,zero
    35ac:	e009883a 	mov	r4,fp
    35b0:	00065100 	call	6510 <_Balloc>
    35b4:	01bfffc4 	movi	r6,-1
    35b8:	01c00044 	movi	r7,1
    35bc:	d8800715 	stw	r2,28(sp)
    35c0:	d9800c15 	stw	r6,48(sp)
    35c4:	e0801015 	stw	r2,64(fp)
    35c8:	d8000315 	stw	zero,12(sp)
    35cc:	d9c00b15 	stw	r7,44(sp)
    35d0:	d9800615 	stw	r6,24(sp)
    35d4:	d8002215 	stw	zero,136(sp)
    35d8:	d8800117 	ldw	r2,4(sp)
    35dc:	10008916 	blt	r2,zero,3804 <_dtoa_r+0x990>
    35e0:	d9000517 	ldw	r4,20(sp)
    35e4:	00c00384 	movi	r3,14
    35e8:	19008616 	blt	r3,r4,3804 <_dtoa_r+0x990>
    35ec:	200490fa 	slli	r2,r4,3
    35f0:	00c00074 	movhi	r3,1
    35f4:	d9802217 	ldw	r6,136(sp)
    35f8:	18fe2f04 	addi	r3,r3,-1860
    35fc:	1885883a 	add	r2,r3,r2
    3600:	14000017 	ldw	r16,0(r2)
    3604:	14400117 	ldw	r17,4(r2)
    3608:	30016316 	blt	r6,zero,3b98 <_dtoa_r+0xd24>
    360c:	800d883a 	mov	r6,r16
    3610:	880f883a 	mov	r7,r17
    3614:	9009883a 	mov	r4,r18
    3618:	980b883a 	mov	r5,r19
    361c:	000b1dc0 	call	b1dc <__divdf3>
    3620:	180b883a 	mov	r5,r3
    3624:	1009883a 	mov	r4,r2
    3628:	000cd300 	call	cd30 <__fixdfsi>
    362c:	1009883a 	mov	r4,r2
    3630:	102b883a 	mov	r21,r2
    3634:	000cdb00 	call	cdb0 <__floatsidf>
    3638:	800d883a 	mov	r6,r16
    363c:	880f883a 	mov	r7,r17
    3640:	1009883a 	mov	r4,r2
    3644:	180b883a 	mov	r5,r3
    3648:	000bd1c0 	call	bd1c <__muldf3>
    364c:	100d883a 	mov	r6,r2
    3650:	180f883a 	mov	r7,r3
    3654:	9009883a 	mov	r4,r18
    3658:	980b883a 	mov	r5,r19
    365c:	000c4340 	call	c434 <__subdf3>
    3660:	d9c00717 	ldw	r7,28(sp)
    3664:	1009883a 	mov	r4,r2
    3668:	a8800c04 	addi	r2,r21,48
    366c:	38800005 	stb	r2,0(r7)
    3670:	3dc00044 	addi	r23,r7,1
    3674:	d9c00617 	ldw	r7,24(sp)
    3678:	01800044 	movi	r6,1
    367c:	180b883a 	mov	r5,r3
    3680:	2005883a 	mov	r2,r4
    3684:	39803826 	beq	r7,r6,3768 <_dtoa_r+0x8f4>
    3688:	000d883a 	mov	r6,zero
    368c:	01d00934 	movhi	r7,16420
    3690:	000bd1c0 	call	bd1c <__muldf3>
    3694:	000d883a 	mov	r6,zero
    3698:	000f883a 	mov	r7,zero
    369c:	1009883a 	mov	r4,r2
    36a0:	180b883a 	mov	r5,r3
    36a4:	1025883a 	mov	r18,r2
    36a8:	1827883a 	mov	r19,r3
    36ac:	000bac40 	call	bac4 <__eqdf2>
    36b0:	103f9a26 	beq	r2,zero,351c <__alt_data_end+0xfffe351c>
    36b4:	d9c00617 	ldw	r7,24(sp)
    36b8:	d8c00717 	ldw	r3,28(sp)
    36bc:	b829883a 	mov	r20,r23
    36c0:	38bfffc4 	addi	r2,r7,-1
    36c4:	18ad883a 	add	r22,r3,r2
    36c8:	00000a06 	br	36f4 <_dtoa_r+0x880>
    36cc:	000bd1c0 	call	bd1c <__muldf3>
    36d0:	000d883a 	mov	r6,zero
    36d4:	000f883a 	mov	r7,zero
    36d8:	1009883a 	mov	r4,r2
    36dc:	180b883a 	mov	r5,r3
    36e0:	1025883a 	mov	r18,r2
    36e4:	1827883a 	mov	r19,r3
    36e8:	b829883a 	mov	r20,r23
    36ec:	000bac40 	call	bac4 <__eqdf2>
    36f0:	103f8a26 	beq	r2,zero,351c <__alt_data_end+0xfffe351c>
    36f4:	800d883a 	mov	r6,r16
    36f8:	880f883a 	mov	r7,r17
    36fc:	9009883a 	mov	r4,r18
    3700:	980b883a 	mov	r5,r19
    3704:	000b1dc0 	call	b1dc <__divdf3>
    3708:	180b883a 	mov	r5,r3
    370c:	1009883a 	mov	r4,r2
    3710:	000cd300 	call	cd30 <__fixdfsi>
    3714:	1009883a 	mov	r4,r2
    3718:	102b883a 	mov	r21,r2
    371c:	000cdb00 	call	cdb0 <__floatsidf>
    3720:	800d883a 	mov	r6,r16
    3724:	880f883a 	mov	r7,r17
    3728:	1009883a 	mov	r4,r2
    372c:	180b883a 	mov	r5,r3
    3730:	000bd1c0 	call	bd1c <__muldf3>
    3734:	100d883a 	mov	r6,r2
    3738:	180f883a 	mov	r7,r3
    373c:	9009883a 	mov	r4,r18
    3740:	980b883a 	mov	r5,r19
    3744:	000c4340 	call	c434 <__subdf3>
    3748:	aa000c04 	addi	r8,r21,48
    374c:	a2000005 	stb	r8,0(r20)
    3750:	000d883a 	mov	r6,zero
    3754:	01d00934 	movhi	r7,16420
    3758:	1009883a 	mov	r4,r2
    375c:	180b883a 	mov	r5,r3
    3760:	a5c00044 	addi	r23,r20,1
    3764:	b53fd91e 	bne	r22,r20,36cc <__alt_data_end+0xfffe36cc>
    3768:	100d883a 	mov	r6,r2
    376c:	180f883a 	mov	r7,r3
    3770:	1009883a 	mov	r4,r2
    3774:	180b883a 	mov	r5,r3
    3778:	000a9300 	call	a930 <__adddf3>
    377c:	100d883a 	mov	r6,r2
    3780:	180f883a 	mov	r7,r3
    3784:	8009883a 	mov	r4,r16
    3788:	880b883a 	mov	r5,r17
    378c:	1027883a 	mov	r19,r2
    3790:	1825883a 	mov	r18,r3
    3794:	000bc280 	call	bc28 <__ledf2>
    3798:	10000816 	blt	r2,zero,37bc <_dtoa_r+0x948>
    379c:	980d883a 	mov	r6,r19
    37a0:	900f883a 	mov	r7,r18
    37a4:	8009883a 	mov	r4,r16
    37a8:	880b883a 	mov	r5,r17
    37ac:	000bac40 	call	bac4 <__eqdf2>
    37b0:	103f5a1e 	bne	r2,zero,351c <__alt_data_end+0xfffe351c>
    37b4:	ad40004c 	andi	r21,r21,1
    37b8:	a83f5826 	beq	r21,zero,351c <__alt_data_end+0xfffe351c>
    37bc:	bd3fffc3 	ldbu	r20,-1(r23)
    37c0:	b8bfffc4 	addi	r2,r23,-1
    37c4:	1007883a 	mov	r3,r2
    37c8:	01400e44 	movi	r5,57
    37cc:	d9800717 	ldw	r6,28(sp)
    37d0:	00000506 	br	37e8 <_dtoa_r+0x974>
    37d4:	18ffffc4 	addi	r3,r3,-1
    37d8:	11824726 	beq	r2,r6,40f8 <_dtoa_r+0x1284>
    37dc:	1d000003 	ldbu	r20,0(r3)
    37e0:	102f883a 	mov	r23,r2
    37e4:	10bfffc4 	addi	r2,r2,-1
    37e8:	a1003fcc 	andi	r4,r20,255
    37ec:	2100201c 	xori	r4,r4,128
    37f0:	213fe004 	addi	r4,r4,-128
    37f4:	217ff726 	beq	r4,r5,37d4 <__alt_data_end+0xfffe37d4>
    37f8:	a2000044 	addi	r8,r20,1
    37fc:	12000005 	stb	r8,0(r2)
    3800:	003f4606 	br	351c <__alt_data_end+0xfffe351c>
    3804:	d9000b17 	ldw	r4,44(sp)
    3808:	2000c826 	beq	r4,zero,3b2c <_dtoa_r+0xcb8>
    380c:	d9800317 	ldw	r6,12(sp)
    3810:	00c00044 	movi	r3,1
    3814:	1980f90e 	bge	r3,r6,3bfc <_dtoa_r+0xd88>
    3818:	d8800617 	ldw	r2,24(sp)
    381c:	d8c00a17 	ldw	r3,40(sp)
    3820:	157fffc4 	addi	r21,r2,-1
    3824:	1d41f316 	blt	r3,r21,3ff4 <_dtoa_r+0x1180>
    3828:	1d6bc83a 	sub	r21,r3,r21
    382c:	d9c00617 	ldw	r7,24(sp)
    3830:	3802aa16 	blt	r7,zero,42dc <_dtoa_r+0x1468>
    3834:	dd000817 	ldw	r20,32(sp)
    3838:	d8800617 	ldw	r2,24(sp)
    383c:	d8c00817 	ldw	r3,32(sp)
    3840:	01400044 	movi	r5,1
    3844:	e009883a 	mov	r4,fp
    3848:	1887883a 	add	r3,r3,r2
    384c:	d8c00815 	stw	r3,32(sp)
    3850:	b0ad883a 	add	r22,r22,r2
    3854:	000691c0 	call	691c <__i2b>
    3858:	1023883a 	mov	r17,r2
    385c:	a0000826 	beq	r20,zero,3880 <_dtoa_r+0xa0c>
    3860:	0580070e 	bge	zero,r22,3880 <_dtoa_r+0xa0c>
    3864:	a005883a 	mov	r2,r20
    3868:	b500b916 	blt	r22,r20,3b50 <_dtoa_r+0xcdc>
    386c:	d9000817 	ldw	r4,32(sp)
    3870:	a0a9c83a 	sub	r20,r20,r2
    3874:	b0adc83a 	sub	r22,r22,r2
    3878:	2089c83a 	sub	r4,r4,r2
    387c:	d9000815 	stw	r4,32(sp)
    3880:	d9800a17 	ldw	r6,40(sp)
    3884:	0181810e 	bge	zero,r6,3e8c <_dtoa_r+0x1018>
    3888:	d9c00b17 	ldw	r7,44(sp)
    388c:	3800b326 	beq	r7,zero,3b5c <_dtoa_r+0xce8>
    3890:	a800b226 	beq	r21,zero,3b5c <_dtoa_r+0xce8>
    3894:	880b883a 	mov	r5,r17
    3898:	a80d883a 	mov	r6,r21
    389c:	e009883a 	mov	r4,fp
    38a0:	0006b500 	call	6b50 <__pow5mult>
    38a4:	d9800917 	ldw	r6,36(sp)
    38a8:	100b883a 	mov	r5,r2
    38ac:	e009883a 	mov	r4,fp
    38b0:	1023883a 	mov	r17,r2
    38b4:	00069580 	call	6958 <__multiply>
    38b8:	1021883a 	mov	r16,r2
    38bc:	d8800a17 	ldw	r2,40(sp)
    38c0:	d9400917 	ldw	r5,36(sp)
    38c4:	e009883a 	mov	r4,fp
    38c8:	1545c83a 	sub	r2,r2,r21
    38cc:	d8800a15 	stw	r2,40(sp)
    38d0:	00065b80 	call	65b8 <_Bfree>
    38d4:	d8c00a17 	ldw	r3,40(sp)
    38d8:	18009f1e 	bne	r3,zero,3b58 <_dtoa_r+0xce4>
    38dc:	05c00044 	movi	r23,1
    38e0:	e009883a 	mov	r4,fp
    38e4:	b80b883a 	mov	r5,r23
    38e8:	000691c0 	call	691c <__i2b>
    38ec:	d9000d17 	ldw	r4,52(sp)
    38f0:	102b883a 	mov	r21,r2
    38f4:	2000ce26 	beq	r4,zero,3c30 <_dtoa_r+0xdbc>
    38f8:	200d883a 	mov	r6,r4
    38fc:	100b883a 	mov	r5,r2
    3900:	e009883a 	mov	r4,fp
    3904:	0006b500 	call	6b50 <__pow5mult>
    3908:	d9800317 	ldw	r6,12(sp)
    390c:	102b883a 	mov	r21,r2
    3910:	b981810e 	bge	r23,r6,3f18 <_dtoa_r+0x10a4>
    3914:	0027883a 	mov	r19,zero
    3918:	a8800417 	ldw	r2,16(r21)
    391c:	05c00804 	movi	r23,32
    3920:	10800104 	addi	r2,r2,4
    3924:	1085883a 	add	r2,r2,r2
    3928:	1085883a 	add	r2,r2,r2
    392c:	a885883a 	add	r2,r21,r2
    3930:	11000017 	ldw	r4,0(r2)
    3934:	00068040 	call	6804 <__hi0bits>
    3938:	b885c83a 	sub	r2,r23,r2
    393c:	1585883a 	add	r2,r2,r22
    3940:	108007cc 	andi	r2,r2,31
    3944:	1000b326 	beq	r2,zero,3c14 <_dtoa_r+0xda0>
    3948:	00c00804 	movi	r3,32
    394c:	1887c83a 	sub	r3,r3,r2
    3950:	01000104 	movi	r4,4
    3954:	20c2cd0e 	bge	r4,r3,448c <_dtoa_r+0x1618>
    3958:	00c00704 	movi	r3,28
    395c:	1885c83a 	sub	r2,r3,r2
    3960:	d8c00817 	ldw	r3,32(sp)
    3964:	a0a9883a 	add	r20,r20,r2
    3968:	b0ad883a 	add	r22,r22,r2
    396c:	1887883a 	add	r3,r3,r2
    3970:	d8c00815 	stw	r3,32(sp)
    3974:	d9800817 	ldw	r6,32(sp)
    3978:	0180040e 	bge	zero,r6,398c <_dtoa_r+0xb18>
    397c:	800b883a 	mov	r5,r16
    3980:	e009883a 	mov	r4,fp
    3984:	0006c900 	call	6c90 <__lshift>
    3988:	1021883a 	mov	r16,r2
    398c:	0580050e 	bge	zero,r22,39a4 <_dtoa_r+0xb30>
    3990:	a80b883a 	mov	r5,r21
    3994:	b00d883a 	mov	r6,r22
    3998:	e009883a 	mov	r4,fp
    399c:	0006c900 	call	6c90 <__lshift>
    39a0:	102b883a 	mov	r21,r2
    39a4:	d9c00e17 	ldw	r7,56(sp)
    39a8:	3801211e 	bne	r7,zero,3e30 <_dtoa_r+0xfbc>
    39ac:	d9800617 	ldw	r6,24(sp)
    39b0:	0181380e 	bge	zero,r6,3e94 <_dtoa_r+0x1020>
    39b4:	d8c00b17 	ldw	r3,44(sp)
    39b8:	1800ab1e 	bne	r3,zero,3c68 <_dtoa_r+0xdf4>
    39bc:	dc800717 	ldw	r18,28(sp)
    39c0:	dcc00617 	ldw	r19,24(sp)
    39c4:	9029883a 	mov	r20,r18
    39c8:	00000206 	br	39d4 <_dtoa_r+0xb60>
    39cc:	00065e00 	call	65e0 <__multadd>
    39d0:	1021883a 	mov	r16,r2
    39d4:	a80b883a 	mov	r5,r21
    39d8:	8009883a 	mov	r4,r16
    39dc:	0002c740 	call	2c74 <quorem>
    39e0:	10800c04 	addi	r2,r2,48
    39e4:	90800005 	stb	r2,0(r18)
    39e8:	94800044 	addi	r18,r18,1
    39ec:	9507c83a 	sub	r3,r18,r20
    39f0:	000f883a 	mov	r7,zero
    39f4:	01800284 	movi	r6,10
    39f8:	800b883a 	mov	r5,r16
    39fc:	e009883a 	mov	r4,fp
    3a00:	1cfff216 	blt	r3,r19,39cc <__alt_data_end+0xfffe39cc>
    3a04:	1011883a 	mov	r8,r2
    3a08:	d8800617 	ldw	r2,24(sp)
    3a0c:	0082370e 	bge	zero,r2,42ec <_dtoa_r+0x1478>
    3a10:	d9000717 	ldw	r4,28(sp)
    3a14:	0025883a 	mov	r18,zero
    3a18:	20af883a 	add	r23,r4,r2
    3a1c:	01800044 	movi	r6,1
    3a20:	800b883a 	mov	r5,r16
    3a24:	e009883a 	mov	r4,fp
    3a28:	da001715 	stw	r8,92(sp)
    3a2c:	0006c900 	call	6c90 <__lshift>
    3a30:	a80b883a 	mov	r5,r21
    3a34:	1009883a 	mov	r4,r2
    3a38:	d8800915 	stw	r2,36(sp)
    3a3c:	0006dd80 	call	6dd8 <__mcmp>
    3a40:	da001717 	ldw	r8,92(sp)
    3a44:	0081800e 	bge	zero,r2,4048 <_dtoa_r+0x11d4>
    3a48:	b93fffc3 	ldbu	r4,-1(r23)
    3a4c:	b8bfffc4 	addi	r2,r23,-1
    3a50:	1007883a 	mov	r3,r2
    3a54:	01800e44 	movi	r6,57
    3a58:	d9c00717 	ldw	r7,28(sp)
    3a5c:	00000506 	br	3a74 <_dtoa_r+0xc00>
    3a60:	18ffffc4 	addi	r3,r3,-1
    3a64:	11c12326 	beq	r2,r7,3ef4 <_dtoa_r+0x1080>
    3a68:	19000003 	ldbu	r4,0(r3)
    3a6c:	102f883a 	mov	r23,r2
    3a70:	10bfffc4 	addi	r2,r2,-1
    3a74:	21403fcc 	andi	r5,r4,255
    3a78:	2940201c 	xori	r5,r5,128
    3a7c:	297fe004 	addi	r5,r5,-128
    3a80:	29bff726 	beq	r5,r6,3a60 <__alt_data_end+0xfffe3a60>
    3a84:	21000044 	addi	r4,r4,1
    3a88:	11000005 	stb	r4,0(r2)
    3a8c:	a80b883a 	mov	r5,r21
    3a90:	e009883a 	mov	r4,fp
    3a94:	00065b80 	call	65b8 <_Bfree>
    3a98:	883ea026 	beq	r17,zero,351c <__alt_data_end+0xfffe351c>
    3a9c:	90000426 	beq	r18,zero,3ab0 <_dtoa_r+0xc3c>
    3aa0:	94400326 	beq	r18,r17,3ab0 <_dtoa_r+0xc3c>
    3aa4:	900b883a 	mov	r5,r18
    3aa8:	e009883a 	mov	r4,fp
    3aac:	00065b80 	call	65b8 <_Bfree>
    3ab0:	880b883a 	mov	r5,r17
    3ab4:	e009883a 	mov	r4,fp
    3ab8:	00065b80 	call	65b8 <_Bfree>
    3abc:	003e9706 	br	351c <__alt_data_end+0xfffe351c>
    3ac0:	01800044 	movi	r6,1
    3ac4:	d9800e15 	stw	r6,56(sp)
    3ac8:	003d9606 	br	3124 <__alt_data_end+0xfffe3124>
    3acc:	d8800817 	ldw	r2,32(sp)
    3ad0:	d8c00517 	ldw	r3,20(sp)
    3ad4:	d8000d15 	stw	zero,52(sp)
    3ad8:	10c5c83a 	sub	r2,r2,r3
    3adc:	00c9c83a 	sub	r4,zero,r3
    3ae0:	d8800815 	stw	r2,32(sp)
    3ae4:	d9000a15 	stw	r4,40(sp)
    3ae8:	003d9706 	br	3148 <__alt_data_end+0xfffe3148>
    3aec:	05adc83a 	sub	r22,zero,r22
    3af0:	dd800815 	stw	r22,32(sp)
    3af4:	002d883a 	mov	r22,zero
    3af8:	003d8e06 	br	3134 <__alt_data_end+0xfffe3134>
    3afc:	d9000517 	ldw	r4,20(sp)
    3b00:	000cdb00 	call	cdb0 <__floatsidf>
    3b04:	100d883a 	mov	r6,r2
    3b08:	180f883a 	mov	r7,r3
    3b0c:	a009883a 	mov	r4,r20
    3b10:	880b883a 	mov	r5,r17
    3b14:	000bac40 	call	bac4 <__eqdf2>
    3b18:	103d7126 	beq	r2,zero,30e0 <__alt_data_end+0xfffe30e0>
    3b1c:	d9c00517 	ldw	r7,20(sp)
    3b20:	39ffffc4 	addi	r7,r7,-1
    3b24:	d9c00515 	stw	r7,20(sp)
    3b28:	003d6d06 	br	30e0 <__alt_data_end+0xfffe30e0>
    3b2c:	dd400a17 	ldw	r21,40(sp)
    3b30:	dd000817 	ldw	r20,32(sp)
    3b34:	0023883a 	mov	r17,zero
    3b38:	003f4806 	br	385c <__alt_data_end+0xfffe385c>
    3b3c:	10e3c83a 	sub	r17,r2,r3
    3b40:	9448983a 	sll	r4,r18,r17
    3b44:	003d3206 	br	3010 <__alt_data_end+0xfffe3010>
    3b48:	d8000e15 	stw	zero,56(sp)
    3b4c:	003d7506 	br	3124 <__alt_data_end+0xfffe3124>
    3b50:	b005883a 	mov	r2,r22
    3b54:	003f4506 	br	386c <__alt_data_end+0xfffe386c>
    3b58:	dc000915 	stw	r16,36(sp)
    3b5c:	d9800a17 	ldw	r6,40(sp)
    3b60:	d9400917 	ldw	r5,36(sp)
    3b64:	e009883a 	mov	r4,fp
    3b68:	0006b500 	call	6b50 <__pow5mult>
    3b6c:	1021883a 	mov	r16,r2
    3b70:	003f5a06 	br	38dc <__alt_data_end+0xfffe38dc>
    3b74:	01c00044 	movi	r7,1
    3b78:	d9c00b15 	stw	r7,44(sp)
    3b7c:	d8802217 	ldw	r2,136(sp)
    3b80:	0081280e 	bge	zero,r2,4024 <_dtoa_r+0x11b0>
    3b84:	100d883a 	mov	r6,r2
    3b88:	1021883a 	mov	r16,r2
    3b8c:	d8800c15 	stw	r2,48(sp)
    3b90:	d8800615 	stw	r2,24(sp)
    3b94:	003d8806 	br	31b8 <__alt_data_end+0xfffe31b8>
    3b98:	d8800617 	ldw	r2,24(sp)
    3b9c:	00be9b16 	blt	zero,r2,360c <__alt_data_end+0xfffe360c>
    3ba0:	10010f1e 	bne	r2,zero,3fe0 <_dtoa_r+0x116c>
    3ba4:	880b883a 	mov	r5,r17
    3ba8:	000d883a 	mov	r6,zero
    3bac:	01d00534 	movhi	r7,16404
    3bb0:	8009883a 	mov	r4,r16
    3bb4:	000bd1c0 	call	bd1c <__muldf3>
    3bb8:	900d883a 	mov	r6,r18
    3bbc:	980f883a 	mov	r7,r19
    3bc0:	1009883a 	mov	r4,r2
    3bc4:	180b883a 	mov	r5,r3
    3bc8:	000bb4c0 	call	bb4c <__gedf2>
    3bcc:	002b883a 	mov	r21,zero
    3bd0:	0023883a 	mov	r17,zero
    3bd4:	1000bf16 	blt	r2,zero,3ed4 <_dtoa_r+0x1060>
    3bd8:	d9802217 	ldw	r6,136(sp)
    3bdc:	ddc00717 	ldw	r23,28(sp)
    3be0:	018c303a 	nor	r6,zero,r6
    3be4:	d9800515 	stw	r6,20(sp)
    3be8:	a80b883a 	mov	r5,r21
    3bec:	e009883a 	mov	r4,fp
    3bf0:	00065b80 	call	65b8 <_Bfree>
    3bf4:	883e4926 	beq	r17,zero,351c <__alt_data_end+0xfffe351c>
    3bf8:	003fad06 	br	3ab0 <__alt_data_end+0xfffe3ab0>
    3bfc:	d9c01117 	ldw	r7,68(sp)
    3c00:	3801bc26 	beq	r7,zero,42f4 <_dtoa_r+0x1480>
    3c04:	10810cc4 	addi	r2,r2,1075
    3c08:	dd400a17 	ldw	r21,40(sp)
    3c0c:	dd000817 	ldw	r20,32(sp)
    3c10:	003f0a06 	br	383c <__alt_data_end+0xfffe383c>
    3c14:	00800704 	movi	r2,28
    3c18:	d9000817 	ldw	r4,32(sp)
    3c1c:	a0a9883a 	add	r20,r20,r2
    3c20:	b0ad883a 	add	r22,r22,r2
    3c24:	2089883a 	add	r4,r4,r2
    3c28:	d9000815 	stw	r4,32(sp)
    3c2c:	003f5106 	br	3974 <__alt_data_end+0xfffe3974>
    3c30:	d8c00317 	ldw	r3,12(sp)
    3c34:	b8c1fc0e 	bge	r23,r3,4428 <_dtoa_r+0x15b4>
    3c38:	0027883a 	mov	r19,zero
    3c3c:	b805883a 	mov	r2,r23
    3c40:	003f3e06 	br	393c <__alt_data_end+0xfffe393c>
    3c44:	880b883a 	mov	r5,r17
    3c48:	e009883a 	mov	r4,fp
    3c4c:	000f883a 	mov	r7,zero
    3c50:	01800284 	movi	r6,10
    3c54:	00065e00 	call	65e0 <__multadd>
    3c58:	d9000c17 	ldw	r4,48(sp)
    3c5c:	1023883a 	mov	r17,r2
    3c60:	0102040e 	bge	zero,r4,4474 <_dtoa_r+0x1600>
    3c64:	d9000615 	stw	r4,24(sp)
    3c68:	0500050e 	bge	zero,r20,3c80 <_dtoa_r+0xe0c>
    3c6c:	880b883a 	mov	r5,r17
    3c70:	a00d883a 	mov	r6,r20
    3c74:	e009883a 	mov	r4,fp
    3c78:	0006c900 	call	6c90 <__lshift>
    3c7c:	1023883a 	mov	r17,r2
    3c80:	9801241e 	bne	r19,zero,4114 <_dtoa_r+0x12a0>
    3c84:	8829883a 	mov	r20,r17
    3c88:	d9000617 	ldw	r4,24(sp)
    3c8c:	dcc00717 	ldw	r19,28(sp)
    3c90:	9480004c 	andi	r18,r18,1
    3c94:	20bfffc4 	addi	r2,r4,-1
    3c98:	9885883a 	add	r2,r19,r2
    3c9c:	d8800415 	stw	r2,16(sp)
    3ca0:	dc800615 	stw	r18,24(sp)
    3ca4:	a80b883a 	mov	r5,r21
    3ca8:	8009883a 	mov	r4,r16
    3cac:	0002c740 	call	2c74 <quorem>
    3cb0:	880b883a 	mov	r5,r17
    3cb4:	8009883a 	mov	r4,r16
    3cb8:	102f883a 	mov	r23,r2
    3cbc:	0006dd80 	call	6dd8 <__mcmp>
    3cc0:	a80b883a 	mov	r5,r21
    3cc4:	a00d883a 	mov	r6,r20
    3cc8:	e009883a 	mov	r4,fp
    3ccc:	102d883a 	mov	r22,r2
    3cd0:	0006e380 	call	6e38 <__mdiff>
    3cd4:	1007883a 	mov	r3,r2
    3cd8:	10800317 	ldw	r2,12(r2)
    3cdc:	bc800c04 	addi	r18,r23,48
    3ce0:	180b883a 	mov	r5,r3
    3ce4:	10004e1e 	bne	r2,zero,3e20 <_dtoa_r+0xfac>
    3ce8:	8009883a 	mov	r4,r16
    3cec:	d8c01615 	stw	r3,88(sp)
    3cf0:	0006dd80 	call	6dd8 <__mcmp>
    3cf4:	d8c01617 	ldw	r3,88(sp)
    3cf8:	e009883a 	mov	r4,fp
    3cfc:	d8801615 	stw	r2,88(sp)
    3d00:	180b883a 	mov	r5,r3
    3d04:	00065b80 	call	65b8 <_Bfree>
    3d08:	d8801617 	ldw	r2,88(sp)
    3d0c:	1000041e 	bne	r2,zero,3d20 <_dtoa_r+0xeac>
    3d10:	d9800317 	ldw	r6,12(sp)
    3d14:	3000021e 	bne	r6,zero,3d20 <_dtoa_r+0xeac>
    3d18:	d8c00617 	ldw	r3,24(sp)
    3d1c:	18003726 	beq	r3,zero,3dfc <_dtoa_r+0xf88>
    3d20:	b0002016 	blt	r22,zero,3da4 <_dtoa_r+0xf30>
    3d24:	b000041e 	bne	r22,zero,3d38 <_dtoa_r+0xec4>
    3d28:	d9000317 	ldw	r4,12(sp)
    3d2c:	2000021e 	bne	r4,zero,3d38 <_dtoa_r+0xec4>
    3d30:	d8c00617 	ldw	r3,24(sp)
    3d34:	18001b26 	beq	r3,zero,3da4 <_dtoa_r+0xf30>
    3d38:	00810716 	blt	zero,r2,4158 <_dtoa_r+0x12e4>
    3d3c:	d8c00417 	ldw	r3,16(sp)
    3d40:	9d800044 	addi	r22,r19,1
    3d44:	9c800005 	stb	r18,0(r19)
    3d48:	b02f883a 	mov	r23,r22
    3d4c:	98c10626 	beq	r19,r3,4168 <_dtoa_r+0x12f4>
    3d50:	800b883a 	mov	r5,r16
    3d54:	000f883a 	mov	r7,zero
    3d58:	01800284 	movi	r6,10
    3d5c:	e009883a 	mov	r4,fp
    3d60:	00065e00 	call	65e0 <__multadd>
    3d64:	1021883a 	mov	r16,r2
    3d68:	000f883a 	mov	r7,zero
    3d6c:	01800284 	movi	r6,10
    3d70:	880b883a 	mov	r5,r17
    3d74:	e009883a 	mov	r4,fp
    3d78:	8d002526 	beq	r17,r20,3e10 <_dtoa_r+0xf9c>
    3d7c:	00065e00 	call	65e0 <__multadd>
    3d80:	a00b883a 	mov	r5,r20
    3d84:	000f883a 	mov	r7,zero
    3d88:	01800284 	movi	r6,10
    3d8c:	e009883a 	mov	r4,fp
    3d90:	1023883a 	mov	r17,r2
    3d94:	00065e00 	call	65e0 <__multadd>
    3d98:	1029883a 	mov	r20,r2
    3d9c:	b027883a 	mov	r19,r22
    3da0:	003fc006 	br	3ca4 <__alt_data_end+0xfffe3ca4>
    3da4:	9011883a 	mov	r8,r18
    3da8:	00800e0e 	bge	zero,r2,3de4 <_dtoa_r+0xf70>
    3dac:	800b883a 	mov	r5,r16
    3db0:	01800044 	movi	r6,1
    3db4:	e009883a 	mov	r4,fp
    3db8:	da001715 	stw	r8,92(sp)
    3dbc:	0006c900 	call	6c90 <__lshift>
    3dc0:	a80b883a 	mov	r5,r21
    3dc4:	1009883a 	mov	r4,r2
    3dc8:	1021883a 	mov	r16,r2
    3dcc:	0006dd80 	call	6dd8 <__mcmp>
    3dd0:	da001717 	ldw	r8,92(sp)
    3dd4:	0081960e 	bge	zero,r2,4430 <_dtoa_r+0x15bc>
    3dd8:	00800e44 	movi	r2,57
    3ddc:	40817026 	beq	r8,r2,43a0 <_dtoa_r+0x152c>
    3de0:	ba000c44 	addi	r8,r23,49
    3de4:	8825883a 	mov	r18,r17
    3de8:	9dc00044 	addi	r23,r19,1
    3dec:	9a000005 	stb	r8,0(r19)
    3df0:	a023883a 	mov	r17,r20
    3df4:	dc000915 	stw	r16,36(sp)
    3df8:	003f2406 	br	3a8c <__alt_data_end+0xfffe3a8c>
    3dfc:	00800e44 	movi	r2,57
    3e00:	9011883a 	mov	r8,r18
    3e04:	90816626 	beq	r18,r2,43a0 <_dtoa_r+0x152c>
    3e08:	05bff516 	blt	zero,r22,3de0 <__alt_data_end+0xfffe3de0>
    3e0c:	003ff506 	br	3de4 <__alt_data_end+0xfffe3de4>
    3e10:	00065e00 	call	65e0 <__multadd>
    3e14:	1023883a 	mov	r17,r2
    3e18:	1029883a 	mov	r20,r2
    3e1c:	003fdf06 	br	3d9c <__alt_data_end+0xfffe3d9c>
    3e20:	e009883a 	mov	r4,fp
    3e24:	00065b80 	call	65b8 <_Bfree>
    3e28:	00800044 	movi	r2,1
    3e2c:	003fbc06 	br	3d20 <__alt_data_end+0xfffe3d20>
    3e30:	a80b883a 	mov	r5,r21
    3e34:	8009883a 	mov	r4,r16
    3e38:	0006dd80 	call	6dd8 <__mcmp>
    3e3c:	103edb0e 	bge	r2,zero,39ac <__alt_data_end+0xfffe39ac>
    3e40:	800b883a 	mov	r5,r16
    3e44:	000f883a 	mov	r7,zero
    3e48:	01800284 	movi	r6,10
    3e4c:	e009883a 	mov	r4,fp
    3e50:	00065e00 	call	65e0 <__multadd>
    3e54:	1021883a 	mov	r16,r2
    3e58:	d8800517 	ldw	r2,20(sp)
    3e5c:	d8c00b17 	ldw	r3,44(sp)
    3e60:	10bfffc4 	addi	r2,r2,-1
    3e64:	d8800515 	stw	r2,20(sp)
    3e68:	183f761e 	bne	r3,zero,3c44 <__alt_data_end+0xfffe3c44>
    3e6c:	d9000c17 	ldw	r4,48(sp)
    3e70:	0101730e 	bge	zero,r4,4440 <_dtoa_r+0x15cc>
    3e74:	d9000615 	stw	r4,24(sp)
    3e78:	003ed006 	br	39bc <__alt_data_end+0xfffe39bc>
    3e7c:	00800084 	movi	r2,2
    3e80:	3081861e 	bne	r6,r2,449c <_dtoa_r+0x1628>
    3e84:	d8000b15 	stw	zero,44(sp)
    3e88:	003f3c06 	br	3b7c <__alt_data_end+0xfffe3b7c>
    3e8c:	dc000917 	ldw	r16,36(sp)
    3e90:	003e9206 	br	38dc <__alt_data_end+0xfffe38dc>
    3e94:	d9c00317 	ldw	r7,12(sp)
    3e98:	00800084 	movi	r2,2
    3e9c:	11fec50e 	bge	r2,r7,39b4 <__alt_data_end+0xfffe39b4>
    3ea0:	d9000617 	ldw	r4,24(sp)
    3ea4:	20013c1e 	bne	r4,zero,4398 <_dtoa_r+0x1524>
    3ea8:	a80b883a 	mov	r5,r21
    3eac:	000f883a 	mov	r7,zero
    3eb0:	01800144 	movi	r6,5
    3eb4:	e009883a 	mov	r4,fp
    3eb8:	00065e00 	call	65e0 <__multadd>
    3ebc:	100b883a 	mov	r5,r2
    3ec0:	8009883a 	mov	r4,r16
    3ec4:	102b883a 	mov	r21,r2
    3ec8:	0006dd80 	call	6dd8 <__mcmp>
    3ecc:	dc000915 	stw	r16,36(sp)
    3ed0:	00bf410e 	bge	zero,r2,3bd8 <__alt_data_end+0xfffe3bd8>
    3ed4:	d9c00717 	ldw	r7,28(sp)
    3ed8:	00800c44 	movi	r2,49
    3edc:	38800005 	stb	r2,0(r7)
    3ee0:	d8800517 	ldw	r2,20(sp)
    3ee4:	3dc00044 	addi	r23,r7,1
    3ee8:	10800044 	addi	r2,r2,1
    3eec:	d8800515 	stw	r2,20(sp)
    3ef0:	003f3d06 	br	3be8 <__alt_data_end+0xfffe3be8>
    3ef4:	d9800517 	ldw	r6,20(sp)
    3ef8:	d9c00717 	ldw	r7,28(sp)
    3efc:	00800c44 	movi	r2,49
    3f00:	31800044 	addi	r6,r6,1
    3f04:	d9800515 	stw	r6,20(sp)
    3f08:	38800005 	stb	r2,0(r7)
    3f0c:	003edf06 	br	3a8c <__alt_data_end+0xfffe3a8c>
    3f10:	d8000b15 	stw	zero,44(sp)
    3f14:	003c9f06 	br	3194 <__alt_data_end+0xfffe3194>
    3f18:	903e7e1e 	bne	r18,zero,3914 <__alt_data_end+0xfffe3914>
    3f1c:	00800434 	movhi	r2,16
    3f20:	10bfffc4 	addi	r2,r2,-1
    3f24:	9884703a 	and	r2,r19,r2
    3f28:	1000ea1e 	bne	r2,zero,42d4 <_dtoa_r+0x1460>
    3f2c:	9cdffc2c 	andhi	r19,r19,32752
    3f30:	9800e826 	beq	r19,zero,42d4 <_dtoa_r+0x1460>
    3f34:	d9c00817 	ldw	r7,32(sp)
    3f38:	b5800044 	addi	r22,r22,1
    3f3c:	04c00044 	movi	r19,1
    3f40:	39c00044 	addi	r7,r7,1
    3f44:	d9c00815 	stw	r7,32(sp)
    3f48:	d8800d17 	ldw	r2,52(sp)
    3f4c:	103e721e 	bne	r2,zero,3918 <__alt_data_end+0xfffe3918>
    3f50:	00800044 	movi	r2,1
    3f54:	003e7906 	br	393c <__alt_data_end+0xfffe393c>
    3f58:	8009883a 	mov	r4,r16
    3f5c:	000cdb00 	call	cdb0 <__floatsidf>
    3f60:	d9800f17 	ldw	r6,60(sp)
    3f64:	d9c01017 	ldw	r7,64(sp)
    3f68:	1009883a 	mov	r4,r2
    3f6c:	180b883a 	mov	r5,r3
    3f70:	000bd1c0 	call	bd1c <__muldf3>
    3f74:	000d883a 	mov	r6,zero
    3f78:	01d00734 	movhi	r7,16412
    3f7c:	1009883a 	mov	r4,r2
    3f80:	180b883a 	mov	r5,r3
    3f84:	000a9300 	call	a930 <__adddf3>
    3f88:	047f3034 	movhi	r17,64704
    3f8c:	1021883a 	mov	r16,r2
    3f90:	1c63883a 	add	r17,r3,r17
    3f94:	d9000f17 	ldw	r4,60(sp)
    3f98:	d9401017 	ldw	r5,64(sp)
    3f9c:	000d883a 	mov	r6,zero
    3fa0:	01d00534 	movhi	r7,16404
    3fa4:	000c4340 	call	c434 <__subdf3>
    3fa8:	800d883a 	mov	r6,r16
    3fac:	880f883a 	mov	r7,r17
    3fb0:	1009883a 	mov	r4,r2
    3fb4:	180b883a 	mov	r5,r3
    3fb8:	102b883a 	mov	r21,r2
    3fbc:	1829883a 	mov	r20,r3
    3fc0:	000bb4c0 	call	bb4c <__gedf2>
    3fc4:	00806c16 	blt	zero,r2,4178 <_dtoa_r+0x1304>
    3fc8:	89e0003c 	xorhi	r7,r17,32768
    3fcc:	800d883a 	mov	r6,r16
    3fd0:	a809883a 	mov	r4,r21
    3fd4:	a00b883a 	mov	r5,r20
    3fd8:	000bc280 	call	bc28 <__ledf2>
    3fdc:	103d7e0e 	bge	r2,zero,35d8 <__alt_data_end+0xfffe35d8>
    3fe0:	002b883a 	mov	r21,zero
    3fe4:	0023883a 	mov	r17,zero
    3fe8:	003efb06 	br	3bd8 <__alt_data_end+0xfffe3bd8>
    3fec:	d8800717 	ldw	r2,28(sp)
    3ff0:	003bd006 	br	2f34 <__alt_data_end+0xfffe2f34>
    3ff4:	d9000a17 	ldw	r4,40(sp)
    3ff8:	d9800d17 	ldw	r6,52(sp)
    3ffc:	dd400a15 	stw	r21,40(sp)
    4000:	a905c83a 	sub	r2,r21,r4
    4004:	308d883a 	add	r6,r6,r2
    4008:	d9800d15 	stw	r6,52(sp)
    400c:	002b883a 	mov	r21,zero
    4010:	003e0606 	br	382c <__alt_data_end+0xfffe382c>
    4014:	9023883a 	mov	r17,r18
    4018:	9829883a 	mov	r20,r19
    401c:	04000084 	movi	r16,2
    4020:	003c9206 	br	326c <__alt_data_end+0xfffe326c>
    4024:	04000044 	movi	r16,1
    4028:	dc000c15 	stw	r16,48(sp)
    402c:	dc000615 	stw	r16,24(sp)
    4030:	dc002215 	stw	r16,136(sp)
    4034:	e0001115 	stw	zero,68(fp)
    4038:	000b883a 	mov	r5,zero
    403c:	003c6906 	br	31e4 <__alt_data_end+0xfffe31e4>
    4040:	3021883a 	mov	r16,r6
    4044:	003ffb06 	br	4034 <__alt_data_end+0xfffe4034>
    4048:	1000021e 	bne	r2,zero,4054 <_dtoa_r+0x11e0>
    404c:	4200004c 	andi	r8,r8,1
    4050:	403e7d1e 	bne	r8,zero,3a48 <__alt_data_end+0xfffe3a48>
    4054:	01000c04 	movi	r4,48
    4058:	00000106 	br	4060 <_dtoa_r+0x11ec>
    405c:	102f883a 	mov	r23,r2
    4060:	b8bfffc4 	addi	r2,r23,-1
    4064:	10c00007 	ldb	r3,0(r2)
    4068:	193ffc26 	beq	r3,r4,405c <__alt_data_end+0xfffe405c>
    406c:	003e8706 	br	3a8c <__alt_data_end+0xfffe3a8c>
    4070:	d8800517 	ldw	r2,20(sp)
    4074:	00a3c83a 	sub	r17,zero,r2
    4078:	8800a426 	beq	r17,zero,430c <_dtoa_r+0x1498>
    407c:	888003cc 	andi	r2,r17,15
    4080:	100490fa 	slli	r2,r2,3
    4084:	00c00074 	movhi	r3,1
    4088:	18fe2f04 	addi	r3,r3,-1860
    408c:	1885883a 	add	r2,r3,r2
    4090:	11800017 	ldw	r6,0(r2)
    4094:	11c00117 	ldw	r7,4(r2)
    4098:	9009883a 	mov	r4,r18
    409c:	980b883a 	mov	r5,r19
    40a0:	8823d13a 	srai	r17,r17,4
    40a4:	000bd1c0 	call	bd1c <__muldf3>
    40a8:	d8800f15 	stw	r2,60(sp)
    40ac:	d8c01015 	stw	r3,64(sp)
    40b0:	8800e826 	beq	r17,zero,4454 <_dtoa_r+0x15e0>
    40b4:	05000074 	movhi	r20,1
    40b8:	a53e2504 	addi	r20,r20,-1900
    40bc:	04000084 	movi	r16,2
    40c0:	8980004c 	andi	r6,r17,1
    40c4:	1009883a 	mov	r4,r2
    40c8:	8823d07a 	srai	r17,r17,1
    40cc:	180b883a 	mov	r5,r3
    40d0:	30000426 	beq	r6,zero,40e4 <_dtoa_r+0x1270>
    40d4:	a1800017 	ldw	r6,0(r20)
    40d8:	a1c00117 	ldw	r7,4(r20)
    40dc:	84000044 	addi	r16,r16,1
    40e0:	000bd1c0 	call	bd1c <__muldf3>
    40e4:	a5000204 	addi	r20,r20,8
    40e8:	883ff51e 	bne	r17,zero,40c0 <__alt_data_end+0xfffe40c0>
    40ec:	d8800f15 	stw	r2,60(sp)
    40f0:	d8c01015 	stw	r3,64(sp)
    40f4:	003c7606 	br	32d0 <__alt_data_end+0xfffe32d0>
    40f8:	00c00c04 	movi	r3,48
    40fc:	10c00005 	stb	r3,0(r2)
    4100:	d8c00517 	ldw	r3,20(sp)
    4104:	bd3fffc3 	ldbu	r20,-1(r23)
    4108:	18c00044 	addi	r3,r3,1
    410c:	d8c00515 	stw	r3,20(sp)
    4110:	003db906 	br	37f8 <__alt_data_end+0xfffe37f8>
    4114:	89400117 	ldw	r5,4(r17)
    4118:	e009883a 	mov	r4,fp
    411c:	00065100 	call	6510 <_Balloc>
    4120:	89800417 	ldw	r6,16(r17)
    4124:	89400304 	addi	r5,r17,12
    4128:	11000304 	addi	r4,r2,12
    412c:	31800084 	addi	r6,r6,2
    4130:	318d883a 	add	r6,r6,r6
    4134:	318d883a 	add	r6,r6,r6
    4138:	1027883a 	mov	r19,r2
    413c:	00061440 	call	6144 <memcpy>
    4140:	01800044 	movi	r6,1
    4144:	980b883a 	mov	r5,r19
    4148:	e009883a 	mov	r4,fp
    414c:	0006c900 	call	6c90 <__lshift>
    4150:	1029883a 	mov	r20,r2
    4154:	003ecc06 	br	3c88 <__alt_data_end+0xfffe3c88>
    4158:	00800e44 	movi	r2,57
    415c:	90809026 	beq	r18,r2,43a0 <_dtoa_r+0x152c>
    4160:	92000044 	addi	r8,r18,1
    4164:	003f1f06 	br	3de4 <__alt_data_end+0xfffe3de4>
    4168:	9011883a 	mov	r8,r18
    416c:	8825883a 	mov	r18,r17
    4170:	a023883a 	mov	r17,r20
    4174:	003e2906 	br	3a1c <__alt_data_end+0xfffe3a1c>
    4178:	002b883a 	mov	r21,zero
    417c:	0023883a 	mov	r17,zero
    4180:	003f5406 	br	3ed4 <__alt_data_end+0xfffe3ed4>
    4184:	61bfffc4 	addi	r6,r12,-1
    4188:	300490fa 	slli	r2,r6,3
    418c:	00c00074 	movhi	r3,1
    4190:	18fe2f04 	addi	r3,r3,-1860
    4194:	1885883a 	add	r2,r3,r2
    4198:	11000017 	ldw	r4,0(r2)
    419c:	11400117 	ldw	r5,4(r2)
    41a0:	d8800717 	ldw	r2,28(sp)
    41a4:	880f883a 	mov	r7,r17
    41a8:	d9801215 	stw	r6,72(sp)
    41ac:	800d883a 	mov	r6,r16
    41b0:	db001615 	stw	r12,88(sp)
    41b4:	15c00044 	addi	r23,r2,1
    41b8:	000bd1c0 	call	bd1c <__muldf3>
    41bc:	d9401017 	ldw	r5,64(sp)
    41c0:	d9000f17 	ldw	r4,60(sp)
    41c4:	d8c01515 	stw	r3,84(sp)
    41c8:	d8801415 	stw	r2,80(sp)
    41cc:	000cd300 	call	cd30 <__fixdfsi>
    41d0:	1009883a 	mov	r4,r2
    41d4:	1021883a 	mov	r16,r2
    41d8:	000cdb00 	call	cdb0 <__floatsidf>
    41dc:	d9000f17 	ldw	r4,60(sp)
    41e0:	d9401017 	ldw	r5,64(sp)
    41e4:	100d883a 	mov	r6,r2
    41e8:	180f883a 	mov	r7,r3
    41ec:	000c4340 	call	c434 <__subdf3>
    41f0:	1829883a 	mov	r20,r3
    41f4:	d8c00717 	ldw	r3,28(sp)
    41f8:	84000c04 	addi	r16,r16,48
    41fc:	1023883a 	mov	r17,r2
    4200:	1c000005 	stb	r16,0(r3)
    4204:	db001617 	ldw	r12,88(sp)
    4208:	00800044 	movi	r2,1
    420c:	60802226 	beq	r12,r2,4298 <_dtoa_r+0x1424>
    4210:	d9c00717 	ldw	r7,28(sp)
    4214:	8805883a 	mov	r2,r17
    4218:	b82b883a 	mov	r21,r23
    421c:	3b19883a 	add	r12,r7,r12
    4220:	6023883a 	mov	r17,r12
    4224:	a007883a 	mov	r3,r20
    4228:	dc800f15 	stw	r18,60(sp)
    422c:	000d883a 	mov	r6,zero
    4230:	01d00934 	movhi	r7,16420
    4234:	1009883a 	mov	r4,r2
    4238:	180b883a 	mov	r5,r3
    423c:	000bd1c0 	call	bd1c <__muldf3>
    4240:	180b883a 	mov	r5,r3
    4244:	1009883a 	mov	r4,r2
    4248:	1829883a 	mov	r20,r3
    424c:	1025883a 	mov	r18,r2
    4250:	000cd300 	call	cd30 <__fixdfsi>
    4254:	1009883a 	mov	r4,r2
    4258:	1021883a 	mov	r16,r2
    425c:	000cdb00 	call	cdb0 <__floatsidf>
    4260:	100d883a 	mov	r6,r2
    4264:	180f883a 	mov	r7,r3
    4268:	9009883a 	mov	r4,r18
    426c:	a00b883a 	mov	r5,r20
    4270:	84000c04 	addi	r16,r16,48
    4274:	000c4340 	call	c434 <__subdf3>
    4278:	ad400044 	addi	r21,r21,1
    427c:	ac3fffc5 	stb	r16,-1(r21)
    4280:	ac7fea1e 	bne	r21,r17,422c <__alt_data_end+0xfffe422c>
    4284:	1023883a 	mov	r17,r2
    4288:	d8801217 	ldw	r2,72(sp)
    428c:	dc800f17 	ldw	r18,60(sp)
    4290:	1829883a 	mov	r20,r3
    4294:	b8af883a 	add	r23,r23,r2
    4298:	d9001417 	ldw	r4,80(sp)
    429c:	d9401517 	ldw	r5,84(sp)
    42a0:	000d883a 	mov	r6,zero
    42a4:	01cff834 	movhi	r7,16352
    42a8:	000a9300 	call	a930 <__adddf3>
    42ac:	880d883a 	mov	r6,r17
    42b0:	a00f883a 	mov	r7,r20
    42b4:	1009883a 	mov	r4,r2
    42b8:	180b883a 	mov	r5,r3
    42bc:	000bc280 	call	bc28 <__ledf2>
    42c0:	10003e0e 	bge	r2,zero,43bc <_dtoa_r+0x1548>
    42c4:	d9001317 	ldw	r4,76(sp)
    42c8:	bd3fffc3 	ldbu	r20,-1(r23)
    42cc:	d9000515 	stw	r4,20(sp)
    42d0:	003d3b06 	br	37c0 <__alt_data_end+0xfffe37c0>
    42d4:	0027883a 	mov	r19,zero
    42d8:	003f1b06 	br	3f48 <__alt_data_end+0xfffe3f48>
    42dc:	d8800817 	ldw	r2,32(sp)
    42e0:	11e9c83a 	sub	r20,r2,r7
    42e4:	0005883a 	mov	r2,zero
    42e8:	003d5406 	br	383c <__alt_data_end+0xfffe383c>
    42ec:	00800044 	movi	r2,1
    42f0:	003dc706 	br	3a10 <__alt_data_end+0xfffe3a10>
    42f4:	d8c00217 	ldw	r3,8(sp)
    42f8:	00800d84 	movi	r2,54
    42fc:	dd400a17 	ldw	r21,40(sp)
    4300:	10c5c83a 	sub	r2,r2,r3
    4304:	dd000817 	ldw	r20,32(sp)
    4308:	003d4c06 	br	383c <__alt_data_end+0xfffe383c>
    430c:	dc800f15 	stw	r18,60(sp)
    4310:	dcc01015 	stw	r19,64(sp)
    4314:	04000084 	movi	r16,2
    4318:	003bed06 	br	32d0 <__alt_data_end+0xfffe32d0>
    431c:	d9000617 	ldw	r4,24(sp)
    4320:	203f0d26 	beq	r4,zero,3f58 <__alt_data_end+0xfffe3f58>
    4324:	d9800c17 	ldw	r6,48(sp)
    4328:	01bcab0e 	bge	zero,r6,35d8 <__alt_data_end+0xfffe35d8>
    432c:	d9401017 	ldw	r5,64(sp)
    4330:	d9000f17 	ldw	r4,60(sp)
    4334:	000d883a 	mov	r6,zero
    4338:	01d00934 	movhi	r7,16420
    433c:	000bd1c0 	call	bd1c <__muldf3>
    4340:	81000044 	addi	r4,r16,1
    4344:	d8800f15 	stw	r2,60(sp)
    4348:	d8c01015 	stw	r3,64(sp)
    434c:	000cdb00 	call	cdb0 <__floatsidf>
    4350:	d9800f17 	ldw	r6,60(sp)
    4354:	d9c01017 	ldw	r7,64(sp)
    4358:	1009883a 	mov	r4,r2
    435c:	180b883a 	mov	r5,r3
    4360:	000bd1c0 	call	bd1c <__muldf3>
    4364:	01d00734 	movhi	r7,16412
    4368:	000d883a 	mov	r6,zero
    436c:	1009883a 	mov	r4,r2
    4370:	180b883a 	mov	r5,r3
    4374:	000a9300 	call	a930 <__adddf3>
    4378:	d9c00517 	ldw	r7,20(sp)
    437c:	047f3034 	movhi	r17,64704
    4380:	1021883a 	mov	r16,r2
    4384:	39ffffc4 	addi	r7,r7,-1
    4388:	d9c01315 	stw	r7,76(sp)
    438c:	1c63883a 	add	r17,r3,r17
    4390:	db000c17 	ldw	r12,48(sp)
    4394:	003bea06 	br	3340 <__alt_data_end+0xfffe3340>
    4398:	dc000915 	stw	r16,36(sp)
    439c:	003e0e06 	br	3bd8 <__alt_data_end+0xfffe3bd8>
    43a0:	01000e44 	movi	r4,57
    43a4:	8825883a 	mov	r18,r17
    43a8:	9dc00044 	addi	r23,r19,1
    43ac:	99000005 	stb	r4,0(r19)
    43b0:	a023883a 	mov	r17,r20
    43b4:	dc000915 	stw	r16,36(sp)
    43b8:	003da406 	br	3a4c <__alt_data_end+0xfffe3a4c>
    43bc:	d9801417 	ldw	r6,80(sp)
    43c0:	d9c01517 	ldw	r7,84(sp)
    43c4:	0009883a 	mov	r4,zero
    43c8:	014ff834 	movhi	r5,16352
    43cc:	000c4340 	call	c434 <__subdf3>
    43d0:	880d883a 	mov	r6,r17
    43d4:	a00f883a 	mov	r7,r20
    43d8:	1009883a 	mov	r4,r2
    43dc:	180b883a 	mov	r5,r3
    43e0:	000bb4c0 	call	bb4c <__gedf2>
    43e4:	00bc7c0e 	bge	zero,r2,35d8 <__alt_data_end+0xfffe35d8>
    43e8:	01000c04 	movi	r4,48
    43ec:	00000106 	br	43f4 <_dtoa_r+0x1580>
    43f0:	102f883a 	mov	r23,r2
    43f4:	b8bfffc4 	addi	r2,r23,-1
    43f8:	10c00007 	ldb	r3,0(r2)
    43fc:	193ffc26 	beq	r3,r4,43f0 <__alt_data_end+0xfffe43f0>
    4400:	d9801317 	ldw	r6,76(sp)
    4404:	d9800515 	stw	r6,20(sp)
    4408:	003c4406 	br	351c <__alt_data_end+0xfffe351c>
    440c:	d9801317 	ldw	r6,76(sp)
    4410:	d9800515 	stw	r6,20(sp)
    4414:	003cea06 	br	37c0 <__alt_data_end+0xfffe37c0>
    4418:	dd800f17 	ldw	r22,60(sp)
    441c:	dcc01017 	ldw	r19,64(sp)
    4420:	dc801217 	ldw	r18,72(sp)
    4424:	003c6c06 	br	35d8 <__alt_data_end+0xfffe35d8>
    4428:	903e031e 	bne	r18,zero,3c38 <__alt_data_end+0xfffe3c38>
    442c:	003ebb06 	br	3f1c <__alt_data_end+0xfffe3f1c>
    4430:	103e6c1e 	bne	r2,zero,3de4 <__alt_data_end+0xfffe3de4>
    4434:	4080004c 	andi	r2,r8,1
    4438:	103e6a26 	beq	r2,zero,3de4 <__alt_data_end+0xfffe3de4>
    443c:	003e6606 	br	3dd8 <__alt_data_end+0xfffe3dd8>
    4440:	d8c00317 	ldw	r3,12(sp)
    4444:	00800084 	movi	r2,2
    4448:	10c02916 	blt	r2,r3,44f0 <_dtoa_r+0x167c>
    444c:	d9000c17 	ldw	r4,48(sp)
    4450:	003e8806 	br	3e74 <__alt_data_end+0xfffe3e74>
    4454:	04000084 	movi	r16,2
    4458:	003b9d06 	br	32d0 <__alt_data_end+0xfffe32d0>
    445c:	d9001317 	ldw	r4,76(sp)
    4460:	d9000515 	stw	r4,20(sp)
    4464:	003cd606 	br	37c0 <__alt_data_end+0xfffe37c0>
    4468:	d8801317 	ldw	r2,76(sp)
    446c:	d8800515 	stw	r2,20(sp)
    4470:	003c2a06 	br	351c <__alt_data_end+0xfffe351c>
    4474:	d9800317 	ldw	r6,12(sp)
    4478:	00800084 	movi	r2,2
    447c:	11801516 	blt	r2,r6,44d4 <_dtoa_r+0x1660>
    4480:	d9c00c17 	ldw	r7,48(sp)
    4484:	d9c00615 	stw	r7,24(sp)
    4488:	003df706 	br	3c68 <__alt_data_end+0xfffe3c68>
    448c:	193d3926 	beq	r3,r4,3974 <__alt_data_end+0xfffe3974>
    4490:	00c00f04 	movi	r3,60
    4494:	1885c83a 	sub	r2,r3,r2
    4498:	003ddf06 	br	3c18 <__alt_data_end+0xfffe3c18>
    449c:	e009883a 	mov	r4,fp
    44a0:	e0001115 	stw	zero,68(fp)
    44a4:	000b883a 	mov	r5,zero
    44a8:	00065100 	call	6510 <_Balloc>
    44ac:	d8800715 	stw	r2,28(sp)
    44b0:	d8c00717 	ldw	r3,28(sp)
    44b4:	00bfffc4 	movi	r2,-1
    44b8:	01000044 	movi	r4,1
    44bc:	d8800c15 	stw	r2,48(sp)
    44c0:	e0c01015 	stw	r3,64(fp)
    44c4:	d9000b15 	stw	r4,44(sp)
    44c8:	d8800615 	stw	r2,24(sp)
    44cc:	d8002215 	stw	zero,136(sp)
    44d0:	003c4106 	br	35d8 <__alt_data_end+0xfffe35d8>
    44d4:	d8c00c17 	ldw	r3,48(sp)
    44d8:	d8c00615 	stw	r3,24(sp)
    44dc:	003e7006 	br	3ea0 <__alt_data_end+0xfffe3ea0>
    44e0:	04400044 	movi	r17,1
    44e4:	003b2006 	br	3168 <__alt_data_end+0xfffe3168>
    44e8:	000b883a 	mov	r5,zero
    44ec:	003b3d06 	br	31e4 <__alt_data_end+0xfffe31e4>
    44f0:	d8800c17 	ldw	r2,48(sp)
    44f4:	d8800615 	stw	r2,24(sp)
    44f8:	003e6906 	br	3ea0 <__alt_data_end+0xfffe3ea0>

000044fc <__sflush_r>:
    44fc:	2880030b 	ldhu	r2,12(r5)
    4500:	defffb04 	addi	sp,sp,-20
    4504:	dcc00315 	stw	r19,12(sp)
    4508:	dc400115 	stw	r17,4(sp)
    450c:	dfc00415 	stw	ra,16(sp)
    4510:	dc800215 	stw	r18,8(sp)
    4514:	dc000015 	stw	r16,0(sp)
    4518:	10c0020c 	andi	r3,r2,8
    451c:	2823883a 	mov	r17,r5
    4520:	2027883a 	mov	r19,r4
    4524:	1800311e 	bne	r3,zero,45ec <__sflush_r+0xf0>
    4528:	28c00117 	ldw	r3,4(r5)
    452c:	10820014 	ori	r2,r2,2048
    4530:	2880030d 	sth	r2,12(r5)
    4534:	00c04b0e 	bge	zero,r3,4664 <__sflush_r+0x168>
    4538:	8a000a17 	ldw	r8,40(r17)
    453c:	40002326 	beq	r8,zero,45cc <__sflush_r+0xd0>
    4540:	9c000017 	ldw	r16,0(r19)
    4544:	10c4000c 	andi	r3,r2,4096
    4548:	98000015 	stw	zero,0(r19)
    454c:	18004826 	beq	r3,zero,4670 <__sflush_r+0x174>
    4550:	89801417 	ldw	r6,80(r17)
    4554:	10c0010c 	andi	r3,r2,4
    4558:	18000626 	beq	r3,zero,4574 <__sflush_r+0x78>
    455c:	88c00117 	ldw	r3,4(r17)
    4560:	88800c17 	ldw	r2,48(r17)
    4564:	30cdc83a 	sub	r6,r6,r3
    4568:	10000226 	beq	r2,zero,4574 <__sflush_r+0x78>
    456c:	88800f17 	ldw	r2,60(r17)
    4570:	308dc83a 	sub	r6,r6,r2
    4574:	89400717 	ldw	r5,28(r17)
    4578:	000f883a 	mov	r7,zero
    457c:	9809883a 	mov	r4,r19
    4580:	403ee83a 	callr	r8
    4584:	00ffffc4 	movi	r3,-1
    4588:	10c04426 	beq	r2,r3,469c <__sflush_r+0x1a0>
    458c:	88c0030b 	ldhu	r3,12(r17)
    4590:	89000417 	ldw	r4,16(r17)
    4594:	88000115 	stw	zero,4(r17)
    4598:	197dffcc 	andi	r5,r3,63487
    459c:	8940030d 	sth	r5,12(r17)
    45a0:	89000015 	stw	r4,0(r17)
    45a4:	18c4000c 	andi	r3,r3,4096
    45a8:	18002c1e 	bne	r3,zero,465c <__sflush_r+0x160>
    45ac:	89400c17 	ldw	r5,48(r17)
    45b0:	9c000015 	stw	r16,0(r19)
    45b4:	28000526 	beq	r5,zero,45cc <__sflush_r+0xd0>
    45b8:	88801004 	addi	r2,r17,64
    45bc:	28800226 	beq	r5,r2,45c8 <__sflush_r+0xcc>
    45c0:	9809883a 	mov	r4,r19
    45c4:	0004c680 	call	4c68 <_free_r>
    45c8:	88000c15 	stw	zero,48(r17)
    45cc:	0005883a 	mov	r2,zero
    45d0:	dfc00417 	ldw	ra,16(sp)
    45d4:	dcc00317 	ldw	r19,12(sp)
    45d8:	dc800217 	ldw	r18,8(sp)
    45dc:	dc400117 	ldw	r17,4(sp)
    45e0:	dc000017 	ldw	r16,0(sp)
    45e4:	dec00504 	addi	sp,sp,20
    45e8:	f800283a 	ret
    45ec:	2c800417 	ldw	r18,16(r5)
    45f0:	903ff626 	beq	r18,zero,45cc <__alt_data_end+0xfffe45cc>
    45f4:	2c000017 	ldw	r16,0(r5)
    45f8:	108000cc 	andi	r2,r2,3
    45fc:	2c800015 	stw	r18,0(r5)
    4600:	84a1c83a 	sub	r16,r16,r18
    4604:	1000131e 	bne	r2,zero,4654 <__sflush_r+0x158>
    4608:	28800517 	ldw	r2,20(r5)
    460c:	88800215 	stw	r2,8(r17)
    4610:	04000316 	blt	zero,r16,4620 <__sflush_r+0x124>
    4614:	003fed06 	br	45cc <__alt_data_end+0xfffe45cc>
    4618:	90a5883a 	add	r18,r18,r2
    461c:	043feb0e 	bge	zero,r16,45cc <__alt_data_end+0xfffe45cc>
    4620:	88800917 	ldw	r2,36(r17)
    4624:	89400717 	ldw	r5,28(r17)
    4628:	800f883a 	mov	r7,r16
    462c:	900d883a 	mov	r6,r18
    4630:	9809883a 	mov	r4,r19
    4634:	103ee83a 	callr	r2
    4638:	80a1c83a 	sub	r16,r16,r2
    463c:	00bff616 	blt	zero,r2,4618 <__alt_data_end+0xfffe4618>
    4640:	88c0030b 	ldhu	r3,12(r17)
    4644:	00bfffc4 	movi	r2,-1
    4648:	18c01014 	ori	r3,r3,64
    464c:	88c0030d 	sth	r3,12(r17)
    4650:	003fdf06 	br	45d0 <__alt_data_end+0xfffe45d0>
    4654:	0005883a 	mov	r2,zero
    4658:	003fec06 	br	460c <__alt_data_end+0xfffe460c>
    465c:	88801415 	stw	r2,80(r17)
    4660:	003fd206 	br	45ac <__alt_data_end+0xfffe45ac>
    4664:	28c00f17 	ldw	r3,60(r5)
    4668:	00ffb316 	blt	zero,r3,4538 <__alt_data_end+0xfffe4538>
    466c:	003fd706 	br	45cc <__alt_data_end+0xfffe45cc>
    4670:	89400717 	ldw	r5,28(r17)
    4674:	000d883a 	mov	r6,zero
    4678:	01c00044 	movi	r7,1
    467c:	9809883a 	mov	r4,r19
    4680:	403ee83a 	callr	r8
    4684:	100d883a 	mov	r6,r2
    4688:	00bfffc4 	movi	r2,-1
    468c:	30801426 	beq	r6,r2,46e0 <__sflush_r+0x1e4>
    4690:	8880030b 	ldhu	r2,12(r17)
    4694:	8a000a17 	ldw	r8,40(r17)
    4698:	003fae06 	br	4554 <__alt_data_end+0xfffe4554>
    469c:	98c00017 	ldw	r3,0(r19)
    46a0:	183fba26 	beq	r3,zero,458c <__alt_data_end+0xfffe458c>
    46a4:	01000744 	movi	r4,29
    46a8:	19000626 	beq	r3,r4,46c4 <__sflush_r+0x1c8>
    46ac:	01000584 	movi	r4,22
    46b0:	19000426 	beq	r3,r4,46c4 <__sflush_r+0x1c8>
    46b4:	88c0030b 	ldhu	r3,12(r17)
    46b8:	18c01014 	ori	r3,r3,64
    46bc:	88c0030d 	sth	r3,12(r17)
    46c0:	003fc306 	br	45d0 <__alt_data_end+0xfffe45d0>
    46c4:	8880030b 	ldhu	r2,12(r17)
    46c8:	88c00417 	ldw	r3,16(r17)
    46cc:	88000115 	stw	zero,4(r17)
    46d0:	10bdffcc 	andi	r2,r2,63487
    46d4:	8880030d 	sth	r2,12(r17)
    46d8:	88c00015 	stw	r3,0(r17)
    46dc:	003fb306 	br	45ac <__alt_data_end+0xfffe45ac>
    46e0:	98800017 	ldw	r2,0(r19)
    46e4:	103fea26 	beq	r2,zero,4690 <__alt_data_end+0xfffe4690>
    46e8:	00c00744 	movi	r3,29
    46ec:	10c00226 	beq	r2,r3,46f8 <__sflush_r+0x1fc>
    46f0:	00c00584 	movi	r3,22
    46f4:	10c0031e 	bne	r2,r3,4704 <__sflush_r+0x208>
    46f8:	9c000015 	stw	r16,0(r19)
    46fc:	0005883a 	mov	r2,zero
    4700:	003fb306 	br	45d0 <__alt_data_end+0xfffe45d0>
    4704:	88c0030b 	ldhu	r3,12(r17)
    4708:	3005883a 	mov	r2,r6
    470c:	18c01014 	ori	r3,r3,64
    4710:	88c0030d 	sth	r3,12(r17)
    4714:	003fae06 	br	45d0 <__alt_data_end+0xfffe45d0>

00004718 <_fflush_r>:
    4718:	defffd04 	addi	sp,sp,-12
    471c:	dc000115 	stw	r16,4(sp)
    4720:	dfc00215 	stw	ra,8(sp)
    4724:	2021883a 	mov	r16,r4
    4728:	20000226 	beq	r4,zero,4734 <_fflush_r+0x1c>
    472c:	20800e17 	ldw	r2,56(r4)
    4730:	10000c26 	beq	r2,zero,4764 <_fflush_r+0x4c>
    4734:	2880030f 	ldh	r2,12(r5)
    4738:	1000051e 	bne	r2,zero,4750 <_fflush_r+0x38>
    473c:	0005883a 	mov	r2,zero
    4740:	dfc00217 	ldw	ra,8(sp)
    4744:	dc000117 	ldw	r16,4(sp)
    4748:	dec00304 	addi	sp,sp,12
    474c:	f800283a 	ret
    4750:	8009883a 	mov	r4,r16
    4754:	dfc00217 	ldw	ra,8(sp)
    4758:	dc000117 	ldw	r16,4(sp)
    475c:	dec00304 	addi	sp,sp,12
    4760:	00044fc1 	jmpi	44fc <__sflush_r>
    4764:	d9400015 	stw	r5,0(sp)
    4768:	0004af40 	call	4af4 <__sinit>
    476c:	d9400017 	ldw	r5,0(sp)
    4770:	003ff006 	br	4734 <__alt_data_end+0xfffe4734>

00004774 <fflush>:
    4774:	20000526 	beq	r4,zero,478c <fflush+0x18>
    4778:	00800074 	movhi	r2,1
    477c:	10856204 	addi	r2,r2,5512
    4780:	200b883a 	mov	r5,r4
    4784:	11000017 	ldw	r4,0(r2)
    4788:	00047181 	jmpi	4718 <_fflush_r>
    478c:	00800074 	movhi	r2,1
    4790:	10856104 	addi	r2,r2,5508
    4794:	11000017 	ldw	r4,0(r2)
    4798:	01400034 	movhi	r5,0
    479c:	2951c604 	addi	r5,r5,18200
    47a0:	00054f81 	jmpi	54f8 <_fwalk_reent>

000047a4 <__fp_unlock>:
    47a4:	0005883a 	mov	r2,zero
    47a8:	f800283a 	ret

000047ac <_cleanup_r>:
    47ac:	01400074 	movhi	r5,1
    47b0:	29654404 	addi	r5,r5,-27376
    47b4:	00054f81 	jmpi	54f8 <_fwalk_reent>

000047b8 <__sinit.part.1>:
    47b8:	defff704 	addi	sp,sp,-36
    47bc:	00c00034 	movhi	r3,0
    47c0:	dfc00815 	stw	ra,32(sp)
    47c4:	ddc00715 	stw	r23,28(sp)
    47c8:	dd800615 	stw	r22,24(sp)
    47cc:	dd400515 	stw	r21,20(sp)
    47d0:	dd000415 	stw	r20,16(sp)
    47d4:	dcc00315 	stw	r19,12(sp)
    47d8:	dc800215 	stw	r18,8(sp)
    47dc:	dc400115 	stw	r17,4(sp)
    47e0:	dc000015 	stw	r16,0(sp)
    47e4:	18d1eb04 	addi	r3,r3,18348
    47e8:	24000117 	ldw	r16,4(r4)
    47ec:	20c00f15 	stw	r3,60(r4)
    47f0:	2080bb04 	addi	r2,r4,748
    47f4:	00c000c4 	movi	r3,3
    47f8:	20c0b915 	stw	r3,740(r4)
    47fc:	2080ba15 	stw	r2,744(r4)
    4800:	2000b815 	stw	zero,736(r4)
    4804:	05c00204 	movi	r23,8
    4808:	00800104 	movi	r2,4
    480c:	2025883a 	mov	r18,r4
    4810:	b80d883a 	mov	r6,r23
    4814:	81001704 	addi	r4,r16,92
    4818:	000b883a 	mov	r5,zero
    481c:	80000015 	stw	zero,0(r16)
    4820:	80000115 	stw	zero,4(r16)
    4824:	80000215 	stw	zero,8(r16)
    4828:	8080030d 	sth	r2,12(r16)
    482c:	80001915 	stw	zero,100(r16)
    4830:	8000038d 	sth	zero,14(r16)
    4834:	80000415 	stw	zero,16(r16)
    4838:	80000515 	stw	zero,20(r16)
    483c:	80000615 	stw	zero,24(r16)
    4840:	00063e80 	call	63e8 <memset>
    4844:	05800034 	movhi	r22,0
    4848:	94400217 	ldw	r17,8(r18)
    484c:	05400034 	movhi	r21,0
    4850:	05000034 	movhi	r20,0
    4854:	04c00034 	movhi	r19,0
    4858:	b59ece04 	addi	r22,r22,31544
    485c:	ad5ee504 	addi	r21,r21,31636
    4860:	a51f0404 	addi	r20,r20,31760
    4864:	9cdf1b04 	addi	r19,r19,31852
    4868:	85800815 	stw	r22,32(r16)
    486c:	85400915 	stw	r21,36(r16)
    4870:	85000a15 	stw	r20,40(r16)
    4874:	84c00b15 	stw	r19,44(r16)
    4878:	84000715 	stw	r16,28(r16)
    487c:	00800284 	movi	r2,10
    4880:	8880030d 	sth	r2,12(r17)
    4884:	00800044 	movi	r2,1
    4888:	b80d883a 	mov	r6,r23
    488c:	89001704 	addi	r4,r17,92
    4890:	000b883a 	mov	r5,zero
    4894:	88000015 	stw	zero,0(r17)
    4898:	88000115 	stw	zero,4(r17)
    489c:	88000215 	stw	zero,8(r17)
    48a0:	88001915 	stw	zero,100(r17)
    48a4:	8880038d 	sth	r2,14(r17)
    48a8:	88000415 	stw	zero,16(r17)
    48ac:	88000515 	stw	zero,20(r17)
    48b0:	88000615 	stw	zero,24(r17)
    48b4:	00063e80 	call	63e8 <memset>
    48b8:	94000317 	ldw	r16,12(r18)
    48bc:	00800484 	movi	r2,18
    48c0:	8c400715 	stw	r17,28(r17)
    48c4:	8d800815 	stw	r22,32(r17)
    48c8:	8d400915 	stw	r21,36(r17)
    48cc:	8d000a15 	stw	r20,40(r17)
    48d0:	8cc00b15 	stw	r19,44(r17)
    48d4:	8080030d 	sth	r2,12(r16)
    48d8:	00800084 	movi	r2,2
    48dc:	80000015 	stw	zero,0(r16)
    48e0:	80000115 	stw	zero,4(r16)
    48e4:	80000215 	stw	zero,8(r16)
    48e8:	80001915 	stw	zero,100(r16)
    48ec:	8080038d 	sth	r2,14(r16)
    48f0:	80000415 	stw	zero,16(r16)
    48f4:	80000515 	stw	zero,20(r16)
    48f8:	80000615 	stw	zero,24(r16)
    48fc:	b80d883a 	mov	r6,r23
    4900:	000b883a 	mov	r5,zero
    4904:	81001704 	addi	r4,r16,92
    4908:	00063e80 	call	63e8 <memset>
    490c:	00800044 	movi	r2,1
    4910:	84000715 	stw	r16,28(r16)
    4914:	85800815 	stw	r22,32(r16)
    4918:	85400915 	stw	r21,36(r16)
    491c:	85000a15 	stw	r20,40(r16)
    4920:	84c00b15 	stw	r19,44(r16)
    4924:	90800e15 	stw	r2,56(r18)
    4928:	dfc00817 	ldw	ra,32(sp)
    492c:	ddc00717 	ldw	r23,28(sp)
    4930:	dd800617 	ldw	r22,24(sp)
    4934:	dd400517 	ldw	r21,20(sp)
    4938:	dd000417 	ldw	r20,16(sp)
    493c:	dcc00317 	ldw	r19,12(sp)
    4940:	dc800217 	ldw	r18,8(sp)
    4944:	dc400117 	ldw	r17,4(sp)
    4948:	dc000017 	ldw	r16,0(sp)
    494c:	dec00904 	addi	sp,sp,36
    4950:	f800283a 	ret

00004954 <__fp_lock>:
    4954:	0005883a 	mov	r2,zero
    4958:	f800283a 	ret

0000495c <__sfmoreglue>:
    495c:	defffc04 	addi	sp,sp,-16
    4960:	dc400115 	stw	r17,4(sp)
    4964:	2c7fffc4 	addi	r17,r5,-1
    4968:	8c401a24 	muli	r17,r17,104
    496c:	dc800215 	stw	r18,8(sp)
    4970:	2825883a 	mov	r18,r5
    4974:	89401d04 	addi	r5,r17,116
    4978:	dc000015 	stw	r16,0(sp)
    497c:	dfc00315 	stw	ra,12(sp)
    4980:	00058540 	call	5854 <_malloc_r>
    4984:	1021883a 	mov	r16,r2
    4988:	10000726 	beq	r2,zero,49a8 <__sfmoreglue+0x4c>
    498c:	11000304 	addi	r4,r2,12
    4990:	10000015 	stw	zero,0(r2)
    4994:	14800115 	stw	r18,4(r2)
    4998:	11000215 	stw	r4,8(r2)
    499c:	89801a04 	addi	r6,r17,104
    49a0:	000b883a 	mov	r5,zero
    49a4:	00063e80 	call	63e8 <memset>
    49a8:	8005883a 	mov	r2,r16
    49ac:	dfc00317 	ldw	ra,12(sp)
    49b0:	dc800217 	ldw	r18,8(sp)
    49b4:	dc400117 	ldw	r17,4(sp)
    49b8:	dc000017 	ldw	r16,0(sp)
    49bc:	dec00404 	addi	sp,sp,16
    49c0:	f800283a 	ret

000049c4 <__sfp>:
    49c4:	defffb04 	addi	sp,sp,-20
    49c8:	dc000015 	stw	r16,0(sp)
    49cc:	04000074 	movhi	r16,1
    49d0:	84056104 	addi	r16,r16,5508
    49d4:	dcc00315 	stw	r19,12(sp)
    49d8:	2027883a 	mov	r19,r4
    49dc:	81000017 	ldw	r4,0(r16)
    49e0:	dfc00415 	stw	ra,16(sp)
    49e4:	dc800215 	stw	r18,8(sp)
    49e8:	20800e17 	ldw	r2,56(r4)
    49ec:	dc400115 	stw	r17,4(sp)
    49f0:	1000021e 	bne	r2,zero,49fc <__sfp+0x38>
    49f4:	00047b80 	call	47b8 <__sinit.part.1>
    49f8:	81000017 	ldw	r4,0(r16)
    49fc:	2480b804 	addi	r18,r4,736
    4a00:	047fffc4 	movi	r17,-1
    4a04:	91000117 	ldw	r4,4(r18)
    4a08:	94000217 	ldw	r16,8(r18)
    4a0c:	213fffc4 	addi	r4,r4,-1
    4a10:	20000a16 	blt	r4,zero,4a3c <__sfp+0x78>
    4a14:	8080030f 	ldh	r2,12(r16)
    4a18:	10000c26 	beq	r2,zero,4a4c <__sfp+0x88>
    4a1c:	80c01d04 	addi	r3,r16,116
    4a20:	00000206 	br	4a2c <__sfp+0x68>
    4a24:	18bfe60f 	ldh	r2,-104(r3)
    4a28:	10000826 	beq	r2,zero,4a4c <__sfp+0x88>
    4a2c:	213fffc4 	addi	r4,r4,-1
    4a30:	1c3ffd04 	addi	r16,r3,-12
    4a34:	18c01a04 	addi	r3,r3,104
    4a38:	247ffa1e 	bne	r4,r17,4a24 <__alt_data_end+0xfffe4a24>
    4a3c:	90800017 	ldw	r2,0(r18)
    4a40:	10001d26 	beq	r2,zero,4ab8 <__sfp+0xf4>
    4a44:	1025883a 	mov	r18,r2
    4a48:	003fee06 	br	4a04 <__alt_data_end+0xfffe4a04>
    4a4c:	00bfffc4 	movi	r2,-1
    4a50:	8080038d 	sth	r2,14(r16)
    4a54:	00800044 	movi	r2,1
    4a58:	8080030d 	sth	r2,12(r16)
    4a5c:	80001915 	stw	zero,100(r16)
    4a60:	80000015 	stw	zero,0(r16)
    4a64:	80000215 	stw	zero,8(r16)
    4a68:	80000115 	stw	zero,4(r16)
    4a6c:	80000415 	stw	zero,16(r16)
    4a70:	80000515 	stw	zero,20(r16)
    4a74:	80000615 	stw	zero,24(r16)
    4a78:	01800204 	movi	r6,8
    4a7c:	000b883a 	mov	r5,zero
    4a80:	81001704 	addi	r4,r16,92
    4a84:	00063e80 	call	63e8 <memset>
    4a88:	8005883a 	mov	r2,r16
    4a8c:	80000c15 	stw	zero,48(r16)
    4a90:	80000d15 	stw	zero,52(r16)
    4a94:	80001115 	stw	zero,68(r16)
    4a98:	80001215 	stw	zero,72(r16)
    4a9c:	dfc00417 	ldw	ra,16(sp)
    4aa0:	dcc00317 	ldw	r19,12(sp)
    4aa4:	dc800217 	ldw	r18,8(sp)
    4aa8:	dc400117 	ldw	r17,4(sp)
    4aac:	dc000017 	ldw	r16,0(sp)
    4ab0:	dec00504 	addi	sp,sp,20
    4ab4:	f800283a 	ret
    4ab8:	01400104 	movi	r5,4
    4abc:	9809883a 	mov	r4,r19
    4ac0:	000495c0 	call	495c <__sfmoreglue>
    4ac4:	90800015 	stw	r2,0(r18)
    4ac8:	103fde1e 	bne	r2,zero,4a44 <__alt_data_end+0xfffe4a44>
    4acc:	00800304 	movi	r2,12
    4ad0:	98800015 	stw	r2,0(r19)
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	003ff006 	br	4a9c <__alt_data_end+0xfffe4a9c>

00004adc <_cleanup>:
    4adc:	00800074 	movhi	r2,1
    4ae0:	10856104 	addi	r2,r2,5508
    4ae4:	11000017 	ldw	r4,0(r2)
    4ae8:	01400074 	movhi	r5,1
    4aec:	29654404 	addi	r5,r5,-27376
    4af0:	00054f81 	jmpi	54f8 <_fwalk_reent>

00004af4 <__sinit>:
    4af4:	20800e17 	ldw	r2,56(r4)
    4af8:	10000126 	beq	r2,zero,4b00 <__sinit+0xc>
    4afc:	f800283a 	ret
    4b00:	00047b81 	jmpi	47b8 <__sinit.part.1>

00004b04 <__sfp_lock_acquire>:
    4b04:	f800283a 	ret

00004b08 <__sfp_lock_release>:
    4b08:	f800283a 	ret

00004b0c <__sinit_lock_acquire>:
    4b0c:	f800283a 	ret

00004b10 <__sinit_lock_release>:
    4b10:	f800283a 	ret

00004b14 <__fp_lock_all>:
    4b14:	00800074 	movhi	r2,1
    4b18:	10856204 	addi	r2,r2,5512
    4b1c:	11000017 	ldw	r4,0(r2)
    4b20:	01400034 	movhi	r5,0
    4b24:	29525504 	addi	r5,r5,18772
    4b28:	00054341 	jmpi	5434 <_fwalk>

00004b2c <__fp_unlock_all>:
    4b2c:	00800074 	movhi	r2,1
    4b30:	10856204 	addi	r2,r2,5512
    4b34:	11000017 	ldw	r4,0(r2)
    4b38:	01400034 	movhi	r5,0
    4b3c:	2951e904 	addi	r5,r5,18340
    4b40:	00054341 	jmpi	5434 <_fwalk>

00004b44 <_malloc_trim_r>:
    4b44:	defffb04 	addi	sp,sp,-20
    4b48:	dcc00315 	stw	r19,12(sp)
    4b4c:	04c00074 	movhi	r19,1
    4b50:	dc800215 	stw	r18,8(sp)
    4b54:	dc400115 	stw	r17,4(sp)
    4b58:	dc000015 	stw	r16,0(sp)
    4b5c:	dfc00415 	stw	ra,16(sp)
    4b60:	2821883a 	mov	r16,r5
    4b64:	9cffdd04 	addi	r19,r19,-140
    4b68:	2025883a 	mov	r18,r4
    4b6c:	000d5140 	call	d514 <__malloc_lock>
    4b70:	98800217 	ldw	r2,8(r19)
    4b74:	14400117 	ldw	r17,4(r2)
    4b78:	00bfff04 	movi	r2,-4
    4b7c:	88a2703a 	and	r17,r17,r2
    4b80:	8c21c83a 	sub	r16,r17,r16
    4b84:	8403fbc4 	addi	r16,r16,4079
    4b88:	8020d33a 	srli	r16,r16,12
    4b8c:	0083ffc4 	movi	r2,4095
    4b90:	843fffc4 	addi	r16,r16,-1
    4b94:	8020933a 	slli	r16,r16,12
    4b98:	1400060e 	bge	r2,r16,4bb4 <_malloc_trim_r+0x70>
    4b9c:	000b883a 	mov	r5,zero
    4ba0:	9009883a 	mov	r4,r18
    4ba4:	0007ae40 	call	7ae4 <_sbrk_r>
    4ba8:	98c00217 	ldw	r3,8(r19)
    4bac:	1c47883a 	add	r3,r3,r17
    4bb0:	10c00a26 	beq	r2,r3,4bdc <_malloc_trim_r+0x98>
    4bb4:	9009883a 	mov	r4,r18
    4bb8:	000d5380 	call	d538 <__malloc_unlock>
    4bbc:	0005883a 	mov	r2,zero
    4bc0:	dfc00417 	ldw	ra,16(sp)
    4bc4:	dcc00317 	ldw	r19,12(sp)
    4bc8:	dc800217 	ldw	r18,8(sp)
    4bcc:	dc400117 	ldw	r17,4(sp)
    4bd0:	dc000017 	ldw	r16,0(sp)
    4bd4:	dec00504 	addi	sp,sp,20
    4bd8:	f800283a 	ret
    4bdc:	040bc83a 	sub	r5,zero,r16
    4be0:	9009883a 	mov	r4,r18
    4be4:	0007ae40 	call	7ae4 <_sbrk_r>
    4be8:	00ffffc4 	movi	r3,-1
    4bec:	10c00d26 	beq	r2,r3,4c24 <_malloc_trim_r+0xe0>
    4bf0:	00c00074 	movhi	r3,1
    4bf4:	18cc3a04 	addi	r3,r3,12520
    4bf8:	18800017 	ldw	r2,0(r3)
    4bfc:	99000217 	ldw	r4,8(r19)
    4c00:	8c23c83a 	sub	r17,r17,r16
    4c04:	8c400054 	ori	r17,r17,1
    4c08:	1421c83a 	sub	r16,r2,r16
    4c0c:	24400115 	stw	r17,4(r4)
    4c10:	9009883a 	mov	r4,r18
    4c14:	1c000015 	stw	r16,0(r3)
    4c18:	000d5380 	call	d538 <__malloc_unlock>
    4c1c:	00800044 	movi	r2,1
    4c20:	003fe706 	br	4bc0 <__alt_data_end+0xfffe4bc0>
    4c24:	000b883a 	mov	r5,zero
    4c28:	9009883a 	mov	r4,r18
    4c2c:	0007ae40 	call	7ae4 <_sbrk_r>
    4c30:	99000217 	ldw	r4,8(r19)
    4c34:	014003c4 	movi	r5,15
    4c38:	1107c83a 	sub	r3,r2,r4
    4c3c:	28ffdd0e 	bge	r5,r3,4bb4 <__alt_data_end+0xfffe4bb4>
    4c40:	01400074 	movhi	r5,1
    4c44:	29456404 	addi	r5,r5,5520
    4c48:	29400017 	ldw	r5,0(r5)
    4c4c:	18c00054 	ori	r3,r3,1
    4c50:	20c00115 	stw	r3,4(r4)
    4c54:	00c00074 	movhi	r3,1
    4c58:	1145c83a 	sub	r2,r2,r5
    4c5c:	18cc3a04 	addi	r3,r3,12520
    4c60:	18800015 	stw	r2,0(r3)
    4c64:	003fd306 	br	4bb4 <__alt_data_end+0xfffe4bb4>

00004c68 <_free_r>:
    4c68:	28004126 	beq	r5,zero,4d70 <_free_r+0x108>
    4c6c:	defffd04 	addi	sp,sp,-12
    4c70:	dc400115 	stw	r17,4(sp)
    4c74:	dc000015 	stw	r16,0(sp)
    4c78:	2023883a 	mov	r17,r4
    4c7c:	2821883a 	mov	r16,r5
    4c80:	dfc00215 	stw	ra,8(sp)
    4c84:	000d5140 	call	d514 <__malloc_lock>
    4c88:	81ffff17 	ldw	r7,-4(r16)
    4c8c:	00bfff84 	movi	r2,-2
    4c90:	01000074 	movhi	r4,1
    4c94:	81bffe04 	addi	r6,r16,-8
    4c98:	3884703a 	and	r2,r7,r2
    4c9c:	213fdd04 	addi	r4,r4,-140
    4ca0:	308b883a 	add	r5,r6,r2
    4ca4:	2a400117 	ldw	r9,4(r5)
    4ca8:	22000217 	ldw	r8,8(r4)
    4cac:	00ffff04 	movi	r3,-4
    4cb0:	48c6703a 	and	r3,r9,r3
    4cb4:	2a005726 	beq	r5,r8,4e14 <_free_r+0x1ac>
    4cb8:	28c00115 	stw	r3,4(r5)
    4cbc:	39c0004c 	andi	r7,r7,1
    4cc0:	3800091e 	bne	r7,zero,4ce8 <_free_r+0x80>
    4cc4:	823ffe17 	ldw	r8,-8(r16)
    4cc8:	22400204 	addi	r9,r4,8
    4ccc:	320dc83a 	sub	r6,r6,r8
    4cd0:	31c00217 	ldw	r7,8(r6)
    4cd4:	1205883a 	add	r2,r2,r8
    4cd8:	3a406526 	beq	r7,r9,4e70 <_free_r+0x208>
    4cdc:	32000317 	ldw	r8,12(r6)
    4ce0:	3a000315 	stw	r8,12(r7)
    4ce4:	41c00215 	stw	r7,8(r8)
    4ce8:	28cf883a 	add	r7,r5,r3
    4cec:	39c00117 	ldw	r7,4(r7)
    4cf0:	39c0004c 	andi	r7,r7,1
    4cf4:	38003a26 	beq	r7,zero,4de0 <_free_r+0x178>
    4cf8:	10c00054 	ori	r3,r2,1
    4cfc:	30c00115 	stw	r3,4(r6)
    4d00:	3087883a 	add	r3,r6,r2
    4d04:	18800015 	stw	r2,0(r3)
    4d08:	00c07fc4 	movi	r3,511
    4d0c:	18801936 	bltu	r3,r2,4d74 <_free_r+0x10c>
    4d10:	1004d0fa 	srli	r2,r2,3
    4d14:	01c00044 	movi	r7,1
    4d18:	21400117 	ldw	r5,4(r4)
    4d1c:	10c00044 	addi	r3,r2,1
    4d20:	18c7883a 	add	r3,r3,r3
    4d24:	1005d0ba 	srai	r2,r2,2
    4d28:	18c7883a 	add	r3,r3,r3
    4d2c:	18c7883a 	add	r3,r3,r3
    4d30:	1907883a 	add	r3,r3,r4
    4d34:	3884983a 	sll	r2,r7,r2
    4d38:	19c00017 	ldw	r7,0(r3)
    4d3c:	1a3ffe04 	addi	r8,r3,-8
    4d40:	1144b03a 	or	r2,r2,r5
    4d44:	32000315 	stw	r8,12(r6)
    4d48:	31c00215 	stw	r7,8(r6)
    4d4c:	20800115 	stw	r2,4(r4)
    4d50:	19800015 	stw	r6,0(r3)
    4d54:	39800315 	stw	r6,12(r7)
    4d58:	8809883a 	mov	r4,r17
    4d5c:	dfc00217 	ldw	ra,8(sp)
    4d60:	dc400117 	ldw	r17,4(sp)
    4d64:	dc000017 	ldw	r16,0(sp)
    4d68:	dec00304 	addi	sp,sp,12
    4d6c:	000d5381 	jmpi	d538 <__malloc_unlock>
    4d70:	f800283a 	ret
    4d74:	100ad27a 	srli	r5,r2,9
    4d78:	00c00104 	movi	r3,4
    4d7c:	19404a36 	bltu	r3,r5,4ea8 <_free_r+0x240>
    4d80:	100ad1ba 	srli	r5,r2,6
    4d84:	28c00e44 	addi	r3,r5,57
    4d88:	18c7883a 	add	r3,r3,r3
    4d8c:	29400e04 	addi	r5,r5,56
    4d90:	18c7883a 	add	r3,r3,r3
    4d94:	18c7883a 	add	r3,r3,r3
    4d98:	1909883a 	add	r4,r3,r4
    4d9c:	20c00017 	ldw	r3,0(r4)
    4da0:	01c00074 	movhi	r7,1
    4da4:	213ffe04 	addi	r4,r4,-8
    4da8:	39ffdd04 	addi	r7,r7,-140
    4dac:	20c04426 	beq	r4,r3,4ec0 <_free_r+0x258>
    4db0:	01ffff04 	movi	r7,-4
    4db4:	19400117 	ldw	r5,4(r3)
    4db8:	29ca703a 	and	r5,r5,r7
    4dbc:	1140022e 	bgeu	r2,r5,4dc8 <_free_r+0x160>
    4dc0:	18c00217 	ldw	r3,8(r3)
    4dc4:	20fffb1e 	bne	r4,r3,4db4 <__alt_data_end+0xfffe4db4>
    4dc8:	19000317 	ldw	r4,12(r3)
    4dcc:	31000315 	stw	r4,12(r6)
    4dd0:	30c00215 	stw	r3,8(r6)
    4dd4:	21800215 	stw	r6,8(r4)
    4dd8:	19800315 	stw	r6,12(r3)
    4ddc:	003fde06 	br	4d58 <__alt_data_end+0xfffe4d58>
    4de0:	29c00217 	ldw	r7,8(r5)
    4de4:	10c5883a 	add	r2,r2,r3
    4de8:	00c00074 	movhi	r3,1
    4dec:	18ffdf04 	addi	r3,r3,-132
    4df0:	38c03b26 	beq	r7,r3,4ee0 <_free_r+0x278>
    4df4:	2a000317 	ldw	r8,12(r5)
    4df8:	11400054 	ori	r5,r2,1
    4dfc:	3087883a 	add	r3,r6,r2
    4e00:	3a000315 	stw	r8,12(r7)
    4e04:	41c00215 	stw	r7,8(r8)
    4e08:	31400115 	stw	r5,4(r6)
    4e0c:	18800015 	stw	r2,0(r3)
    4e10:	003fbd06 	br	4d08 <__alt_data_end+0xfffe4d08>
    4e14:	39c0004c 	andi	r7,r7,1
    4e18:	10c5883a 	add	r2,r2,r3
    4e1c:	3800071e 	bne	r7,zero,4e3c <_free_r+0x1d4>
    4e20:	81fffe17 	ldw	r7,-8(r16)
    4e24:	31cdc83a 	sub	r6,r6,r7
    4e28:	30c00317 	ldw	r3,12(r6)
    4e2c:	31400217 	ldw	r5,8(r6)
    4e30:	11c5883a 	add	r2,r2,r7
    4e34:	28c00315 	stw	r3,12(r5)
    4e38:	19400215 	stw	r5,8(r3)
    4e3c:	10c00054 	ori	r3,r2,1
    4e40:	30c00115 	stw	r3,4(r6)
    4e44:	00c00074 	movhi	r3,1
    4e48:	18c56504 	addi	r3,r3,5524
    4e4c:	18c00017 	ldw	r3,0(r3)
    4e50:	21800215 	stw	r6,8(r4)
    4e54:	10ffc036 	bltu	r2,r3,4d58 <__alt_data_end+0xfffe4d58>
    4e58:	00800074 	movhi	r2,1
    4e5c:	108c3104 	addi	r2,r2,12484
    4e60:	11400017 	ldw	r5,0(r2)
    4e64:	8809883a 	mov	r4,r17
    4e68:	0004b440 	call	4b44 <_malloc_trim_r>
    4e6c:	003fba06 	br	4d58 <__alt_data_end+0xfffe4d58>
    4e70:	28c9883a 	add	r4,r5,r3
    4e74:	21000117 	ldw	r4,4(r4)
    4e78:	2100004c 	andi	r4,r4,1
    4e7c:	2000391e 	bne	r4,zero,4f64 <_free_r+0x2fc>
    4e80:	29c00217 	ldw	r7,8(r5)
    4e84:	29000317 	ldw	r4,12(r5)
    4e88:	1885883a 	add	r2,r3,r2
    4e8c:	10c00054 	ori	r3,r2,1
    4e90:	39000315 	stw	r4,12(r7)
    4e94:	21c00215 	stw	r7,8(r4)
    4e98:	30c00115 	stw	r3,4(r6)
    4e9c:	308d883a 	add	r6,r6,r2
    4ea0:	30800015 	stw	r2,0(r6)
    4ea4:	003fac06 	br	4d58 <__alt_data_end+0xfffe4d58>
    4ea8:	00c00504 	movi	r3,20
    4eac:	19401536 	bltu	r3,r5,4f04 <_free_r+0x29c>
    4eb0:	28c01704 	addi	r3,r5,92
    4eb4:	18c7883a 	add	r3,r3,r3
    4eb8:	294016c4 	addi	r5,r5,91
    4ebc:	003fb406 	br	4d90 <__alt_data_end+0xfffe4d90>
    4ec0:	280bd0ba 	srai	r5,r5,2
    4ec4:	00c00044 	movi	r3,1
    4ec8:	38800117 	ldw	r2,4(r7)
    4ecc:	194a983a 	sll	r5,r3,r5
    4ed0:	2007883a 	mov	r3,r4
    4ed4:	2884b03a 	or	r2,r5,r2
    4ed8:	38800115 	stw	r2,4(r7)
    4edc:	003fbb06 	br	4dcc <__alt_data_end+0xfffe4dcc>
    4ee0:	21800515 	stw	r6,20(r4)
    4ee4:	21800415 	stw	r6,16(r4)
    4ee8:	10c00054 	ori	r3,r2,1
    4eec:	31c00315 	stw	r7,12(r6)
    4ef0:	31c00215 	stw	r7,8(r6)
    4ef4:	30c00115 	stw	r3,4(r6)
    4ef8:	308d883a 	add	r6,r6,r2
    4efc:	30800015 	stw	r2,0(r6)
    4f00:	003f9506 	br	4d58 <__alt_data_end+0xfffe4d58>
    4f04:	00c01504 	movi	r3,84
    4f08:	19400536 	bltu	r3,r5,4f20 <_free_r+0x2b8>
    4f0c:	100ad33a 	srli	r5,r2,12
    4f10:	28c01bc4 	addi	r3,r5,111
    4f14:	18c7883a 	add	r3,r3,r3
    4f18:	29401b84 	addi	r5,r5,110
    4f1c:	003f9c06 	br	4d90 <__alt_data_end+0xfffe4d90>
    4f20:	00c05504 	movi	r3,340
    4f24:	19400536 	bltu	r3,r5,4f3c <_free_r+0x2d4>
    4f28:	100ad3fa 	srli	r5,r2,15
    4f2c:	28c01e04 	addi	r3,r5,120
    4f30:	18c7883a 	add	r3,r3,r3
    4f34:	29401dc4 	addi	r5,r5,119
    4f38:	003f9506 	br	4d90 <__alt_data_end+0xfffe4d90>
    4f3c:	00c15504 	movi	r3,1364
    4f40:	19400536 	bltu	r3,r5,4f58 <_free_r+0x2f0>
    4f44:	100ad4ba 	srli	r5,r2,18
    4f48:	28c01f44 	addi	r3,r5,125
    4f4c:	18c7883a 	add	r3,r3,r3
    4f50:	29401f04 	addi	r5,r5,124
    4f54:	003f8e06 	br	4d90 <__alt_data_end+0xfffe4d90>
    4f58:	00c03f84 	movi	r3,254
    4f5c:	01401f84 	movi	r5,126
    4f60:	003f8b06 	br	4d90 <__alt_data_end+0xfffe4d90>
    4f64:	10c00054 	ori	r3,r2,1
    4f68:	30c00115 	stw	r3,4(r6)
    4f6c:	308d883a 	add	r6,r6,r2
    4f70:	30800015 	stw	r2,0(r6)
    4f74:	003f7806 	br	4d58 <__alt_data_end+0xfffe4d58>

00004f78 <__sfvwrite_r>:
    4f78:	30800217 	ldw	r2,8(r6)
    4f7c:	10006726 	beq	r2,zero,511c <__sfvwrite_r+0x1a4>
    4f80:	28c0030b 	ldhu	r3,12(r5)
    4f84:	defff404 	addi	sp,sp,-48
    4f88:	dd400715 	stw	r21,28(sp)
    4f8c:	dd000615 	stw	r20,24(sp)
    4f90:	dc000215 	stw	r16,8(sp)
    4f94:	dfc00b15 	stw	ra,44(sp)
    4f98:	df000a15 	stw	fp,40(sp)
    4f9c:	ddc00915 	stw	r23,36(sp)
    4fa0:	dd800815 	stw	r22,32(sp)
    4fa4:	dcc00515 	stw	r19,20(sp)
    4fa8:	dc800415 	stw	r18,16(sp)
    4fac:	dc400315 	stw	r17,12(sp)
    4fb0:	1880020c 	andi	r2,r3,8
    4fb4:	2821883a 	mov	r16,r5
    4fb8:	202b883a 	mov	r21,r4
    4fbc:	3029883a 	mov	r20,r6
    4fc0:	10002726 	beq	r2,zero,5060 <__sfvwrite_r+0xe8>
    4fc4:	28800417 	ldw	r2,16(r5)
    4fc8:	10002526 	beq	r2,zero,5060 <__sfvwrite_r+0xe8>
    4fcc:	1880008c 	andi	r2,r3,2
    4fd0:	a4400017 	ldw	r17,0(r20)
    4fd4:	10002a26 	beq	r2,zero,5080 <__sfvwrite_r+0x108>
    4fd8:	05a00034 	movhi	r22,32768
    4fdc:	0027883a 	mov	r19,zero
    4fe0:	0025883a 	mov	r18,zero
    4fe4:	b5bf0004 	addi	r22,r22,-1024
    4fe8:	980d883a 	mov	r6,r19
    4fec:	a809883a 	mov	r4,r21
    4ff0:	90004626 	beq	r18,zero,510c <__sfvwrite_r+0x194>
    4ff4:	900f883a 	mov	r7,r18
    4ff8:	b480022e 	bgeu	r22,r18,5004 <__sfvwrite_r+0x8c>
    4ffc:	01e00034 	movhi	r7,32768
    5000:	39ff0004 	addi	r7,r7,-1024
    5004:	80800917 	ldw	r2,36(r16)
    5008:	81400717 	ldw	r5,28(r16)
    500c:	103ee83a 	callr	r2
    5010:	0080570e 	bge	zero,r2,5170 <__sfvwrite_r+0x1f8>
    5014:	a0c00217 	ldw	r3,8(r20)
    5018:	98a7883a 	add	r19,r19,r2
    501c:	90a5c83a 	sub	r18,r18,r2
    5020:	1885c83a 	sub	r2,r3,r2
    5024:	a0800215 	stw	r2,8(r20)
    5028:	103fef1e 	bne	r2,zero,4fe8 <__alt_data_end+0xfffe4fe8>
    502c:	0005883a 	mov	r2,zero
    5030:	dfc00b17 	ldw	ra,44(sp)
    5034:	df000a17 	ldw	fp,40(sp)
    5038:	ddc00917 	ldw	r23,36(sp)
    503c:	dd800817 	ldw	r22,32(sp)
    5040:	dd400717 	ldw	r21,28(sp)
    5044:	dd000617 	ldw	r20,24(sp)
    5048:	dcc00517 	ldw	r19,20(sp)
    504c:	dc800417 	ldw	r18,16(sp)
    5050:	dc400317 	ldw	r17,12(sp)
    5054:	dc000217 	ldw	r16,8(sp)
    5058:	dec00c04 	addi	sp,sp,48
    505c:	f800283a 	ret
    5060:	800b883a 	mov	r5,r16
    5064:	a809883a 	mov	r4,r21
    5068:	0002b200 	call	2b20 <__swsetup_r>
    506c:	1000eb1e 	bne	r2,zero,541c <__sfvwrite_r+0x4a4>
    5070:	80c0030b 	ldhu	r3,12(r16)
    5074:	a4400017 	ldw	r17,0(r20)
    5078:	1880008c 	andi	r2,r3,2
    507c:	103fd61e 	bne	r2,zero,4fd8 <__alt_data_end+0xfffe4fd8>
    5080:	1880004c 	andi	r2,r3,1
    5084:	10003f1e 	bne	r2,zero,5184 <__sfvwrite_r+0x20c>
    5088:	0039883a 	mov	fp,zero
    508c:	0025883a 	mov	r18,zero
    5090:	90001a26 	beq	r18,zero,50fc <__sfvwrite_r+0x184>
    5094:	1880800c 	andi	r2,r3,512
    5098:	84c00217 	ldw	r19,8(r16)
    509c:	10002126 	beq	r2,zero,5124 <__sfvwrite_r+0x1ac>
    50a0:	982f883a 	mov	r23,r19
    50a4:	94c09336 	bltu	r18,r19,52f4 <__sfvwrite_r+0x37c>
    50a8:	1881200c 	andi	r2,r3,1152
    50ac:	10009e1e 	bne	r2,zero,5328 <__sfvwrite_r+0x3b0>
    50b0:	81000017 	ldw	r4,0(r16)
    50b4:	b80d883a 	mov	r6,r23
    50b8:	e00b883a 	mov	r5,fp
    50bc:	000628c0 	call	628c <memmove>
    50c0:	80c00217 	ldw	r3,8(r16)
    50c4:	81000017 	ldw	r4,0(r16)
    50c8:	9005883a 	mov	r2,r18
    50cc:	1ce7c83a 	sub	r19,r3,r19
    50d0:	25cf883a 	add	r7,r4,r23
    50d4:	84c00215 	stw	r19,8(r16)
    50d8:	81c00015 	stw	r7,0(r16)
    50dc:	a0c00217 	ldw	r3,8(r20)
    50e0:	e0b9883a 	add	fp,fp,r2
    50e4:	90a5c83a 	sub	r18,r18,r2
    50e8:	18a7c83a 	sub	r19,r3,r2
    50ec:	a4c00215 	stw	r19,8(r20)
    50f0:	983fce26 	beq	r19,zero,502c <__alt_data_end+0xfffe502c>
    50f4:	80c0030b 	ldhu	r3,12(r16)
    50f8:	903fe61e 	bne	r18,zero,5094 <__alt_data_end+0xfffe5094>
    50fc:	8f000017 	ldw	fp,0(r17)
    5100:	8c800117 	ldw	r18,4(r17)
    5104:	8c400204 	addi	r17,r17,8
    5108:	003fe106 	br	5090 <__alt_data_end+0xfffe5090>
    510c:	8cc00017 	ldw	r19,0(r17)
    5110:	8c800117 	ldw	r18,4(r17)
    5114:	8c400204 	addi	r17,r17,8
    5118:	003fb306 	br	4fe8 <__alt_data_end+0xfffe4fe8>
    511c:	0005883a 	mov	r2,zero
    5120:	f800283a 	ret
    5124:	81000017 	ldw	r4,0(r16)
    5128:	80800417 	ldw	r2,16(r16)
    512c:	11005736 	bltu	r2,r4,528c <__sfvwrite_r+0x314>
    5130:	85c00517 	ldw	r23,20(r16)
    5134:	95c05536 	bltu	r18,r23,528c <__sfvwrite_r+0x314>
    5138:	00a00034 	movhi	r2,32768
    513c:	10bfffc4 	addi	r2,r2,-1
    5140:	9009883a 	mov	r4,r18
    5144:	1480012e 	bgeu	r2,r18,514c <__sfvwrite_r+0x1d4>
    5148:	1009883a 	mov	r4,r2
    514c:	b80b883a 	mov	r5,r23
    5150:	000a77c0 	call	a77c <__divsi3>
    5154:	15cf383a 	mul	r7,r2,r23
    5158:	81400717 	ldw	r5,28(r16)
    515c:	80800917 	ldw	r2,36(r16)
    5160:	e00d883a 	mov	r6,fp
    5164:	a809883a 	mov	r4,r21
    5168:	103ee83a 	callr	r2
    516c:	00bfdb16 	blt	zero,r2,50dc <__alt_data_end+0xfffe50dc>
    5170:	8080030b 	ldhu	r2,12(r16)
    5174:	10801014 	ori	r2,r2,64
    5178:	8080030d 	sth	r2,12(r16)
    517c:	00bfffc4 	movi	r2,-1
    5180:	003fab06 	br	5030 <__alt_data_end+0xfffe5030>
    5184:	0027883a 	mov	r19,zero
    5188:	0011883a 	mov	r8,zero
    518c:	0039883a 	mov	fp,zero
    5190:	0025883a 	mov	r18,zero
    5194:	90001f26 	beq	r18,zero,5214 <__sfvwrite_r+0x29c>
    5198:	40005a26 	beq	r8,zero,5304 <__sfvwrite_r+0x38c>
    519c:	982d883a 	mov	r22,r19
    51a0:	94c0012e 	bgeu	r18,r19,51a8 <__sfvwrite_r+0x230>
    51a4:	902d883a 	mov	r22,r18
    51a8:	81000017 	ldw	r4,0(r16)
    51ac:	80800417 	ldw	r2,16(r16)
    51b0:	b02f883a 	mov	r23,r22
    51b4:	81c00517 	ldw	r7,20(r16)
    51b8:	1100032e 	bgeu	r2,r4,51c8 <__sfvwrite_r+0x250>
    51bc:	80c00217 	ldw	r3,8(r16)
    51c0:	38c7883a 	add	r3,r7,r3
    51c4:	1d801816 	blt	r3,r22,5228 <__sfvwrite_r+0x2b0>
    51c8:	b1c03e16 	blt	r22,r7,52c4 <__sfvwrite_r+0x34c>
    51cc:	80800917 	ldw	r2,36(r16)
    51d0:	81400717 	ldw	r5,28(r16)
    51d4:	e00d883a 	mov	r6,fp
    51d8:	da000115 	stw	r8,4(sp)
    51dc:	a809883a 	mov	r4,r21
    51e0:	103ee83a 	callr	r2
    51e4:	102f883a 	mov	r23,r2
    51e8:	da000117 	ldw	r8,4(sp)
    51ec:	00bfe00e 	bge	zero,r2,5170 <__alt_data_end+0xfffe5170>
    51f0:	9de7c83a 	sub	r19,r19,r23
    51f4:	98001f26 	beq	r19,zero,5274 <__sfvwrite_r+0x2fc>
    51f8:	a0800217 	ldw	r2,8(r20)
    51fc:	e5f9883a 	add	fp,fp,r23
    5200:	95e5c83a 	sub	r18,r18,r23
    5204:	15efc83a 	sub	r23,r2,r23
    5208:	a5c00215 	stw	r23,8(r20)
    520c:	b83f8726 	beq	r23,zero,502c <__alt_data_end+0xfffe502c>
    5210:	903fe11e 	bne	r18,zero,5198 <__alt_data_end+0xfffe5198>
    5214:	8f000017 	ldw	fp,0(r17)
    5218:	8c800117 	ldw	r18,4(r17)
    521c:	0011883a 	mov	r8,zero
    5220:	8c400204 	addi	r17,r17,8
    5224:	003fdb06 	br	5194 <__alt_data_end+0xfffe5194>
    5228:	180d883a 	mov	r6,r3
    522c:	e00b883a 	mov	r5,fp
    5230:	da000115 	stw	r8,4(sp)
    5234:	d8c00015 	stw	r3,0(sp)
    5238:	000628c0 	call	628c <memmove>
    523c:	d8c00017 	ldw	r3,0(sp)
    5240:	80800017 	ldw	r2,0(r16)
    5244:	800b883a 	mov	r5,r16
    5248:	a809883a 	mov	r4,r21
    524c:	10c5883a 	add	r2,r2,r3
    5250:	80800015 	stw	r2,0(r16)
    5254:	d8c00015 	stw	r3,0(sp)
    5258:	00047180 	call	4718 <_fflush_r>
    525c:	d8c00017 	ldw	r3,0(sp)
    5260:	da000117 	ldw	r8,4(sp)
    5264:	103fc21e 	bne	r2,zero,5170 <__alt_data_end+0xfffe5170>
    5268:	182f883a 	mov	r23,r3
    526c:	9de7c83a 	sub	r19,r19,r23
    5270:	983fe11e 	bne	r19,zero,51f8 <__alt_data_end+0xfffe51f8>
    5274:	800b883a 	mov	r5,r16
    5278:	a809883a 	mov	r4,r21
    527c:	00047180 	call	4718 <_fflush_r>
    5280:	103fbb1e 	bne	r2,zero,5170 <__alt_data_end+0xfffe5170>
    5284:	0011883a 	mov	r8,zero
    5288:	003fdb06 	br	51f8 <__alt_data_end+0xfffe51f8>
    528c:	94c0012e 	bgeu	r18,r19,5294 <__sfvwrite_r+0x31c>
    5290:	9027883a 	mov	r19,r18
    5294:	980d883a 	mov	r6,r19
    5298:	e00b883a 	mov	r5,fp
    529c:	000628c0 	call	628c <memmove>
    52a0:	80800217 	ldw	r2,8(r16)
    52a4:	80c00017 	ldw	r3,0(r16)
    52a8:	14c5c83a 	sub	r2,r2,r19
    52ac:	1cc7883a 	add	r3,r3,r19
    52b0:	80800215 	stw	r2,8(r16)
    52b4:	80c00015 	stw	r3,0(r16)
    52b8:	10004326 	beq	r2,zero,53c8 <__sfvwrite_r+0x450>
    52bc:	9805883a 	mov	r2,r19
    52c0:	003f8606 	br	50dc <__alt_data_end+0xfffe50dc>
    52c4:	b00d883a 	mov	r6,r22
    52c8:	e00b883a 	mov	r5,fp
    52cc:	da000115 	stw	r8,4(sp)
    52d0:	000628c0 	call	628c <memmove>
    52d4:	80800217 	ldw	r2,8(r16)
    52d8:	80c00017 	ldw	r3,0(r16)
    52dc:	da000117 	ldw	r8,4(sp)
    52e0:	1585c83a 	sub	r2,r2,r22
    52e4:	1dad883a 	add	r22,r3,r22
    52e8:	80800215 	stw	r2,8(r16)
    52ec:	85800015 	stw	r22,0(r16)
    52f0:	003fbf06 	br	51f0 <__alt_data_end+0xfffe51f0>
    52f4:	81000017 	ldw	r4,0(r16)
    52f8:	9027883a 	mov	r19,r18
    52fc:	902f883a 	mov	r23,r18
    5300:	003f6c06 	br	50b4 <__alt_data_end+0xfffe50b4>
    5304:	900d883a 	mov	r6,r18
    5308:	01400284 	movi	r5,10
    530c:	e009883a 	mov	r4,fp
    5310:	00060600 	call	6060 <memchr>
    5314:	10003e26 	beq	r2,zero,5410 <__sfvwrite_r+0x498>
    5318:	10800044 	addi	r2,r2,1
    531c:	1727c83a 	sub	r19,r2,fp
    5320:	02000044 	movi	r8,1
    5324:	003f9d06 	br	519c <__alt_data_end+0xfffe519c>
    5328:	80800517 	ldw	r2,20(r16)
    532c:	81400417 	ldw	r5,16(r16)
    5330:	81c00017 	ldw	r7,0(r16)
    5334:	10a7883a 	add	r19,r2,r2
    5338:	9885883a 	add	r2,r19,r2
    533c:	1026d7fa 	srli	r19,r2,31
    5340:	396dc83a 	sub	r22,r7,r5
    5344:	b1000044 	addi	r4,r22,1
    5348:	9885883a 	add	r2,r19,r2
    534c:	1027d07a 	srai	r19,r2,1
    5350:	2485883a 	add	r2,r4,r18
    5354:	980d883a 	mov	r6,r19
    5358:	9880022e 	bgeu	r19,r2,5364 <__sfvwrite_r+0x3ec>
    535c:	1027883a 	mov	r19,r2
    5360:	100d883a 	mov	r6,r2
    5364:	18c1000c 	andi	r3,r3,1024
    5368:	18001c26 	beq	r3,zero,53dc <__sfvwrite_r+0x464>
    536c:	300b883a 	mov	r5,r6
    5370:	a809883a 	mov	r4,r21
    5374:	00058540 	call	5854 <_malloc_r>
    5378:	102f883a 	mov	r23,r2
    537c:	10002926 	beq	r2,zero,5424 <__sfvwrite_r+0x4ac>
    5380:	81400417 	ldw	r5,16(r16)
    5384:	b00d883a 	mov	r6,r22
    5388:	1009883a 	mov	r4,r2
    538c:	00061440 	call	6144 <memcpy>
    5390:	8080030b 	ldhu	r2,12(r16)
    5394:	00fedfc4 	movi	r3,-1153
    5398:	10c4703a 	and	r2,r2,r3
    539c:	10802014 	ori	r2,r2,128
    53a0:	8080030d 	sth	r2,12(r16)
    53a4:	bd89883a 	add	r4,r23,r22
    53a8:	9d8fc83a 	sub	r7,r19,r22
    53ac:	85c00415 	stw	r23,16(r16)
    53b0:	84c00515 	stw	r19,20(r16)
    53b4:	81000015 	stw	r4,0(r16)
    53b8:	9027883a 	mov	r19,r18
    53bc:	81c00215 	stw	r7,8(r16)
    53c0:	902f883a 	mov	r23,r18
    53c4:	003f3b06 	br	50b4 <__alt_data_end+0xfffe50b4>
    53c8:	800b883a 	mov	r5,r16
    53cc:	a809883a 	mov	r4,r21
    53d0:	00047180 	call	4718 <_fflush_r>
    53d4:	103fb926 	beq	r2,zero,52bc <__alt_data_end+0xfffe52bc>
    53d8:	003f6506 	br	5170 <__alt_data_end+0xfffe5170>
    53dc:	a809883a 	mov	r4,r21
    53e0:	000750c0 	call	750c <_realloc_r>
    53e4:	102f883a 	mov	r23,r2
    53e8:	103fee1e 	bne	r2,zero,53a4 <__alt_data_end+0xfffe53a4>
    53ec:	81400417 	ldw	r5,16(r16)
    53f0:	a809883a 	mov	r4,r21
    53f4:	0004c680 	call	4c68 <_free_r>
    53f8:	8080030b 	ldhu	r2,12(r16)
    53fc:	00ffdfc4 	movi	r3,-129
    5400:	1884703a 	and	r2,r3,r2
    5404:	00c00304 	movi	r3,12
    5408:	a8c00015 	stw	r3,0(r21)
    540c:	003f5906 	br	5174 <__alt_data_end+0xfffe5174>
    5410:	94c00044 	addi	r19,r18,1
    5414:	02000044 	movi	r8,1
    5418:	003f6006 	br	519c <__alt_data_end+0xfffe519c>
    541c:	00bfffc4 	movi	r2,-1
    5420:	003f0306 	br	5030 <__alt_data_end+0xfffe5030>
    5424:	00800304 	movi	r2,12
    5428:	a8800015 	stw	r2,0(r21)
    542c:	8080030b 	ldhu	r2,12(r16)
    5430:	003f5006 	br	5174 <__alt_data_end+0xfffe5174>

00005434 <_fwalk>:
    5434:	defff704 	addi	sp,sp,-36
    5438:	dd000415 	stw	r20,16(sp)
    543c:	dfc00815 	stw	ra,32(sp)
    5440:	ddc00715 	stw	r23,28(sp)
    5444:	dd800615 	stw	r22,24(sp)
    5448:	dd400515 	stw	r21,20(sp)
    544c:	dcc00315 	stw	r19,12(sp)
    5450:	dc800215 	stw	r18,8(sp)
    5454:	dc400115 	stw	r17,4(sp)
    5458:	dc000015 	stw	r16,0(sp)
    545c:	2500b804 	addi	r20,r4,736
    5460:	a0002326 	beq	r20,zero,54f0 <_fwalk+0xbc>
    5464:	282b883a 	mov	r21,r5
    5468:	002f883a 	mov	r23,zero
    546c:	05800044 	movi	r22,1
    5470:	04ffffc4 	movi	r19,-1
    5474:	a4400117 	ldw	r17,4(r20)
    5478:	a4800217 	ldw	r18,8(r20)
    547c:	8c7fffc4 	addi	r17,r17,-1
    5480:	88000d16 	blt	r17,zero,54b8 <_fwalk+0x84>
    5484:	94000304 	addi	r16,r18,12
    5488:	94800384 	addi	r18,r18,14
    548c:	8080000b 	ldhu	r2,0(r16)
    5490:	8c7fffc4 	addi	r17,r17,-1
    5494:	813ffd04 	addi	r4,r16,-12
    5498:	b080042e 	bgeu	r22,r2,54ac <_fwalk+0x78>
    549c:	9080000f 	ldh	r2,0(r18)
    54a0:	14c00226 	beq	r2,r19,54ac <_fwalk+0x78>
    54a4:	a83ee83a 	callr	r21
    54a8:	b8aeb03a 	or	r23,r23,r2
    54ac:	84001a04 	addi	r16,r16,104
    54b0:	94801a04 	addi	r18,r18,104
    54b4:	8cfff51e 	bne	r17,r19,548c <__alt_data_end+0xfffe548c>
    54b8:	a5000017 	ldw	r20,0(r20)
    54bc:	a03fed1e 	bne	r20,zero,5474 <__alt_data_end+0xfffe5474>
    54c0:	b805883a 	mov	r2,r23
    54c4:	dfc00817 	ldw	ra,32(sp)
    54c8:	ddc00717 	ldw	r23,28(sp)
    54cc:	dd800617 	ldw	r22,24(sp)
    54d0:	dd400517 	ldw	r21,20(sp)
    54d4:	dd000417 	ldw	r20,16(sp)
    54d8:	dcc00317 	ldw	r19,12(sp)
    54dc:	dc800217 	ldw	r18,8(sp)
    54e0:	dc400117 	ldw	r17,4(sp)
    54e4:	dc000017 	ldw	r16,0(sp)
    54e8:	dec00904 	addi	sp,sp,36
    54ec:	f800283a 	ret
    54f0:	002f883a 	mov	r23,zero
    54f4:	003ff206 	br	54c0 <__alt_data_end+0xfffe54c0>

000054f8 <_fwalk_reent>:
    54f8:	defff704 	addi	sp,sp,-36
    54fc:	dd000415 	stw	r20,16(sp)
    5500:	dfc00815 	stw	ra,32(sp)
    5504:	ddc00715 	stw	r23,28(sp)
    5508:	dd800615 	stw	r22,24(sp)
    550c:	dd400515 	stw	r21,20(sp)
    5510:	dcc00315 	stw	r19,12(sp)
    5514:	dc800215 	stw	r18,8(sp)
    5518:	dc400115 	stw	r17,4(sp)
    551c:	dc000015 	stw	r16,0(sp)
    5520:	2500b804 	addi	r20,r4,736
    5524:	a0002326 	beq	r20,zero,55b4 <_fwalk_reent+0xbc>
    5528:	282b883a 	mov	r21,r5
    552c:	2027883a 	mov	r19,r4
    5530:	002f883a 	mov	r23,zero
    5534:	05800044 	movi	r22,1
    5538:	04bfffc4 	movi	r18,-1
    553c:	a4400117 	ldw	r17,4(r20)
    5540:	a4000217 	ldw	r16,8(r20)
    5544:	8c7fffc4 	addi	r17,r17,-1
    5548:	88000c16 	blt	r17,zero,557c <_fwalk_reent+0x84>
    554c:	84000304 	addi	r16,r16,12
    5550:	8080000b 	ldhu	r2,0(r16)
    5554:	8c7fffc4 	addi	r17,r17,-1
    5558:	817ffd04 	addi	r5,r16,-12
    555c:	b080052e 	bgeu	r22,r2,5574 <_fwalk_reent+0x7c>
    5560:	8080008f 	ldh	r2,2(r16)
    5564:	9809883a 	mov	r4,r19
    5568:	14800226 	beq	r2,r18,5574 <_fwalk_reent+0x7c>
    556c:	a83ee83a 	callr	r21
    5570:	b8aeb03a 	or	r23,r23,r2
    5574:	84001a04 	addi	r16,r16,104
    5578:	8cbff51e 	bne	r17,r18,5550 <__alt_data_end+0xfffe5550>
    557c:	a5000017 	ldw	r20,0(r20)
    5580:	a03fee1e 	bne	r20,zero,553c <__alt_data_end+0xfffe553c>
    5584:	b805883a 	mov	r2,r23
    5588:	dfc00817 	ldw	ra,32(sp)
    558c:	ddc00717 	ldw	r23,28(sp)
    5590:	dd800617 	ldw	r22,24(sp)
    5594:	dd400517 	ldw	r21,20(sp)
    5598:	dd000417 	ldw	r20,16(sp)
    559c:	dcc00317 	ldw	r19,12(sp)
    55a0:	dc800217 	ldw	r18,8(sp)
    55a4:	dc400117 	ldw	r17,4(sp)
    55a8:	dc000017 	ldw	r16,0(sp)
    55ac:	dec00904 	addi	sp,sp,36
    55b0:	f800283a 	ret
    55b4:	002f883a 	mov	r23,zero
    55b8:	003ff206 	br	5584 <__alt_data_end+0xfffe5584>

000055bc <_setlocale_r>:
    55bc:	30001b26 	beq	r6,zero,562c <_setlocale_r+0x70>
    55c0:	01400074 	movhi	r5,1
    55c4:	defffe04 	addi	sp,sp,-8
    55c8:	297e1504 	addi	r5,r5,-1964
    55cc:	3009883a 	mov	r4,r6
    55d0:	dc000015 	stw	r16,0(sp)
    55d4:	dfc00115 	stw	ra,4(sp)
    55d8:	3021883a 	mov	r16,r6
    55dc:	0007c740 	call	7c74 <strcmp>
    55e0:	1000061e 	bne	r2,zero,55fc <_setlocale_r+0x40>
    55e4:	00800074 	movhi	r2,1
    55e8:	10be1404 	addi	r2,r2,-1968
    55ec:	dfc00117 	ldw	ra,4(sp)
    55f0:	dc000017 	ldw	r16,0(sp)
    55f4:	dec00204 	addi	sp,sp,8
    55f8:	f800283a 	ret
    55fc:	01400074 	movhi	r5,1
    5600:	297e1404 	addi	r5,r5,-1968
    5604:	8009883a 	mov	r4,r16
    5608:	0007c740 	call	7c74 <strcmp>
    560c:	103ff526 	beq	r2,zero,55e4 <__alt_data_end+0xfffe55e4>
    5610:	01400074 	movhi	r5,1
    5614:	297dff04 	addi	r5,r5,-2052
    5618:	8009883a 	mov	r4,r16
    561c:	0007c740 	call	7c74 <strcmp>
    5620:	103ff026 	beq	r2,zero,55e4 <__alt_data_end+0xfffe55e4>
    5624:	0005883a 	mov	r2,zero
    5628:	003ff006 	br	55ec <__alt_data_end+0xfffe55ec>
    562c:	00800074 	movhi	r2,1
    5630:	10be1404 	addi	r2,r2,-1968
    5634:	f800283a 	ret

00005638 <__locale_charset>:
    5638:	00800074 	movhi	r2,1
    563c:	10bfc704 	addi	r2,r2,-228
    5640:	f800283a 	ret

00005644 <__locale_mb_cur_max>:
    5644:	00800074 	movhi	r2,1
    5648:	10856304 	addi	r2,r2,5516
    564c:	10800017 	ldw	r2,0(r2)
    5650:	f800283a 	ret

00005654 <__locale_msgcharset>:
    5654:	00800074 	movhi	r2,1
    5658:	10bfbf04 	addi	r2,r2,-260
    565c:	f800283a 	ret

00005660 <__locale_cjk_lang>:
    5660:	0005883a 	mov	r2,zero
    5664:	f800283a 	ret

00005668 <_localeconv_r>:
    5668:	00800074 	movhi	r2,1
    566c:	10bfcf04 	addi	r2,r2,-196
    5670:	f800283a 	ret

00005674 <setlocale>:
    5674:	00800074 	movhi	r2,1
    5678:	10856204 	addi	r2,r2,5512
    567c:	280d883a 	mov	r6,r5
    5680:	200b883a 	mov	r5,r4
    5684:	11000017 	ldw	r4,0(r2)
    5688:	00055bc1 	jmpi	55bc <_setlocale_r>

0000568c <localeconv>:
    568c:	00800074 	movhi	r2,1
    5690:	10bfcf04 	addi	r2,r2,-196
    5694:	f800283a 	ret

00005698 <__smakebuf_r>:
    5698:	2880030b 	ldhu	r2,12(r5)
    569c:	10c0008c 	andi	r3,r2,2
    56a0:	1800411e 	bne	r3,zero,57a8 <__smakebuf_r+0x110>
    56a4:	deffec04 	addi	sp,sp,-80
    56a8:	dc000f15 	stw	r16,60(sp)
    56ac:	2821883a 	mov	r16,r5
    56b0:	2940038f 	ldh	r5,14(r5)
    56b4:	dc401015 	stw	r17,64(sp)
    56b8:	dfc01315 	stw	ra,76(sp)
    56bc:	dcc01215 	stw	r19,72(sp)
    56c0:	dc801115 	stw	r18,68(sp)
    56c4:	2023883a 	mov	r17,r4
    56c8:	28001c16 	blt	r5,zero,573c <__smakebuf_r+0xa4>
    56cc:	d80d883a 	mov	r6,sp
    56d0:	000981c0 	call	981c <_fstat_r>
    56d4:	10001816 	blt	r2,zero,5738 <__smakebuf_r+0xa0>
    56d8:	d8800117 	ldw	r2,4(sp)
    56dc:	00e00014 	movui	r3,32768
    56e0:	10bc000c 	andi	r2,r2,61440
    56e4:	14c80020 	cmpeqi	r19,r2,8192
    56e8:	10c03726 	beq	r2,r3,57c8 <__smakebuf_r+0x130>
    56ec:	80c0030b 	ldhu	r3,12(r16)
    56f0:	18c20014 	ori	r3,r3,2048
    56f4:	80c0030d 	sth	r3,12(r16)
    56f8:	00c80004 	movi	r3,8192
    56fc:	10c0521e 	bne	r2,r3,5848 <__smakebuf_r+0x1b0>
    5700:	8140038f 	ldh	r5,14(r16)
    5704:	8809883a 	mov	r4,r17
    5708:	00098780 	call	9878 <_isatty_r>
    570c:	10004c26 	beq	r2,zero,5840 <__smakebuf_r+0x1a8>
    5710:	8080030b 	ldhu	r2,12(r16)
    5714:	80c010c4 	addi	r3,r16,67
    5718:	80c00015 	stw	r3,0(r16)
    571c:	10800054 	ori	r2,r2,1
    5720:	8080030d 	sth	r2,12(r16)
    5724:	00800044 	movi	r2,1
    5728:	80c00415 	stw	r3,16(r16)
    572c:	80800515 	stw	r2,20(r16)
    5730:	04810004 	movi	r18,1024
    5734:	00000706 	br	5754 <__smakebuf_r+0xbc>
    5738:	8080030b 	ldhu	r2,12(r16)
    573c:	10c0200c 	andi	r3,r2,128
    5740:	18001f1e 	bne	r3,zero,57c0 <__smakebuf_r+0x128>
    5744:	04810004 	movi	r18,1024
    5748:	10820014 	ori	r2,r2,2048
    574c:	8080030d 	sth	r2,12(r16)
    5750:	0027883a 	mov	r19,zero
    5754:	900b883a 	mov	r5,r18
    5758:	8809883a 	mov	r4,r17
    575c:	00058540 	call	5854 <_malloc_r>
    5760:	10002c26 	beq	r2,zero,5814 <__smakebuf_r+0x17c>
    5764:	80c0030b 	ldhu	r3,12(r16)
    5768:	01000034 	movhi	r4,0
    576c:	2111eb04 	addi	r4,r4,18348
    5770:	89000f15 	stw	r4,60(r17)
    5774:	18c02014 	ori	r3,r3,128
    5778:	80c0030d 	sth	r3,12(r16)
    577c:	80800015 	stw	r2,0(r16)
    5780:	80800415 	stw	r2,16(r16)
    5784:	84800515 	stw	r18,20(r16)
    5788:	98001a1e 	bne	r19,zero,57f4 <__smakebuf_r+0x15c>
    578c:	dfc01317 	ldw	ra,76(sp)
    5790:	dcc01217 	ldw	r19,72(sp)
    5794:	dc801117 	ldw	r18,68(sp)
    5798:	dc401017 	ldw	r17,64(sp)
    579c:	dc000f17 	ldw	r16,60(sp)
    57a0:	dec01404 	addi	sp,sp,80
    57a4:	f800283a 	ret
    57a8:	288010c4 	addi	r2,r5,67
    57ac:	28800015 	stw	r2,0(r5)
    57b0:	28800415 	stw	r2,16(r5)
    57b4:	00800044 	movi	r2,1
    57b8:	28800515 	stw	r2,20(r5)
    57bc:	f800283a 	ret
    57c0:	04801004 	movi	r18,64
    57c4:	003fe006 	br	5748 <__alt_data_end+0xfffe5748>
    57c8:	81000a17 	ldw	r4,40(r16)
    57cc:	00c00034 	movhi	r3,0
    57d0:	18df0404 	addi	r3,r3,31760
    57d4:	20ffc51e 	bne	r4,r3,56ec <__alt_data_end+0xfffe56ec>
    57d8:	8080030b 	ldhu	r2,12(r16)
    57dc:	04810004 	movi	r18,1024
    57e0:	84801315 	stw	r18,76(r16)
    57e4:	1484b03a 	or	r2,r2,r18
    57e8:	8080030d 	sth	r2,12(r16)
    57ec:	0027883a 	mov	r19,zero
    57f0:	003fd806 	br	5754 <__alt_data_end+0xfffe5754>
    57f4:	8140038f 	ldh	r5,14(r16)
    57f8:	8809883a 	mov	r4,r17
    57fc:	00098780 	call	9878 <_isatty_r>
    5800:	103fe226 	beq	r2,zero,578c <__alt_data_end+0xfffe578c>
    5804:	8080030b 	ldhu	r2,12(r16)
    5808:	10800054 	ori	r2,r2,1
    580c:	8080030d 	sth	r2,12(r16)
    5810:	003fde06 	br	578c <__alt_data_end+0xfffe578c>
    5814:	8080030b 	ldhu	r2,12(r16)
    5818:	10c0800c 	andi	r3,r2,512
    581c:	183fdb1e 	bne	r3,zero,578c <__alt_data_end+0xfffe578c>
    5820:	10800094 	ori	r2,r2,2
    5824:	80c010c4 	addi	r3,r16,67
    5828:	8080030d 	sth	r2,12(r16)
    582c:	00800044 	movi	r2,1
    5830:	80c00015 	stw	r3,0(r16)
    5834:	80c00415 	stw	r3,16(r16)
    5838:	80800515 	stw	r2,20(r16)
    583c:	003fd306 	br	578c <__alt_data_end+0xfffe578c>
    5840:	04810004 	movi	r18,1024
    5844:	003fc306 	br	5754 <__alt_data_end+0xfffe5754>
    5848:	0027883a 	mov	r19,zero
    584c:	04810004 	movi	r18,1024
    5850:	003fc006 	br	5754 <__alt_data_end+0xfffe5754>

00005854 <_malloc_r>:
    5854:	defff504 	addi	sp,sp,-44
    5858:	dc800315 	stw	r18,12(sp)
    585c:	dfc00a15 	stw	ra,40(sp)
    5860:	df000915 	stw	fp,36(sp)
    5864:	ddc00815 	stw	r23,32(sp)
    5868:	dd800715 	stw	r22,28(sp)
    586c:	dd400615 	stw	r21,24(sp)
    5870:	dd000515 	stw	r20,20(sp)
    5874:	dcc00415 	stw	r19,16(sp)
    5878:	dc400215 	stw	r17,8(sp)
    587c:	dc000115 	stw	r16,4(sp)
    5880:	288002c4 	addi	r2,r5,11
    5884:	00c00584 	movi	r3,22
    5888:	2025883a 	mov	r18,r4
    588c:	18807f2e 	bgeu	r3,r2,5a8c <_malloc_r+0x238>
    5890:	047ffe04 	movi	r17,-8
    5894:	1462703a 	and	r17,r2,r17
    5898:	8800a316 	blt	r17,zero,5b28 <_malloc_r+0x2d4>
    589c:	8940a236 	bltu	r17,r5,5b28 <_malloc_r+0x2d4>
    58a0:	000d5140 	call	d514 <__malloc_lock>
    58a4:	00807dc4 	movi	r2,503
    58a8:	1441e92e 	bgeu	r2,r17,6050 <_malloc_r+0x7fc>
    58ac:	8804d27a 	srli	r2,r17,9
    58b0:	1000a126 	beq	r2,zero,5b38 <_malloc_r+0x2e4>
    58b4:	00c00104 	movi	r3,4
    58b8:	18811e36 	bltu	r3,r2,5d34 <_malloc_r+0x4e0>
    58bc:	8804d1ba 	srli	r2,r17,6
    58c0:	12000e44 	addi	r8,r2,57
    58c4:	11c00e04 	addi	r7,r2,56
    58c8:	4209883a 	add	r4,r8,r8
    58cc:	04c00074 	movhi	r19,1
    58d0:	2109883a 	add	r4,r4,r4
    58d4:	9cffdd04 	addi	r19,r19,-140
    58d8:	2109883a 	add	r4,r4,r4
    58dc:	9909883a 	add	r4,r19,r4
    58e0:	24000117 	ldw	r16,4(r4)
    58e4:	213ffe04 	addi	r4,r4,-8
    58e8:	24009726 	beq	r4,r16,5b48 <_malloc_r+0x2f4>
    58ec:	80800117 	ldw	r2,4(r16)
    58f0:	01bfff04 	movi	r6,-4
    58f4:	014003c4 	movi	r5,15
    58f8:	1184703a 	and	r2,r2,r6
    58fc:	1447c83a 	sub	r3,r2,r17
    5900:	28c00716 	blt	r5,r3,5920 <_malloc_r+0xcc>
    5904:	1800920e 	bge	r3,zero,5b50 <_malloc_r+0x2fc>
    5908:	84000317 	ldw	r16,12(r16)
    590c:	24008e26 	beq	r4,r16,5b48 <_malloc_r+0x2f4>
    5910:	80800117 	ldw	r2,4(r16)
    5914:	1184703a 	and	r2,r2,r6
    5918:	1447c83a 	sub	r3,r2,r17
    591c:	28fff90e 	bge	r5,r3,5904 <__alt_data_end+0xfffe5904>
    5920:	3809883a 	mov	r4,r7
    5924:	01800074 	movhi	r6,1
    5928:	9c000417 	ldw	r16,16(r19)
    592c:	31bfdd04 	addi	r6,r6,-140
    5930:	32000204 	addi	r8,r6,8
    5934:	82013426 	beq	r16,r8,5e08 <_malloc_r+0x5b4>
    5938:	80c00117 	ldw	r3,4(r16)
    593c:	00bfff04 	movi	r2,-4
    5940:	188e703a 	and	r7,r3,r2
    5944:	3c45c83a 	sub	r2,r7,r17
    5948:	00c003c4 	movi	r3,15
    594c:	18811f16 	blt	r3,r2,5dcc <_malloc_r+0x578>
    5950:	32000515 	stw	r8,20(r6)
    5954:	32000415 	stw	r8,16(r6)
    5958:	10007f0e 	bge	r2,zero,5b58 <_malloc_r+0x304>
    595c:	00807fc4 	movi	r2,511
    5960:	11c0fd36 	bltu	r2,r7,5d58 <_malloc_r+0x504>
    5964:	3806d0fa 	srli	r3,r7,3
    5968:	01c00044 	movi	r7,1
    596c:	30800117 	ldw	r2,4(r6)
    5970:	19400044 	addi	r5,r3,1
    5974:	294b883a 	add	r5,r5,r5
    5978:	1807d0ba 	srai	r3,r3,2
    597c:	294b883a 	add	r5,r5,r5
    5980:	294b883a 	add	r5,r5,r5
    5984:	298b883a 	add	r5,r5,r6
    5988:	38c6983a 	sll	r3,r7,r3
    598c:	29c00017 	ldw	r7,0(r5)
    5990:	2a7ffe04 	addi	r9,r5,-8
    5994:	1886b03a 	or	r3,r3,r2
    5998:	82400315 	stw	r9,12(r16)
    599c:	81c00215 	stw	r7,8(r16)
    59a0:	30c00115 	stw	r3,4(r6)
    59a4:	2c000015 	stw	r16,0(r5)
    59a8:	3c000315 	stw	r16,12(r7)
    59ac:	2005d0ba 	srai	r2,r4,2
    59b0:	01400044 	movi	r5,1
    59b4:	288a983a 	sll	r5,r5,r2
    59b8:	19406f36 	bltu	r3,r5,5b78 <_malloc_r+0x324>
    59bc:	28c4703a 	and	r2,r5,r3
    59c0:	10000a1e 	bne	r2,zero,59ec <_malloc_r+0x198>
    59c4:	00bfff04 	movi	r2,-4
    59c8:	294b883a 	add	r5,r5,r5
    59cc:	2088703a 	and	r4,r4,r2
    59d0:	28c4703a 	and	r2,r5,r3
    59d4:	21000104 	addi	r4,r4,4
    59d8:	1000041e 	bne	r2,zero,59ec <_malloc_r+0x198>
    59dc:	294b883a 	add	r5,r5,r5
    59e0:	28c4703a 	and	r2,r5,r3
    59e4:	21000104 	addi	r4,r4,4
    59e8:	103ffc26 	beq	r2,zero,59dc <__alt_data_end+0xfffe59dc>
    59ec:	02bfff04 	movi	r10,-4
    59f0:	024003c4 	movi	r9,15
    59f4:	21800044 	addi	r6,r4,1
    59f8:	318d883a 	add	r6,r6,r6
    59fc:	318d883a 	add	r6,r6,r6
    5a00:	318d883a 	add	r6,r6,r6
    5a04:	998d883a 	add	r6,r19,r6
    5a08:	333ffe04 	addi	r12,r6,-8
    5a0c:	2017883a 	mov	r11,r4
    5a10:	31800104 	addi	r6,r6,4
    5a14:	34000017 	ldw	r16,0(r6)
    5a18:	31fffd04 	addi	r7,r6,-12
    5a1c:	81c0041e 	bne	r16,r7,5a30 <_malloc_r+0x1dc>
    5a20:	0000fb06 	br	5e10 <_malloc_r+0x5bc>
    5a24:	1801030e 	bge	r3,zero,5e34 <_malloc_r+0x5e0>
    5a28:	84000317 	ldw	r16,12(r16)
    5a2c:	81c0f826 	beq	r16,r7,5e10 <_malloc_r+0x5bc>
    5a30:	80800117 	ldw	r2,4(r16)
    5a34:	1284703a 	and	r2,r2,r10
    5a38:	1447c83a 	sub	r3,r2,r17
    5a3c:	48fff90e 	bge	r9,r3,5a24 <__alt_data_end+0xfffe5a24>
    5a40:	80800317 	ldw	r2,12(r16)
    5a44:	81000217 	ldw	r4,8(r16)
    5a48:	89400054 	ori	r5,r17,1
    5a4c:	81400115 	stw	r5,4(r16)
    5a50:	20800315 	stw	r2,12(r4)
    5a54:	11000215 	stw	r4,8(r2)
    5a58:	8463883a 	add	r17,r16,r17
    5a5c:	9c400515 	stw	r17,20(r19)
    5a60:	9c400415 	stw	r17,16(r19)
    5a64:	18800054 	ori	r2,r3,1
    5a68:	88800115 	stw	r2,4(r17)
    5a6c:	8a000315 	stw	r8,12(r17)
    5a70:	8a000215 	stw	r8,8(r17)
    5a74:	88e3883a 	add	r17,r17,r3
    5a78:	88c00015 	stw	r3,0(r17)
    5a7c:	9009883a 	mov	r4,r18
    5a80:	000d5380 	call	d538 <__malloc_unlock>
    5a84:	80800204 	addi	r2,r16,8
    5a88:	00001b06 	br	5af8 <_malloc_r+0x2a4>
    5a8c:	04400404 	movi	r17,16
    5a90:	89402536 	bltu	r17,r5,5b28 <_malloc_r+0x2d4>
    5a94:	000d5140 	call	d514 <__malloc_lock>
    5a98:	00800184 	movi	r2,6
    5a9c:	01000084 	movi	r4,2
    5aa0:	04c00074 	movhi	r19,1
    5aa4:	1085883a 	add	r2,r2,r2
    5aa8:	9cffdd04 	addi	r19,r19,-140
    5aac:	1085883a 	add	r2,r2,r2
    5ab0:	9885883a 	add	r2,r19,r2
    5ab4:	14000117 	ldw	r16,4(r2)
    5ab8:	10fffe04 	addi	r3,r2,-8
    5abc:	80c0d926 	beq	r16,r3,5e24 <_malloc_r+0x5d0>
    5ac0:	80c00117 	ldw	r3,4(r16)
    5ac4:	81000317 	ldw	r4,12(r16)
    5ac8:	00bfff04 	movi	r2,-4
    5acc:	1884703a 	and	r2,r3,r2
    5ad0:	81400217 	ldw	r5,8(r16)
    5ad4:	8085883a 	add	r2,r16,r2
    5ad8:	10c00117 	ldw	r3,4(r2)
    5adc:	29000315 	stw	r4,12(r5)
    5ae0:	21400215 	stw	r5,8(r4)
    5ae4:	18c00054 	ori	r3,r3,1
    5ae8:	10c00115 	stw	r3,4(r2)
    5aec:	9009883a 	mov	r4,r18
    5af0:	000d5380 	call	d538 <__malloc_unlock>
    5af4:	80800204 	addi	r2,r16,8
    5af8:	dfc00a17 	ldw	ra,40(sp)
    5afc:	df000917 	ldw	fp,36(sp)
    5b00:	ddc00817 	ldw	r23,32(sp)
    5b04:	dd800717 	ldw	r22,28(sp)
    5b08:	dd400617 	ldw	r21,24(sp)
    5b0c:	dd000517 	ldw	r20,20(sp)
    5b10:	dcc00417 	ldw	r19,16(sp)
    5b14:	dc800317 	ldw	r18,12(sp)
    5b18:	dc400217 	ldw	r17,8(sp)
    5b1c:	dc000117 	ldw	r16,4(sp)
    5b20:	dec00b04 	addi	sp,sp,44
    5b24:	f800283a 	ret
    5b28:	00800304 	movi	r2,12
    5b2c:	90800015 	stw	r2,0(r18)
    5b30:	0005883a 	mov	r2,zero
    5b34:	003ff006 	br	5af8 <__alt_data_end+0xfffe5af8>
    5b38:	01002004 	movi	r4,128
    5b3c:	02001004 	movi	r8,64
    5b40:	01c00fc4 	movi	r7,63
    5b44:	003f6106 	br	58cc <__alt_data_end+0xfffe58cc>
    5b48:	4009883a 	mov	r4,r8
    5b4c:	003f7506 	br	5924 <__alt_data_end+0xfffe5924>
    5b50:	81000317 	ldw	r4,12(r16)
    5b54:	003fde06 	br	5ad0 <__alt_data_end+0xfffe5ad0>
    5b58:	81c5883a 	add	r2,r16,r7
    5b5c:	11400117 	ldw	r5,4(r2)
    5b60:	9009883a 	mov	r4,r18
    5b64:	29400054 	ori	r5,r5,1
    5b68:	11400115 	stw	r5,4(r2)
    5b6c:	000d5380 	call	d538 <__malloc_unlock>
    5b70:	80800204 	addi	r2,r16,8
    5b74:	003fe006 	br	5af8 <__alt_data_end+0xfffe5af8>
    5b78:	9c000217 	ldw	r16,8(r19)
    5b7c:	00bfff04 	movi	r2,-4
    5b80:	85800117 	ldw	r22,4(r16)
    5b84:	b0ac703a 	and	r22,r22,r2
    5b88:	b4400336 	bltu	r22,r17,5b98 <_malloc_r+0x344>
    5b8c:	b445c83a 	sub	r2,r22,r17
    5b90:	00c003c4 	movi	r3,15
    5b94:	18805d16 	blt	r3,r2,5d0c <_malloc_r+0x4b8>
    5b98:	05c00074 	movhi	r23,1
    5b9c:	00800074 	movhi	r2,1
    5ba0:	108c3104 	addi	r2,r2,12484
    5ba4:	bdc56404 	addi	r23,r23,5520
    5ba8:	15400017 	ldw	r21,0(r2)
    5bac:	b8c00017 	ldw	r3,0(r23)
    5bb0:	00bfffc4 	movi	r2,-1
    5bb4:	858d883a 	add	r6,r16,r22
    5bb8:	8d6b883a 	add	r21,r17,r21
    5bbc:	1880ea26 	beq	r3,r2,5f68 <_malloc_r+0x714>
    5bc0:	ad4403c4 	addi	r21,r21,4111
    5bc4:	00bc0004 	movi	r2,-4096
    5bc8:	a8aa703a 	and	r21,r21,r2
    5bcc:	a80b883a 	mov	r5,r21
    5bd0:	9009883a 	mov	r4,r18
    5bd4:	d9800015 	stw	r6,0(sp)
    5bd8:	0007ae40 	call	7ae4 <_sbrk_r>
    5bdc:	1029883a 	mov	r20,r2
    5be0:	00bfffc4 	movi	r2,-1
    5be4:	d9800017 	ldw	r6,0(sp)
    5be8:	a080e826 	beq	r20,r2,5f8c <_malloc_r+0x738>
    5bec:	a180a636 	bltu	r20,r6,5e88 <_malloc_r+0x634>
    5bf0:	07000074 	movhi	fp,1
    5bf4:	e70c3a04 	addi	fp,fp,12520
    5bf8:	e0800017 	ldw	r2,0(fp)
    5bfc:	a887883a 	add	r3,r21,r2
    5c00:	e0c00015 	stw	r3,0(fp)
    5c04:	3500e626 	beq	r6,r20,5fa0 <_malloc_r+0x74c>
    5c08:	b9000017 	ldw	r4,0(r23)
    5c0c:	00bfffc4 	movi	r2,-1
    5c10:	2080ee26 	beq	r4,r2,5fcc <_malloc_r+0x778>
    5c14:	a185c83a 	sub	r2,r20,r6
    5c18:	10c5883a 	add	r2,r2,r3
    5c1c:	e0800015 	stw	r2,0(fp)
    5c20:	a0c001cc 	andi	r3,r20,7
    5c24:	1800bc26 	beq	r3,zero,5f18 <_malloc_r+0x6c4>
    5c28:	a0e9c83a 	sub	r20,r20,r3
    5c2c:	00840204 	movi	r2,4104
    5c30:	a5000204 	addi	r20,r20,8
    5c34:	10c7c83a 	sub	r3,r2,r3
    5c38:	a545883a 	add	r2,r20,r21
    5c3c:	1083ffcc 	andi	r2,r2,4095
    5c40:	18abc83a 	sub	r21,r3,r2
    5c44:	a80b883a 	mov	r5,r21
    5c48:	9009883a 	mov	r4,r18
    5c4c:	0007ae40 	call	7ae4 <_sbrk_r>
    5c50:	00ffffc4 	movi	r3,-1
    5c54:	10c0e126 	beq	r2,r3,5fdc <_malloc_r+0x788>
    5c58:	1505c83a 	sub	r2,r2,r20
    5c5c:	1545883a 	add	r2,r2,r21
    5c60:	10800054 	ori	r2,r2,1
    5c64:	e0c00017 	ldw	r3,0(fp)
    5c68:	9d000215 	stw	r20,8(r19)
    5c6c:	a0800115 	stw	r2,4(r20)
    5c70:	a8c7883a 	add	r3,r21,r3
    5c74:	e0c00015 	stw	r3,0(fp)
    5c78:	84c00e26 	beq	r16,r19,5cb4 <_malloc_r+0x460>
    5c7c:	018003c4 	movi	r6,15
    5c80:	3580a72e 	bgeu	r6,r22,5f20 <_malloc_r+0x6cc>
    5c84:	81400117 	ldw	r5,4(r16)
    5c88:	013ffe04 	movi	r4,-8
    5c8c:	b0bffd04 	addi	r2,r22,-12
    5c90:	1104703a 	and	r2,r2,r4
    5c94:	2900004c 	andi	r4,r5,1
    5c98:	2088b03a 	or	r4,r4,r2
    5c9c:	81000115 	stw	r4,4(r16)
    5ca0:	01400144 	movi	r5,5
    5ca4:	8089883a 	add	r4,r16,r2
    5ca8:	21400115 	stw	r5,4(r4)
    5cac:	21400215 	stw	r5,8(r4)
    5cb0:	3080cd36 	bltu	r6,r2,5fe8 <_malloc_r+0x794>
    5cb4:	00800074 	movhi	r2,1
    5cb8:	108c3004 	addi	r2,r2,12480
    5cbc:	11000017 	ldw	r4,0(r2)
    5cc0:	20c0012e 	bgeu	r4,r3,5cc8 <_malloc_r+0x474>
    5cc4:	10c00015 	stw	r3,0(r2)
    5cc8:	00800074 	movhi	r2,1
    5ccc:	108c2f04 	addi	r2,r2,12476
    5cd0:	11000017 	ldw	r4,0(r2)
    5cd4:	9c000217 	ldw	r16,8(r19)
    5cd8:	20c0012e 	bgeu	r4,r3,5ce0 <_malloc_r+0x48c>
    5cdc:	10c00015 	stw	r3,0(r2)
    5ce0:	80c00117 	ldw	r3,4(r16)
    5ce4:	00bfff04 	movi	r2,-4
    5ce8:	1886703a 	and	r3,r3,r2
    5cec:	1c45c83a 	sub	r2,r3,r17
    5cf0:	1c400236 	bltu	r3,r17,5cfc <_malloc_r+0x4a8>
    5cf4:	00c003c4 	movi	r3,15
    5cf8:	18800416 	blt	r3,r2,5d0c <_malloc_r+0x4b8>
    5cfc:	9009883a 	mov	r4,r18
    5d00:	000d5380 	call	d538 <__malloc_unlock>
    5d04:	0005883a 	mov	r2,zero
    5d08:	003f7b06 	br	5af8 <__alt_data_end+0xfffe5af8>
    5d0c:	88c00054 	ori	r3,r17,1
    5d10:	80c00115 	stw	r3,4(r16)
    5d14:	8463883a 	add	r17,r16,r17
    5d18:	10800054 	ori	r2,r2,1
    5d1c:	9c400215 	stw	r17,8(r19)
    5d20:	88800115 	stw	r2,4(r17)
    5d24:	9009883a 	mov	r4,r18
    5d28:	000d5380 	call	d538 <__malloc_unlock>
    5d2c:	80800204 	addi	r2,r16,8
    5d30:	003f7106 	br	5af8 <__alt_data_end+0xfffe5af8>
    5d34:	00c00504 	movi	r3,20
    5d38:	18804a2e 	bgeu	r3,r2,5e64 <_malloc_r+0x610>
    5d3c:	00c01504 	movi	r3,84
    5d40:	18806e36 	bltu	r3,r2,5efc <_malloc_r+0x6a8>
    5d44:	8804d33a 	srli	r2,r17,12
    5d48:	12001bc4 	addi	r8,r2,111
    5d4c:	11c01b84 	addi	r7,r2,110
    5d50:	4209883a 	add	r4,r8,r8
    5d54:	003edd06 	br	58cc <__alt_data_end+0xfffe58cc>
    5d58:	3804d27a 	srli	r2,r7,9
    5d5c:	00c00104 	movi	r3,4
    5d60:	1880442e 	bgeu	r3,r2,5e74 <_malloc_r+0x620>
    5d64:	00c00504 	movi	r3,20
    5d68:	18808136 	bltu	r3,r2,5f70 <_malloc_r+0x71c>
    5d6c:	11401704 	addi	r5,r2,92
    5d70:	10c016c4 	addi	r3,r2,91
    5d74:	294b883a 	add	r5,r5,r5
    5d78:	294b883a 	add	r5,r5,r5
    5d7c:	294b883a 	add	r5,r5,r5
    5d80:	994b883a 	add	r5,r19,r5
    5d84:	28800017 	ldw	r2,0(r5)
    5d88:	01800074 	movhi	r6,1
    5d8c:	297ffe04 	addi	r5,r5,-8
    5d90:	31bfdd04 	addi	r6,r6,-140
    5d94:	28806526 	beq	r5,r2,5f2c <_malloc_r+0x6d8>
    5d98:	01bfff04 	movi	r6,-4
    5d9c:	10c00117 	ldw	r3,4(r2)
    5da0:	1986703a 	and	r3,r3,r6
    5da4:	38c0022e 	bgeu	r7,r3,5db0 <_malloc_r+0x55c>
    5da8:	10800217 	ldw	r2,8(r2)
    5dac:	28bffb1e 	bne	r5,r2,5d9c <__alt_data_end+0xfffe5d9c>
    5db0:	11400317 	ldw	r5,12(r2)
    5db4:	98c00117 	ldw	r3,4(r19)
    5db8:	81400315 	stw	r5,12(r16)
    5dbc:	80800215 	stw	r2,8(r16)
    5dc0:	2c000215 	stw	r16,8(r5)
    5dc4:	14000315 	stw	r16,12(r2)
    5dc8:	003ef806 	br	59ac <__alt_data_end+0xfffe59ac>
    5dcc:	88c00054 	ori	r3,r17,1
    5dd0:	80c00115 	stw	r3,4(r16)
    5dd4:	8463883a 	add	r17,r16,r17
    5dd8:	34400515 	stw	r17,20(r6)
    5ddc:	34400415 	stw	r17,16(r6)
    5de0:	10c00054 	ori	r3,r2,1
    5de4:	8a000315 	stw	r8,12(r17)
    5de8:	8a000215 	stw	r8,8(r17)
    5dec:	88c00115 	stw	r3,4(r17)
    5df0:	88a3883a 	add	r17,r17,r2
    5df4:	88800015 	stw	r2,0(r17)
    5df8:	9009883a 	mov	r4,r18
    5dfc:	000d5380 	call	d538 <__malloc_unlock>
    5e00:	80800204 	addi	r2,r16,8
    5e04:	003f3c06 	br	5af8 <__alt_data_end+0xfffe5af8>
    5e08:	30c00117 	ldw	r3,4(r6)
    5e0c:	003ee706 	br	59ac <__alt_data_end+0xfffe59ac>
    5e10:	5ac00044 	addi	r11,r11,1
    5e14:	588000cc 	andi	r2,r11,3
    5e18:	31800204 	addi	r6,r6,8
    5e1c:	103efd1e 	bne	r2,zero,5a14 <__alt_data_end+0xfffe5a14>
    5e20:	00002406 	br	5eb4 <_malloc_r+0x660>
    5e24:	14000317 	ldw	r16,12(r2)
    5e28:	143f251e 	bne	r2,r16,5ac0 <__alt_data_end+0xfffe5ac0>
    5e2c:	21000084 	addi	r4,r4,2
    5e30:	003ebc06 	br	5924 <__alt_data_end+0xfffe5924>
    5e34:	8085883a 	add	r2,r16,r2
    5e38:	10c00117 	ldw	r3,4(r2)
    5e3c:	81000317 	ldw	r4,12(r16)
    5e40:	81400217 	ldw	r5,8(r16)
    5e44:	18c00054 	ori	r3,r3,1
    5e48:	10c00115 	stw	r3,4(r2)
    5e4c:	29000315 	stw	r4,12(r5)
    5e50:	21400215 	stw	r5,8(r4)
    5e54:	9009883a 	mov	r4,r18
    5e58:	000d5380 	call	d538 <__malloc_unlock>
    5e5c:	80800204 	addi	r2,r16,8
    5e60:	003f2506 	br	5af8 <__alt_data_end+0xfffe5af8>
    5e64:	12001704 	addi	r8,r2,92
    5e68:	11c016c4 	addi	r7,r2,91
    5e6c:	4209883a 	add	r4,r8,r8
    5e70:	003e9606 	br	58cc <__alt_data_end+0xfffe58cc>
    5e74:	3804d1ba 	srli	r2,r7,6
    5e78:	11400e44 	addi	r5,r2,57
    5e7c:	10c00e04 	addi	r3,r2,56
    5e80:	294b883a 	add	r5,r5,r5
    5e84:	003fbc06 	br	5d78 <__alt_data_end+0xfffe5d78>
    5e88:	84ff5926 	beq	r16,r19,5bf0 <__alt_data_end+0xfffe5bf0>
    5e8c:	00800074 	movhi	r2,1
    5e90:	10bfdd04 	addi	r2,r2,-140
    5e94:	14000217 	ldw	r16,8(r2)
    5e98:	00bfff04 	movi	r2,-4
    5e9c:	80c00117 	ldw	r3,4(r16)
    5ea0:	1886703a 	and	r3,r3,r2
    5ea4:	003f9106 	br	5cec <__alt_data_end+0xfffe5cec>
    5ea8:	60800217 	ldw	r2,8(r12)
    5eac:	213fffc4 	addi	r4,r4,-1
    5eb0:	1300651e 	bne	r2,r12,6048 <_malloc_r+0x7f4>
    5eb4:	208000cc 	andi	r2,r4,3
    5eb8:	633ffe04 	addi	r12,r12,-8
    5ebc:	103ffa1e 	bne	r2,zero,5ea8 <__alt_data_end+0xfffe5ea8>
    5ec0:	98800117 	ldw	r2,4(r19)
    5ec4:	0146303a 	nor	r3,zero,r5
    5ec8:	1884703a 	and	r2,r3,r2
    5ecc:	98800115 	stw	r2,4(r19)
    5ed0:	294b883a 	add	r5,r5,r5
    5ed4:	117f2836 	bltu	r2,r5,5b78 <__alt_data_end+0xfffe5b78>
    5ed8:	283f2726 	beq	r5,zero,5b78 <__alt_data_end+0xfffe5b78>
    5edc:	2886703a 	and	r3,r5,r2
    5ee0:	5809883a 	mov	r4,r11
    5ee4:	183ec31e 	bne	r3,zero,59f4 <__alt_data_end+0xfffe59f4>
    5ee8:	294b883a 	add	r5,r5,r5
    5eec:	2886703a 	and	r3,r5,r2
    5ef0:	21000104 	addi	r4,r4,4
    5ef4:	183ffc26 	beq	r3,zero,5ee8 <__alt_data_end+0xfffe5ee8>
    5ef8:	003ebe06 	br	59f4 <__alt_data_end+0xfffe59f4>
    5efc:	00c05504 	movi	r3,340
    5f00:	18801236 	bltu	r3,r2,5f4c <_malloc_r+0x6f8>
    5f04:	8804d3fa 	srli	r2,r17,15
    5f08:	12001e04 	addi	r8,r2,120
    5f0c:	11c01dc4 	addi	r7,r2,119
    5f10:	4209883a 	add	r4,r8,r8
    5f14:	003e6d06 	br	58cc <__alt_data_end+0xfffe58cc>
    5f18:	00c40004 	movi	r3,4096
    5f1c:	003f4606 	br	5c38 <__alt_data_end+0xfffe5c38>
    5f20:	00800044 	movi	r2,1
    5f24:	a0800115 	stw	r2,4(r20)
    5f28:	003f7406 	br	5cfc <__alt_data_end+0xfffe5cfc>
    5f2c:	1805d0ba 	srai	r2,r3,2
    5f30:	01c00044 	movi	r7,1
    5f34:	30c00117 	ldw	r3,4(r6)
    5f38:	388e983a 	sll	r7,r7,r2
    5f3c:	2805883a 	mov	r2,r5
    5f40:	38c6b03a 	or	r3,r7,r3
    5f44:	30c00115 	stw	r3,4(r6)
    5f48:	003f9b06 	br	5db8 <__alt_data_end+0xfffe5db8>
    5f4c:	00c15504 	movi	r3,1364
    5f50:	18801a36 	bltu	r3,r2,5fbc <_malloc_r+0x768>
    5f54:	8804d4ba 	srli	r2,r17,18
    5f58:	12001f44 	addi	r8,r2,125
    5f5c:	11c01f04 	addi	r7,r2,124
    5f60:	4209883a 	add	r4,r8,r8
    5f64:	003e5906 	br	58cc <__alt_data_end+0xfffe58cc>
    5f68:	ad400404 	addi	r21,r21,16
    5f6c:	003f1706 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5f70:	00c01504 	movi	r3,84
    5f74:	18802336 	bltu	r3,r2,6004 <_malloc_r+0x7b0>
    5f78:	3804d33a 	srli	r2,r7,12
    5f7c:	11401bc4 	addi	r5,r2,111
    5f80:	10c01b84 	addi	r3,r2,110
    5f84:	294b883a 	add	r5,r5,r5
    5f88:	003f7b06 	br	5d78 <__alt_data_end+0xfffe5d78>
    5f8c:	9c000217 	ldw	r16,8(r19)
    5f90:	00bfff04 	movi	r2,-4
    5f94:	80c00117 	ldw	r3,4(r16)
    5f98:	1886703a 	and	r3,r3,r2
    5f9c:	003f5306 	br	5cec <__alt_data_end+0xfffe5cec>
    5fa0:	3083ffcc 	andi	r2,r6,4095
    5fa4:	103f181e 	bne	r2,zero,5c08 <__alt_data_end+0xfffe5c08>
    5fa8:	99000217 	ldw	r4,8(r19)
    5fac:	b545883a 	add	r2,r22,r21
    5fb0:	10800054 	ori	r2,r2,1
    5fb4:	20800115 	stw	r2,4(r4)
    5fb8:	003f3e06 	br	5cb4 <__alt_data_end+0xfffe5cb4>
    5fbc:	01003f84 	movi	r4,254
    5fc0:	02001fc4 	movi	r8,127
    5fc4:	01c01f84 	movi	r7,126
    5fc8:	003e4006 	br	58cc <__alt_data_end+0xfffe58cc>
    5fcc:	00800074 	movhi	r2,1
    5fd0:	10856404 	addi	r2,r2,5520
    5fd4:	15000015 	stw	r20,0(r2)
    5fd8:	003f1106 	br	5c20 <__alt_data_end+0xfffe5c20>
    5fdc:	00800044 	movi	r2,1
    5fe0:	002b883a 	mov	r21,zero
    5fe4:	003f1f06 	br	5c64 <__alt_data_end+0xfffe5c64>
    5fe8:	81400204 	addi	r5,r16,8
    5fec:	9009883a 	mov	r4,r18
    5ff0:	0004c680 	call	4c68 <_free_r>
    5ff4:	00800074 	movhi	r2,1
    5ff8:	108c3a04 	addi	r2,r2,12520
    5ffc:	10c00017 	ldw	r3,0(r2)
    6000:	003f2c06 	br	5cb4 <__alt_data_end+0xfffe5cb4>
    6004:	00c05504 	movi	r3,340
    6008:	18800536 	bltu	r3,r2,6020 <_malloc_r+0x7cc>
    600c:	3804d3fa 	srli	r2,r7,15
    6010:	11401e04 	addi	r5,r2,120
    6014:	10c01dc4 	addi	r3,r2,119
    6018:	294b883a 	add	r5,r5,r5
    601c:	003f5606 	br	5d78 <__alt_data_end+0xfffe5d78>
    6020:	00c15504 	movi	r3,1364
    6024:	18800536 	bltu	r3,r2,603c <_malloc_r+0x7e8>
    6028:	3804d4ba 	srli	r2,r7,18
    602c:	11401f44 	addi	r5,r2,125
    6030:	10c01f04 	addi	r3,r2,124
    6034:	294b883a 	add	r5,r5,r5
    6038:	003f4f06 	br	5d78 <__alt_data_end+0xfffe5d78>
    603c:	01403f84 	movi	r5,254
    6040:	00c01f84 	movi	r3,126
    6044:	003f4c06 	br	5d78 <__alt_data_end+0xfffe5d78>
    6048:	98800117 	ldw	r2,4(r19)
    604c:	003fa006 	br	5ed0 <__alt_data_end+0xfffe5ed0>
    6050:	8808d0fa 	srli	r4,r17,3
    6054:	20800044 	addi	r2,r4,1
    6058:	1085883a 	add	r2,r2,r2
    605c:	003e9006 	br	5aa0 <__alt_data_end+0xfffe5aa0>

00006060 <memchr>:
    6060:	208000cc 	andi	r2,r4,3
    6064:	280f883a 	mov	r7,r5
    6068:	10003426 	beq	r2,zero,613c <memchr+0xdc>
    606c:	30bfffc4 	addi	r2,r6,-1
    6070:	30001a26 	beq	r6,zero,60dc <memchr+0x7c>
    6074:	20c00003 	ldbu	r3,0(r4)
    6078:	29803fcc 	andi	r6,r5,255
    607c:	30c0051e 	bne	r6,r3,6094 <memchr+0x34>
    6080:	00001806 	br	60e4 <memchr+0x84>
    6084:	10001526 	beq	r2,zero,60dc <memchr+0x7c>
    6088:	20c00003 	ldbu	r3,0(r4)
    608c:	10bfffc4 	addi	r2,r2,-1
    6090:	30c01426 	beq	r6,r3,60e4 <memchr+0x84>
    6094:	21000044 	addi	r4,r4,1
    6098:	20c000cc 	andi	r3,r4,3
    609c:	183ff91e 	bne	r3,zero,6084 <__alt_data_end+0xfffe6084>
    60a0:	020000c4 	movi	r8,3
    60a4:	40801136 	bltu	r8,r2,60ec <memchr+0x8c>
    60a8:	10000c26 	beq	r2,zero,60dc <memchr+0x7c>
    60ac:	20c00003 	ldbu	r3,0(r4)
    60b0:	29403fcc 	andi	r5,r5,255
    60b4:	28c00b26 	beq	r5,r3,60e4 <memchr+0x84>
    60b8:	20c00044 	addi	r3,r4,1
    60bc:	39803fcc 	andi	r6,r7,255
    60c0:	2089883a 	add	r4,r4,r2
    60c4:	00000306 	br	60d4 <memchr+0x74>
    60c8:	18c00044 	addi	r3,r3,1
    60cc:	197fffc3 	ldbu	r5,-1(r3)
    60d0:	31400526 	beq	r6,r5,60e8 <memchr+0x88>
    60d4:	1805883a 	mov	r2,r3
    60d8:	20fffb1e 	bne	r4,r3,60c8 <__alt_data_end+0xfffe60c8>
    60dc:	0005883a 	mov	r2,zero
    60e0:	f800283a 	ret
    60e4:	2005883a 	mov	r2,r4
    60e8:	f800283a 	ret
    60ec:	28c03fcc 	andi	r3,r5,255
    60f0:	1812923a 	slli	r9,r3,8
    60f4:	02ffbff4 	movhi	r11,65279
    60f8:	02a02074 	movhi	r10,32897
    60fc:	48d2b03a 	or	r9,r9,r3
    6100:	4806943a 	slli	r3,r9,16
    6104:	5affbfc4 	addi	r11,r11,-257
    6108:	52a02004 	addi	r10,r10,-32640
    610c:	48d2b03a 	or	r9,r9,r3
    6110:	20c00017 	ldw	r3,0(r4)
    6114:	48c6f03a 	xor	r3,r9,r3
    6118:	1acd883a 	add	r6,r3,r11
    611c:	00c6303a 	nor	r3,zero,r3
    6120:	30c6703a 	and	r3,r6,r3
    6124:	1a86703a 	and	r3,r3,r10
    6128:	183fe01e 	bne	r3,zero,60ac <__alt_data_end+0xfffe60ac>
    612c:	10bfff04 	addi	r2,r2,-4
    6130:	21000104 	addi	r4,r4,4
    6134:	40bff636 	bltu	r8,r2,6110 <__alt_data_end+0xfffe6110>
    6138:	003fdb06 	br	60a8 <__alt_data_end+0xfffe60a8>
    613c:	3005883a 	mov	r2,r6
    6140:	003fd706 	br	60a0 <__alt_data_end+0xfffe60a0>

00006144 <memcpy>:
    6144:	defffd04 	addi	sp,sp,-12
    6148:	dfc00215 	stw	ra,8(sp)
    614c:	dc400115 	stw	r17,4(sp)
    6150:	dc000015 	stw	r16,0(sp)
    6154:	00c003c4 	movi	r3,15
    6158:	2005883a 	mov	r2,r4
    615c:	1980452e 	bgeu	r3,r6,6274 <memcpy+0x130>
    6160:	2906b03a 	or	r3,r5,r4
    6164:	18c000cc 	andi	r3,r3,3
    6168:	1800441e 	bne	r3,zero,627c <memcpy+0x138>
    616c:	347ffc04 	addi	r17,r6,-16
    6170:	8822d13a 	srli	r17,r17,4
    6174:	28c00104 	addi	r3,r5,4
    6178:	23400104 	addi	r13,r4,4
    617c:	8820913a 	slli	r16,r17,4
    6180:	2b000204 	addi	r12,r5,8
    6184:	22c00204 	addi	r11,r4,8
    6188:	84000504 	addi	r16,r16,20
    618c:	2a800304 	addi	r10,r5,12
    6190:	22400304 	addi	r9,r4,12
    6194:	2c21883a 	add	r16,r5,r16
    6198:	2811883a 	mov	r8,r5
    619c:	200f883a 	mov	r7,r4
    61a0:	41000017 	ldw	r4,0(r8)
    61a4:	1fc00017 	ldw	ra,0(r3)
    61a8:	63c00017 	ldw	r15,0(r12)
    61ac:	39000015 	stw	r4,0(r7)
    61b0:	53800017 	ldw	r14,0(r10)
    61b4:	6fc00015 	stw	ra,0(r13)
    61b8:	5bc00015 	stw	r15,0(r11)
    61bc:	4b800015 	stw	r14,0(r9)
    61c0:	18c00404 	addi	r3,r3,16
    61c4:	39c00404 	addi	r7,r7,16
    61c8:	42000404 	addi	r8,r8,16
    61cc:	6b400404 	addi	r13,r13,16
    61d0:	63000404 	addi	r12,r12,16
    61d4:	5ac00404 	addi	r11,r11,16
    61d8:	52800404 	addi	r10,r10,16
    61dc:	4a400404 	addi	r9,r9,16
    61e0:	1c3fef1e 	bne	r3,r16,61a0 <__alt_data_end+0xfffe61a0>
    61e4:	89c00044 	addi	r7,r17,1
    61e8:	380e913a 	slli	r7,r7,4
    61ec:	310003cc 	andi	r4,r6,15
    61f0:	02c000c4 	movi	r11,3
    61f4:	11c7883a 	add	r3,r2,r7
    61f8:	29cb883a 	add	r5,r5,r7
    61fc:	5900212e 	bgeu	r11,r4,6284 <memcpy+0x140>
    6200:	1813883a 	mov	r9,r3
    6204:	2811883a 	mov	r8,r5
    6208:	200f883a 	mov	r7,r4
    620c:	42800017 	ldw	r10,0(r8)
    6210:	4a400104 	addi	r9,r9,4
    6214:	39ffff04 	addi	r7,r7,-4
    6218:	4abfff15 	stw	r10,-4(r9)
    621c:	42000104 	addi	r8,r8,4
    6220:	59fffa36 	bltu	r11,r7,620c <__alt_data_end+0xfffe620c>
    6224:	213fff04 	addi	r4,r4,-4
    6228:	2008d0ba 	srli	r4,r4,2
    622c:	318000cc 	andi	r6,r6,3
    6230:	21000044 	addi	r4,r4,1
    6234:	2109883a 	add	r4,r4,r4
    6238:	2109883a 	add	r4,r4,r4
    623c:	1907883a 	add	r3,r3,r4
    6240:	290b883a 	add	r5,r5,r4
    6244:	30000626 	beq	r6,zero,6260 <memcpy+0x11c>
    6248:	198d883a 	add	r6,r3,r6
    624c:	29c00003 	ldbu	r7,0(r5)
    6250:	18c00044 	addi	r3,r3,1
    6254:	29400044 	addi	r5,r5,1
    6258:	19ffffc5 	stb	r7,-1(r3)
    625c:	19bffb1e 	bne	r3,r6,624c <__alt_data_end+0xfffe624c>
    6260:	dfc00217 	ldw	ra,8(sp)
    6264:	dc400117 	ldw	r17,4(sp)
    6268:	dc000017 	ldw	r16,0(sp)
    626c:	dec00304 	addi	sp,sp,12
    6270:	f800283a 	ret
    6274:	2007883a 	mov	r3,r4
    6278:	003ff206 	br	6244 <__alt_data_end+0xfffe6244>
    627c:	2007883a 	mov	r3,r4
    6280:	003ff106 	br	6248 <__alt_data_end+0xfffe6248>
    6284:	200d883a 	mov	r6,r4
    6288:	003fee06 	br	6244 <__alt_data_end+0xfffe6244>

0000628c <memmove>:
    628c:	2005883a 	mov	r2,r4
    6290:	29000b2e 	bgeu	r5,r4,62c0 <memmove+0x34>
    6294:	298f883a 	add	r7,r5,r6
    6298:	21c0092e 	bgeu	r4,r7,62c0 <memmove+0x34>
    629c:	2187883a 	add	r3,r4,r6
    62a0:	198bc83a 	sub	r5,r3,r6
    62a4:	30004826 	beq	r6,zero,63c8 <memmove+0x13c>
    62a8:	39ffffc4 	addi	r7,r7,-1
    62ac:	39000003 	ldbu	r4,0(r7)
    62b0:	18ffffc4 	addi	r3,r3,-1
    62b4:	19000005 	stb	r4,0(r3)
    62b8:	28fffb1e 	bne	r5,r3,62a8 <__alt_data_end+0xfffe62a8>
    62bc:	f800283a 	ret
    62c0:	00c003c4 	movi	r3,15
    62c4:	1980412e 	bgeu	r3,r6,63cc <memmove+0x140>
    62c8:	2886b03a 	or	r3,r5,r2
    62cc:	18c000cc 	andi	r3,r3,3
    62d0:	1800401e 	bne	r3,zero,63d4 <memmove+0x148>
    62d4:	33fffc04 	addi	r15,r6,-16
    62d8:	781ed13a 	srli	r15,r15,4
    62dc:	28c00104 	addi	r3,r5,4
    62e0:	13400104 	addi	r13,r2,4
    62e4:	781c913a 	slli	r14,r15,4
    62e8:	2b000204 	addi	r12,r5,8
    62ec:	12c00204 	addi	r11,r2,8
    62f0:	73800504 	addi	r14,r14,20
    62f4:	2a800304 	addi	r10,r5,12
    62f8:	12400304 	addi	r9,r2,12
    62fc:	2b9d883a 	add	r14,r5,r14
    6300:	2811883a 	mov	r8,r5
    6304:	100f883a 	mov	r7,r2
    6308:	41000017 	ldw	r4,0(r8)
    630c:	39c00404 	addi	r7,r7,16
    6310:	18c00404 	addi	r3,r3,16
    6314:	393ffc15 	stw	r4,-16(r7)
    6318:	193ffc17 	ldw	r4,-16(r3)
    631c:	6b400404 	addi	r13,r13,16
    6320:	5ac00404 	addi	r11,r11,16
    6324:	693ffc15 	stw	r4,-16(r13)
    6328:	61000017 	ldw	r4,0(r12)
    632c:	4a400404 	addi	r9,r9,16
    6330:	42000404 	addi	r8,r8,16
    6334:	593ffc15 	stw	r4,-16(r11)
    6338:	51000017 	ldw	r4,0(r10)
    633c:	63000404 	addi	r12,r12,16
    6340:	52800404 	addi	r10,r10,16
    6344:	493ffc15 	stw	r4,-16(r9)
    6348:	1bbfef1e 	bne	r3,r14,6308 <__alt_data_end+0xfffe6308>
    634c:	79000044 	addi	r4,r15,1
    6350:	2008913a 	slli	r4,r4,4
    6354:	328003cc 	andi	r10,r6,15
    6358:	02c000c4 	movi	r11,3
    635c:	1107883a 	add	r3,r2,r4
    6360:	290b883a 	add	r5,r5,r4
    6364:	5a801e2e 	bgeu	r11,r10,63e0 <memmove+0x154>
    6368:	1813883a 	mov	r9,r3
    636c:	2811883a 	mov	r8,r5
    6370:	500f883a 	mov	r7,r10
    6374:	41000017 	ldw	r4,0(r8)
    6378:	4a400104 	addi	r9,r9,4
    637c:	39ffff04 	addi	r7,r7,-4
    6380:	493fff15 	stw	r4,-4(r9)
    6384:	42000104 	addi	r8,r8,4
    6388:	59fffa36 	bltu	r11,r7,6374 <__alt_data_end+0xfffe6374>
    638c:	513fff04 	addi	r4,r10,-4
    6390:	2008d0ba 	srli	r4,r4,2
    6394:	318000cc 	andi	r6,r6,3
    6398:	21000044 	addi	r4,r4,1
    639c:	2109883a 	add	r4,r4,r4
    63a0:	2109883a 	add	r4,r4,r4
    63a4:	1907883a 	add	r3,r3,r4
    63a8:	290b883a 	add	r5,r5,r4
    63ac:	30000b26 	beq	r6,zero,63dc <memmove+0x150>
    63b0:	198d883a 	add	r6,r3,r6
    63b4:	29c00003 	ldbu	r7,0(r5)
    63b8:	18c00044 	addi	r3,r3,1
    63bc:	29400044 	addi	r5,r5,1
    63c0:	19ffffc5 	stb	r7,-1(r3)
    63c4:	19bffb1e 	bne	r3,r6,63b4 <__alt_data_end+0xfffe63b4>
    63c8:	f800283a 	ret
    63cc:	1007883a 	mov	r3,r2
    63d0:	003ff606 	br	63ac <__alt_data_end+0xfffe63ac>
    63d4:	1007883a 	mov	r3,r2
    63d8:	003ff506 	br	63b0 <__alt_data_end+0xfffe63b0>
    63dc:	f800283a 	ret
    63e0:	500d883a 	mov	r6,r10
    63e4:	003ff106 	br	63ac <__alt_data_end+0xfffe63ac>

000063e8 <memset>:
    63e8:	20c000cc 	andi	r3,r4,3
    63ec:	2005883a 	mov	r2,r4
    63f0:	18004426 	beq	r3,zero,6504 <memset+0x11c>
    63f4:	31ffffc4 	addi	r7,r6,-1
    63f8:	30004026 	beq	r6,zero,64fc <memset+0x114>
    63fc:	2813883a 	mov	r9,r5
    6400:	200d883a 	mov	r6,r4
    6404:	2007883a 	mov	r3,r4
    6408:	00000406 	br	641c <memset+0x34>
    640c:	3a3fffc4 	addi	r8,r7,-1
    6410:	31800044 	addi	r6,r6,1
    6414:	38003926 	beq	r7,zero,64fc <memset+0x114>
    6418:	400f883a 	mov	r7,r8
    641c:	18c00044 	addi	r3,r3,1
    6420:	32400005 	stb	r9,0(r6)
    6424:	1a0000cc 	andi	r8,r3,3
    6428:	403ff81e 	bne	r8,zero,640c <__alt_data_end+0xfffe640c>
    642c:	010000c4 	movi	r4,3
    6430:	21c02d2e 	bgeu	r4,r7,64e8 <memset+0x100>
    6434:	29003fcc 	andi	r4,r5,255
    6438:	200c923a 	slli	r6,r4,8
    643c:	3108b03a 	or	r4,r6,r4
    6440:	200c943a 	slli	r6,r4,16
    6444:	218cb03a 	or	r6,r4,r6
    6448:	010003c4 	movi	r4,15
    644c:	21c0182e 	bgeu	r4,r7,64b0 <memset+0xc8>
    6450:	3b3ffc04 	addi	r12,r7,-16
    6454:	6018d13a 	srli	r12,r12,4
    6458:	1a000104 	addi	r8,r3,4
    645c:	1ac00204 	addi	r11,r3,8
    6460:	6008913a 	slli	r4,r12,4
    6464:	1a800304 	addi	r10,r3,12
    6468:	1813883a 	mov	r9,r3
    646c:	21000504 	addi	r4,r4,20
    6470:	1909883a 	add	r4,r3,r4
    6474:	49800015 	stw	r6,0(r9)
    6478:	41800015 	stw	r6,0(r8)
    647c:	59800015 	stw	r6,0(r11)
    6480:	51800015 	stw	r6,0(r10)
    6484:	42000404 	addi	r8,r8,16
    6488:	4a400404 	addi	r9,r9,16
    648c:	5ac00404 	addi	r11,r11,16
    6490:	52800404 	addi	r10,r10,16
    6494:	413ff71e 	bne	r8,r4,6474 <__alt_data_end+0xfffe6474>
    6498:	63000044 	addi	r12,r12,1
    649c:	6018913a 	slli	r12,r12,4
    64a0:	39c003cc 	andi	r7,r7,15
    64a4:	010000c4 	movi	r4,3
    64a8:	1b07883a 	add	r3,r3,r12
    64ac:	21c00e2e 	bgeu	r4,r7,64e8 <memset+0x100>
    64b0:	1813883a 	mov	r9,r3
    64b4:	3811883a 	mov	r8,r7
    64b8:	010000c4 	movi	r4,3
    64bc:	49800015 	stw	r6,0(r9)
    64c0:	423fff04 	addi	r8,r8,-4
    64c4:	4a400104 	addi	r9,r9,4
    64c8:	223ffc36 	bltu	r4,r8,64bc <__alt_data_end+0xfffe64bc>
    64cc:	393fff04 	addi	r4,r7,-4
    64d0:	2008d0ba 	srli	r4,r4,2
    64d4:	39c000cc 	andi	r7,r7,3
    64d8:	21000044 	addi	r4,r4,1
    64dc:	2109883a 	add	r4,r4,r4
    64e0:	2109883a 	add	r4,r4,r4
    64e4:	1907883a 	add	r3,r3,r4
    64e8:	38000526 	beq	r7,zero,6500 <memset+0x118>
    64ec:	19cf883a 	add	r7,r3,r7
    64f0:	19400005 	stb	r5,0(r3)
    64f4:	18c00044 	addi	r3,r3,1
    64f8:	38fffd1e 	bne	r7,r3,64f0 <__alt_data_end+0xfffe64f0>
    64fc:	f800283a 	ret
    6500:	f800283a 	ret
    6504:	2007883a 	mov	r3,r4
    6508:	300f883a 	mov	r7,r6
    650c:	003fc706 	br	642c <__alt_data_end+0xfffe642c>

00006510 <_Balloc>:
    6510:	20801317 	ldw	r2,76(r4)
    6514:	defffc04 	addi	sp,sp,-16
    6518:	dc400115 	stw	r17,4(sp)
    651c:	dc000015 	stw	r16,0(sp)
    6520:	dfc00315 	stw	ra,12(sp)
    6524:	dc800215 	stw	r18,8(sp)
    6528:	2023883a 	mov	r17,r4
    652c:	2821883a 	mov	r16,r5
    6530:	10000f26 	beq	r2,zero,6570 <_Balloc+0x60>
    6534:	8407883a 	add	r3,r16,r16
    6538:	18c7883a 	add	r3,r3,r3
    653c:	10c7883a 	add	r3,r2,r3
    6540:	18800017 	ldw	r2,0(r3)
    6544:	10001126 	beq	r2,zero,658c <_Balloc+0x7c>
    6548:	11000017 	ldw	r4,0(r2)
    654c:	19000015 	stw	r4,0(r3)
    6550:	10000415 	stw	zero,16(r2)
    6554:	10000315 	stw	zero,12(r2)
    6558:	dfc00317 	ldw	ra,12(sp)
    655c:	dc800217 	ldw	r18,8(sp)
    6560:	dc400117 	ldw	r17,4(sp)
    6564:	dc000017 	ldw	r16,0(sp)
    6568:	dec00404 	addi	sp,sp,16
    656c:	f800283a 	ret
    6570:	01800844 	movi	r6,33
    6574:	01400104 	movi	r5,4
    6578:	000944c0 	call	944c <_calloc_r>
    657c:	88801315 	stw	r2,76(r17)
    6580:	103fec1e 	bne	r2,zero,6534 <__alt_data_end+0xfffe6534>
    6584:	0005883a 	mov	r2,zero
    6588:	003ff306 	br	6558 <__alt_data_end+0xfffe6558>
    658c:	01400044 	movi	r5,1
    6590:	2c24983a 	sll	r18,r5,r16
    6594:	8809883a 	mov	r4,r17
    6598:	91800144 	addi	r6,r18,5
    659c:	318d883a 	add	r6,r6,r6
    65a0:	318d883a 	add	r6,r6,r6
    65a4:	000944c0 	call	944c <_calloc_r>
    65a8:	103ff626 	beq	r2,zero,6584 <__alt_data_end+0xfffe6584>
    65ac:	14000115 	stw	r16,4(r2)
    65b0:	14800215 	stw	r18,8(r2)
    65b4:	003fe606 	br	6550 <__alt_data_end+0xfffe6550>

000065b8 <_Bfree>:
    65b8:	28000826 	beq	r5,zero,65dc <_Bfree+0x24>
    65bc:	28c00117 	ldw	r3,4(r5)
    65c0:	20801317 	ldw	r2,76(r4)
    65c4:	18c7883a 	add	r3,r3,r3
    65c8:	18c7883a 	add	r3,r3,r3
    65cc:	10c5883a 	add	r2,r2,r3
    65d0:	10c00017 	ldw	r3,0(r2)
    65d4:	28c00015 	stw	r3,0(r5)
    65d8:	11400015 	stw	r5,0(r2)
    65dc:	f800283a 	ret

000065e0 <__multadd>:
    65e0:	defffa04 	addi	sp,sp,-24
    65e4:	dc800315 	stw	r18,12(sp)
    65e8:	dc400215 	stw	r17,8(sp)
    65ec:	dc000115 	stw	r16,4(sp)
    65f0:	2823883a 	mov	r17,r5
    65f4:	2c000417 	ldw	r16,16(r5)
    65f8:	dfc00515 	stw	ra,20(sp)
    65fc:	dcc00415 	stw	r19,16(sp)
    6600:	2025883a 	mov	r18,r4
    6604:	29400504 	addi	r5,r5,20
    6608:	0011883a 	mov	r8,zero
    660c:	28c00017 	ldw	r3,0(r5)
    6610:	29400104 	addi	r5,r5,4
    6614:	42000044 	addi	r8,r8,1
    6618:	18bfffcc 	andi	r2,r3,65535
    661c:	1185383a 	mul	r2,r2,r6
    6620:	1806d43a 	srli	r3,r3,16
    6624:	11cf883a 	add	r7,r2,r7
    6628:	3808d43a 	srli	r4,r7,16
    662c:	1987383a 	mul	r3,r3,r6
    6630:	38bfffcc 	andi	r2,r7,65535
    6634:	1907883a 	add	r3,r3,r4
    6638:	1808943a 	slli	r4,r3,16
    663c:	180ed43a 	srli	r7,r3,16
    6640:	2085883a 	add	r2,r4,r2
    6644:	28bfff15 	stw	r2,-4(r5)
    6648:	443ff016 	blt	r8,r16,660c <__alt_data_end+0xfffe660c>
    664c:	38000926 	beq	r7,zero,6674 <__multadd+0x94>
    6650:	88800217 	ldw	r2,8(r17)
    6654:	80800f0e 	bge	r16,r2,6694 <__multadd+0xb4>
    6658:	80800144 	addi	r2,r16,5
    665c:	1085883a 	add	r2,r2,r2
    6660:	1085883a 	add	r2,r2,r2
    6664:	8885883a 	add	r2,r17,r2
    6668:	11c00015 	stw	r7,0(r2)
    666c:	84000044 	addi	r16,r16,1
    6670:	8c000415 	stw	r16,16(r17)
    6674:	8805883a 	mov	r2,r17
    6678:	dfc00517 	ldw	ra,20(sp)
    667c:	dcc00417 	ldw	r19,16(sp)
    6680:	dc800317 	ldw	r18,12(sp)
    6684:	dc400217 	ldw	r17,8(sp)
    6688:	dc000117 	ldw	r16,4(sp)
    668c:	dec00604 	addi	sp,sp,24
    6690:	f800283a 	ret
    6694:	89400117 	ldw	r5,4(r17)
    6698:	9009883a 	mov	r4,r18
    669c:	d9c00015 	stw	r7,0(sp)
    66a0:	29400044 	addi	r5,r5,1
    66a4:	00065100 	call	6510 <_Balloc>
    66a8:	89800417 	ldw	r6,16(r17)
    66ac:	89400304 	addi	r5,r17,12
    66b0:	11000304 	addi	r4,r2,12
    66b4:	31800084 	addi	r6,r6,2
    66b8:	318d883a 	add	r6,r6,r6
    66bc:	318d883a 	add	r6,r6,r6
    66c0:	1027883a 	mov	r19,r2
    66c4:	00061440 	call	6144 <memcpy>
    66c8:	d9c00017 	ldw	r7,0(sp)
    66cc:	88000a26 	beq	r17,zero,66f8 <__multadd+0x118>
    66d0:	88c00117 	ldw	r3,4(r17)
    66d4:	90801317 	ldw	r2,76(r18)
    66d8:	18c7883a 	add	r3,r3,r3
    66dc:	18c7883a 	add	r3,r3,r3
    66e0:	10c5883a 	add	r2,r2,r3
    66e4:	10c00017 	ldw	r3,0(r2)
    66e8:	88c00015 	stw	r3,0(r17)
    66ec:	14400015 	stw	r17,0(r2)
    66f0:	9823883a 	mov	r17,r19
    66f4:	003fd806 	br	6658 <__alt_data_end+0xfffe6658>
    66f8:	9823883a 	mov	r17,r19
    66fc:	003fd606 	br	6658 <__alt_data_end+0xfffe6658>

00006700 <__s2b>:
    6700:	defff904 	addi	sp,sp,-28
    6704:	dc400115 	stw	r17,4(sp)
    6708:	dc000015 	stw	r16,0(sp)
    670c:	2023883a 	mov	r17,r4
    6710:	2821883a 	mov	r16,r5
    6714:	39000204 	addi	r4,r7,8
    6718:	01400244 	movi	r5,9
    671c:	dcc00315 	stw	r19,12(sp)
    6720:	dc800215 	stw	r18,8(sp)
    6724:	dfc00615 	stw	ra,24(sp)
    6728:	dd400515 	stw	r21,20(sp)
    672c:	dd000415 	stw	r20,16(sp)
    6730:	3825883a 	mov	r18,r7
    6734:	3027883a 	mov	r19,r6
    6738:	000a77c0 	call	a77c <__divsi3>
    673c:	00c00044 	movi	r3,1
    6740:	000b883a 	mov	r5,zero
    6744:	1880030e 	bge	r3,r2,6754 <__s2b+0x54>
    6748:	18c7883a 	add	r3,r3,r3
    674c:	29400044 	addi	r5,r5,1
    6750:	18bffd16 	blt	r3,r2,6748 <__alt_data_end+0xfffe6748>
    6754:	8809883a 	mov	r4,r17
    6758:	00065100 	call	6510 <_Balloc>
    675c:	d8c00717 	ldw	r3,28(sp)
    6760:	10c00515 	stw	r3,20(r2)
    6764:	00c00044 	movi	r3,1
    6768:	10c00415 	stw	r3,16(r2)
    676c:	00c00244 	movi	r3,9
    6770:	1cc0210e 	bge	r3,r19,67f8 <__s2b+0xf8>
    6774:	80eb883a 	add	r21,r16,r3
    6778:	a829883a 	mov	r20,r21
    677c:	84e1883a 	add	r16,r16,r19
    6780:	a1c00007 	ldb	r7,0(r20)
    6784:	01800284 	movi	r6,10
    6788:	a5000044 	addi	r20,r20,1
    678c:	100b883a 	mov	r5,r2
    6790:	39fff404 	addi	r7,r7,-48
    6794:	8809883a 	mov	r4,r17
    6798:	00065e00 	call	65e0 <__multadd>
    679c:	a43ff81e 	bne	r20,r16,6780 <__alt_data_end+0xfffe6780>
    67a0:	ace1883a 	add	r16,r21,r19
    67a4:	843ffe04 	addi	r16,r16,-8
    67a8:	9c800a0e 	bge	r19,r18,67d4 <__s2b+0xd4>
    67ac:	94e5c83a 	sub	r18,r18,r19
    67b0:	84a5883a 	add	r18,r16,r18
    67b4:	81c00007 	ldb	r7,0(r16)
    67b8:	01800284 	movi	r6,10
    67bc:	84000044 	addi	r16,r16,1
    67c0:	100b883a 	mov	r5,r2
    67c4:	39fff404 	addi	r7,r7,-48
    67c8:	8809883a 	mov	r4,r17
    67cc:	00065e00 	call	65e0 <__multadd>
    67d0:	84bff81e 	bne	r16,r18,67b4 <__alt_data_end+0xfffe67b4>
    67d4:	dfc00617 	ldw	ra,24(sp)
    67d8:	dd400517 	ldw	r21,20(sp)
    67dc:	dd000417 	ldw	r20,16(sp)
    67e0:	dcc00317 	ldw	r19,12(sp)
    67e4:	dc800217 	ldw	r18,8(sp)
    67e8:	dc400117 	ldw	r17,4(sp)
    67ec:	dc000017 	ldw	r16,0(sp)
    67f0:	dec00704 	addi	sp,sp,28
    67f4:	f800283a 	ret
    67f8:	84000284 	addi	r16,r16,10
    67fc:	1827883a 	mov	r19,r3
    6800:	003fe906 	br	67a8 <__alt_data_end+0xfffe67a8>

00006804 <__hi0bits>:
    6804:	20bfffec 	andhi	r2,r4,65535
    6808:	1000141e 	bne	r2,zero,685c <__hi0bits+0x58>
    680c:	2008943a 	slli	r4,r4,16
    6810:	00800404 	movi	r2,16
    6814:	20ffc02c 	andhi	r3,r4,65280
    6818:	1800021e 	bne	r3,zero,6824 <__hi0bits+0x20>
    681c:	2008923a 	slli	r4,r4,8
    6820:	10800204 	addi	r2,r2,8
    6824:	20fc002c 	andhi	r3,r4,61440
    6828:	1800021e 	bne	r3,zero,6834 <__hi0bits+0x30>
    682c:	2008913a 	slli	r4,r4,4
    6830:	10800104 	addi	r2,r2,4
    6834:	20f0002c 	andhi	r3,r4,49152
    6838:	1800031e 	bne	r3,zero,6848 <__hi0bits+0x44>
    683c:	2109883a 	add	r4,r4,r4
    6840:	10800084 	addi	r2,r2,2
    6844:	2109883a 	add	r4,r4,r4
    6848:	20000316 	blt	r4,zero,6858 <__hi0bits+0x54>
    684c:	2110002c 	andhi	r4,r4,16384
    6850:	2000041e 	bne	r4,zero,6864 <__hi0bits+0x60>
    6854:	00800804 	movi	r2,32
    6858:	f800283a 	ret
    685c:	0005883a 	mov	r2,zero
    6860:	003fec06 	br	6814 <__alt_data_end+0xfffe6814>
    6864:	10800044 	addi	r2,r2,1
    6868:	f800283a 	ret

0000686c <__lo0bits>:
    686c:	20c00017 	ldw	r3,0(r4)
    6870:	188001cc 	andi	r2,r3,7
    6874:	10000826 	beq	r2,zero,6898 <__lo0bits+0x2c>
    6878:	1880004c 	andi	r2,r3,1
    687c:	1000211e 	bne	r2,zero,6904 <__lo0bits+0x98>
    6880:	1880008c 	andi	r2,r3,2
    6884:	1000211e 	bne	r2,zero,690c <__lo0bits+0xa0>
    6888:	1806d0ba 	srli	r3,r3,2
    688c:	00800084 	movi	r2,2
    6890:	20c00015 	stw	r3,0(r4)
    6894:	f800283a 	ret
    6898:	18bfffcc 	andi	r2,r3,65535
    689c:	10001326 	beq	r2,zero,68ec <__lo0bits+0x80>
    68a0:	0005883a 	mov	r2,zero
    68a4:	19403fcc 	andi	r5,r3,255
    68a8:	2800021e 	bne	r5,zero,68b4 <__lo0bits+0x48>
    68ac:	1806d23a 	srli	r3,r3,8
    68b0:	10800204 	addi	r2,r2,8
    68b4:	194003cc 	andi	r5,r3,15
    68b8:	2800021e 	bne	r5,zero,68c4 <__lo0bits+0x58>
    68bc:	1806d13a 	srli	r3,r3,4
    68c0:	10800104 	addi	r2,r2,4
    68c4:	194000cc 	andi	r5,r3,3
    68c8:	2800021e 	bne	r5,zero,68d4 <__lo0bits+0x68>
    68cc:	1806d0ba 	srli	r3,r3,2
    68d0:	10800084 	addi	r2,r2,2
    68d4:	1940004c 	andi	r5,r3,1
    68d8:	2800081e 	bne	r5,zero,68fc <__lo0bits+0x90>
    68dc:	1806d07a 	srli	r3,r3,1
    68e0:	1800051e 	bne	r3,zero,68f8 <__lo0bits+0x8c>
    68e4:	00800804 	movi	r2,32
    68e8:	f800283a 	ret
    68ec:	1806d43a 	srli	r3,r3,16
    68f0:	00800404 	movi	r2,16
    68f4:	003feb06 	br	68a4 <__alt_data_end+0xfffe68a4>
    68f8:	10800044 	addi	r2,r2,1
    68fc:	20c00015 	stw	r3,0(r4)
    6900:	f800283a 	ret
    6904:	0005883a 	mov	r2,zero
    6908:	f800283a 	ret
    690c:	1806d07a 	srli	r3,r3,1
    6910:	00800044 	movi	r2,1
    6914:	20c00015 	stw	r3,0(r4)
    6918:	f800283a 	ret

0000691c <__i2b>:
    691c:	defffd04 	addi	sp,sp,-12
    6920:	dc000015 	stw	r16,0(sp)
    6924:	04000044 	movi	r16,1
    6928:	dc400115 	stw	r17,4(sp)
    692c:	2823883a 	mov	r17,r5
    6930:	800b883a 	mov	r5,r16
    6934:	dfc00215 	stw	ra,8(sp)
    6938:	00065100 	call	6510 <_Balloc>
    693c:	14400515 	stw	r17,20(r2)
    6940:	14000415 	stw	r16,16(r2)
    6944:	dfc00217 	ldw	ra,8(sp)
    6948:	dc400117 	ldw	r17,4(sp)
    694c:	dc000017 	ldw	r16,0(sp)
    6950:	dec00304 	addi	sp,sp,12
    6954:	f800283a 	ret

00006958 <__multiply>:
    6958:	defffa04 	addi	sp,sp,-24
    695c:	dcc00315 	stw	r19,12(sp)
    6960:	dc800215 	stw	r18,8(sp)
    6964:	34c00417 	ldw	r19,16(r6)
    6968:	2c800417 	ldw	r18,16(r5)
    696c:	dd000415 	stw	r20,16(sp)
    6970:	dc400115 	stw	r17,4(sp)
    6974:	dfc00515 	stw	ra,20(sp)
    6978:	dc000015 	stw	r16,0(sp)
    697c:	2829883a 	mov	r20,r5
    6980:	3023883a 	mov	r17,r6
    6984:	94c0050e 	bge	r18,r19,699c <__multiply+0x44>
    6988:	9007883a 	mov	r3,r18
    698c:	3029883a 	mov	r20,r6
    6990:	9825883a 	mov	r18,r19
    6994:	2823883a 	mov	r17,r5
    6998:	1827883a 	mov	r19,r3
    699c:	a0800217 	ldw	r2,8(r20)
    69a0:	94e1883a 	add	r16,r18,r19
    69a4:	a1400117 	ldw	r5,4(r20)
    69a8:	1400010e 	bge	r2,r16,69b0 <__multiply+0x58>
    69ac:	29400044 	addi	r5,r5,1
    69b0:	00065100 	call	6510 <_Balloc>
    69b4:	8415883a 	add	r10,r16,r16
    69b8:	12c00504 	addi	r11,r2,20
    69bc:	5295883a 	add	r10,r10,r10
    69c0:	5a95883a 	add	r10,r11,r10
    69c4:	5807883a 	mov	r3,r11
    69c8:	5a80032e 	bgeu	r11,r10,69d8 <__multiply+0x80>
    69cc:	18000015 	stw	zero,0(r3)
    69d0:	18c00104 	addi	r3,r3,4
    69d4:	1abffd36 	bltu	r3,r10,69cc <__alt_data_end+0xfffe69cc>
    69d8:	9ce7883a 	add	r19,r19,r19
    69dc:	94a5883a 	add	r18,r18,r18
    69e0:	89800504 	addi	r6,r17,20
    69e4:	9ce7883a 	add	r19,r19,r19
    69e8:	a3400504 	addi	r13,r20,20
    69ec:	94a5883a 	add	r18,r18,r18
    69f0:	34d9883a 	add	r12,r6,r19
    69f4:	6c93883a 	add	r9,r13,r18
    69f8:	3300422e 	bgeu	r6,r12,6b04 <__multiply+0x1ac>
    69fc:	37c00017 	ldw	ra,0(r6)
    6a00:	fbffffcc 	andi	r15,ra,65535
    6a04:	78001b26 	beq	r15,zero,6a74 <__multiply+0x11c>
    6a08:	5811883a 	mov	r8,r11
    6a0c:	681d883a 	mov	r14,r13
    6a10:	000f883a 	mov	r7,zero
    6a14:	71000017 	ldw	r4,0(r14)
    6a18:	40c00017 	ldw	r3,0(r8)
    6a1c:	73800104 	addi	r14,r14,4
    6a20:	217fffcc 	andi	r5,r4,65535
    6a24:	2bcb383a 	mul	r5,r5,r15
    6a28:	2008d43a 	srli	r4,r4,16
    6a2c:	1c7fffcc 	andi	r17,r3,65535
    6a30:	2c4b883a 	add	r5,r5,r17
    6a34:	29cb883a 	add	r5,r5,r7
    6a38:	23c9383a 	mul	r4,r4,r15
    6a3c:	1806d43a 	srli	r3,r3,16
    6a40:	280ed43a 	srli	r7,r5,16
    6a44:	297fffcc 	andi	r5,r5,65535
    6a48:	20c7883a 	add	r3,r4,r3
    6a4c:	19c7883a 	add	r3,r3,r7
    6a50:	1808943a 	slli	r4,r3,16
    6a54:	4023883a 	mov	r17,r8
    6a58:	180ed43a 	srli	r7,r3,16
    6a5c:	214ab03a 	or	r5,r4,r5
    6a60:	41400015 	stw	r5,0(r8)
    6a64:	42000104 	addi	r8,r8,4
    6a68:	727fea36 	bltu	r14,r9,6a14 <__alt_data_end+0xfffe6a14>
    6a6c:	89c00115 	stw	r7,4(r17)
    6a70:	37c00017 	ldw	ra,0(r6)
    6a74:	f83ed43a 	srli	ra,ra,16
    6a78:	f8001f26 	beq	ra,zero,6af8 <__multiply+0x1a0>
    6a7c:	58c00017 	ldw	r3,0(r11)
    6a80:	681d883a 	mov	r14,r13
    6a84:	581f883a 	mov	r15,r11
    6a88:	1811883a 	mov	r8,r3
    6a8c:	5825883a 	mov	r18,r11
    6a90:	000f883a 	mov	r7,zero
    6a94:	00000106 	br	6a9c <__multiply+0x144>
    6a98:	8825883a 	mov	r18,r17
    6a9c:	7140000b 	ldhu	r5,0(r14)
    6aa0:	4010d43a 	srli	r8,r8,16
    6aa4:	193fffcc 	andi	r4,r3,65535
    6aa8:	2fcb383a 	mul	r5,r5,ra
    6aac:	7bc00104 	addi	r15,r15,4
    6ab0:	73800104 	addi	r14,r14,4
    6ab4:	2a0b883a 	add	r5,r5,r8
    6ab8:	29cb883a 	add	r5,r5,r7
    6abc:	2806943a 	slli	r3,r5,16
    6ac0:	94400104 	addi	r17,r18,4
    6ac4:	280ad43a 	srli	r5,r5,16
    6ac8:	1908b03a 	or	r4,r3,r4
    6acc:	793fff15 	stw	r4,-4(r15)
    6ad0:	70ffff17 	ldw	r3,-4(r14)
    6ad4:	8a000017 	ldw	r8,0(r17)
    6ad8:	1806d43a 	srli	r3,r3,16
    6adc:	413fffcc 	andi	r4,r8,65535
    6ae0:	1fc7383a 	mul	r3,r3,ra
    6ae4:	1907883a 	add	r3,r3,r4
    6ae8:	1947883a 	add	r3,r3,r5
    6aec:	180ed43a 	srli	r7,r3,16
    6af0:	727fe936 	bltu	r14,r9,6a98 <__alt_data_end+0xfffe6a98>
    6af4:	90c00115 	stw	r3,4(r18)
    6af8:	31800104 	addi	r6,r6,4
    6afc:	5ac00104 	addi	r11,r11,4
    6b00:	333fbe36 	bltu	r6,r12,69fc <__alt_data_end+0xfffe69fc>
    6b04:	0400090e 	bge	zero,r16,6b2c <__multiply+0x1d4>
    6b08:	50ffff17 	ldw	r3,-4(r10)
    6b0c:	52bfff04 	addi	r10,r10,-4
    6b10:	18000326 	beq	r3,zero,6b20 <__multiply+0x1c8>
    6b14:	00000506 	br	6b2c <__multiply+0x1d4>
    6b18:	50c00017 	ldw	r3,0(r10)
    6b1c:	1800031e 	bne	r3,zero,6b2c <__multiply+0x1d4>
    6b20:	843fffc4 	addi	r16,r16,-1
    6b24:	52bfff04 	addi	r10,r10,-4
    6b28:	803ffb1e 	bne	r16,zero,6b18 <__alt_data_end+0xfffe6b18>
    6b2c:	14000415 	stw	r16,16(r2)
    6b30:	dfc00517 	ldw	ra,20(sp)
    6b34:	dd000417 	ldw	r20,16(sp)
    6b38:	dcc00317 	ldw	r19,12(sp)
    6b3c:	dc800217 	ldw	r18,8(sp)
    6b40:	dc400117 	ldw	r17,4(sp)
    6b44:	dc000017 	ldw	r16,0(sp)
    6b48:	dec00604 	addi	sp,sp,24
    6b4c:	f800283a 	ret

00006b50 <__pow5mult>:
    6b50:	defffa04 	addi	sp,sp,-24
    6b54:	dcc00315 	stw	r19,12(sp)
    6b58:	dc000015 	stw	r16,0(sp)
    6b5c:	dfc00515 	stw	ra,20(sp)
    6b60:	dd000415 	stw	r20,16(sp)
    6b64:	dc800215 	stw	r18,8(sp)
    6b68:	dc400115 	stw	r17,4(sp)
    6b6c:	308000cc 	andi	r2,r6,3
    6b70:	3021883a 	mov	r16,r6
    6b74:	2027883a 	mov	r19,r4
    6b78:	10002f1e 	bne	r2,zero,6c38 <__pow5mult+0xe8>
    6b7c:	2825883a 	mov	r18,r5
    6b80:	8021d0ba 	srai	r16,r16,2
    6b84:	80001a26 	beq	r16,zero,6bf0 <__pow5mult+0xa0>
    6b88:	9c401217 	ldw	r17,72(r19)
    6b8c:	8800061e 	bne	r17,zero,6ba8 <__pow5mult+0x58>
    6b90:	00003406 	br	6c64 <__pow5mult+0x114>
    6b94:	8021d07a 	srai	r16,r16,1
    6b98:	80001526 	beq	r16,zero,6bf0 <__pow5mult+0xa0>
    6b9c:	88800017 	ldw	r2,0(r17)
    6ba0:	10001c26 	beq	r2,zero,6c14 <__pow5mult+0xc4>
    6ba4:	1023883a 	mov	r17,r2
    6ba8:	8080004c 	andi	r2,r16,1
    6bac:	103ff926 	beq	r2,zero,6b94 <__alt_data_end+0xfffe6b94>
    6bb0:	880d883a 	mov	r6,r17
    6bb4:	900b883a 	mov	r5,r18
    6bb8:	9809883a 	mov	r4,r19
    6bbc:	00069580 	call	6958 <__multiply>
    6bc0:	90001b26 	beq	r18,zero,6c30 <__pow5mult+0xe0>
    6bc4:	91000117 	ldw	r4,4(r18)
    6bc8:	98c01317 	ldw	r3,76(r19)
    6bcc:	8021d07a 	srai	r16,r16,1
    6bd0:	2109883a 	add	r4,r4,r4
    6bd4:	2109883a 	add	r4,r4,r4
    6bd8:	1907883a 	add	r3,r3,r4
    6bdc:	19000017 	ldw	r4,0(r3)
    6be0:	91000015 	stw	r4,0(r18)
    6be4:	1c800015 	stw	r18,0(r3)
    6be8:	1025883a 	mov	r18,r2
    6bec:	803feb1e 	bne	r16,zero,6b9c <__alt_data_end+0xfffe6b9c>
    6bf0:	9005883a 	mov	r2,r18
    6bf4:	dfc00517 	ldw	ra,20(sp)
    6bf8:	dd000417 	ldw	r20,16(sp)
    6bfc:	dcc00317 	ldw	r19,12(sp)
    6c00:	dc800217 	ldw	r18,8(sp)
    6c04:	dc400117 	ldw	r17,4(sp)
    6c08:	dc000017 	ldw	r16,0(sp)
    6c0c:	dec00604 	addi	sp,sp,24
    6c10:	f800283a 	ret
    6c14:	880d883a 	mov	r6,r17
    6c18:	880b883a 	mov	r5,r17
    6c1c:	9809883a 	mov	r4,r19
    6c20:	00069580 	call	6958 <__multiply>
    6c24:	88800015 	stw	r2,0(r17)
    6c28:	10000015 	stw	zero,0(r2)
    6c2c:	003fdd06 	br	6ba4 <__alt_data_end+0xfffe6ba4>
    6c30:	1025883a 	mov	r18,r2
    6c34:	003fd706 	br	6b94 <__alt_data_end+0xfffe6b94>
    6c38:	10bfffc4 	addi	r2,r2,-1
    6c3c:	1085883a 	add	r2,r2,r2
    6c40:	00c00074 	movhi	r3,1
    6c44:	18fe1804 	addi	r3,r3,-1952
    6c48:	1085883a 	add	r2,r2,r2
    6c4c:	1885883a 	add	r2,r3,r2
    6c50:	11800017 	ldw	r6,0(r2)
    6c54:	000f883a 	mov	r7,zero
    6c58:	00065e00 	call	65e0 <__multadd>
    6c5c:	1025883a 	mov	r18,r2
    6c60:	003fc706 	br	6b80 <__alt_data_end+0xfffe6b80>
    6c64:	05000044 	movi	r20,1
    6c68:	a00b883a 	mov	r5,r20
    6c6c:	9809883a 	mov	r4,r19
    6c70:	00065100 	call	6510 <_Balloc>
    6c74:	1023883a 	mov	r17,r2
    6c78:	00809c44 	movi	r2,625
    6c7c:	88800515 	stw	r2,20(r17)
    6c80:	8d000415 	stw	r20,16(r17)
    6c84:	9c401215 	stw	r17,72(r19)
    6c88:	88000015 	stw	zero,0(r17)
    6c8c:	003fc606 	br	6ba8 <__alt_data_end+0xfffe6ba8>

00006c90 <__lshift>:
    6c90:	defff904 	addi	sp,sp,-28
    6c94:	dd400515 	stw	r21,20(sp)
    6c98:	dcc00315 	stw	r19,12(sp)
    6c9c:	302bd17a 	srai	r21,r6,5
    6ca0:	2cc00417 	ldw	r19,16(r5)
    6ca4:	28800217 	ldw	r2,8(r5)
    6ca8:	dd000415 	stw	r20,16(sp)
    6cac:	ace7883a 	add	r19,r21,r19
    6cb0:	dc800215 	stw	r18,8(sp)
    6cb4:	dc400115 	stw	r17,4(sp)
    6cb8:	dc000015 	stw	r16,0(sp)
    6cbc:	dfc00615 	stw	ra,24(sp)
    6cc0:	9c000044 	addi	r16,r19,1
    6cc4:	2823883a 	mov	r17,r5
    6cc8:	3029883a 	mov	r20,r6
    6ccc:	2025883a 	mov	r18,r4
    6cd0:	29400117 	ldw	r5,4(r5)
    6cd4:	1400030e 	bge	r2,r16,6ce4 <__lshift+0x54>
    6cd8:	1085883a 	add	r2,r2,r2
    6cdc:	29400044 	addi	r5,r5,1
    6ce0:	143ffd16 	blt	r2,r16,6cd8 <__alt_data_end+0xfffe6cd8>
    6ce4:	9009883a 	mov	r4,r18
    6ce8:	00065100 	call	6510 <_Balloc>
    6cec:	10c00504 	addi	r3,r2,20
    6cf0:	0540070e 	bge	zero,r21,6d10 <__lshift+0x80>
    6cf4:	ad6b883a 	add	r21,r21,r21
    6cf8:	ad6b883a 	add	r21,r21,r21
    6cfc:	1809883a 	mov	r4,r3
    6d00:	1d47883a 	add	r3,r3,r21
    6d04:	20000015 	stw	zero,0(r4)
    6d08:	21000104 	addi	r4,r4,4
    6d0c:	193ffd1e 	bne	r3,r4,6d04 <__alt_data_end+0xfffe6d04>
    6d10:	8a000417 	ldw	r8,16(r17)
    6d14:	89000504 	addi	r4,r17,20
    6d18:	a18007cc 	andi	r6,r20,31
    6d1c:	4211883a 	add	r8,r8,r8
    6d20:	4211883a 	add	r8,r8,r8
    6d24:	2211883a 	add	r8,r4,r8
    6d28:	30002326 	beq	r6,zero,6db8 <__lshift+0x128>
    6d2c:	02400804 	movi	r9,32
    6d30:	4993c83a 	sub	r9,r9,r6
    6d34:	000b883a 	mov	r5,zero
    6d38:	21c00017 	ldw	r7,0(r4)
    6d3c:	1815883a 	mov	r10,r3
    6d40:	18c00104 	addi	r3,r3,4
    6d44:	398e983a 	sll	r7,r7,r6
    6d48:	21000104 	addi	r4,r4,4
    6d4c:	394ab03a 	or	r5,r7,r5
    6d50:	197fff15 	stw	r5,-4(r3)
    6d54:	217fff17 	ldw	r5,-4(r4)
    6d58:	2a4ad83a 	srl	r5,r5,r9
    6d5c:	223ff636 	bltu	r4,r8,6d38 <__alt_data_end+0xfffe6d38>
    6d60:	51400115 	stw	r5,4(r10)
    6d64:	28001a1e 	bne	r5,zero,6dd0 <__lshift+0x140>
    6d68:	843fffc4 	addi	r16,r16,-1
    6d6c:	14000415 	stw	r16,16(r2)
    6d70:	88000826 	beq	r17,zero,6d94 <__lshift+0x104>
    6d74:	89000117 	ldw	r4,4(r17)
    6d78:	90c01317 	ldw	r3,76(r18)
    6d7c:	2109883a 	add	r4,r4,r4
    6d80:	2109883a 	add	r4,r4,r4
    6d84:	1907883a 	add	r3,r3,r4
    6d88:	19000017 	ldw	r4,0(r3)
    6d8c:	89000015 	stw	r4,0(r17)
    6d90:	1c400015 	stw	r17,0(r3)
    6d94:	dfc00617 	ldw	ra,24(sp)
    6d98:	dd400517 	ldw	r21,20(sp)
    6d9c:	dd000417 	ldw	r20,16(sp)
    6da0:	dcc00317 	ldw	r19,12(sp)
    6da4:	dc800217 	ldw	r18,8(sp)
    6da8:	dc400117 	ldw	r17,4(sp)
    6dac:	dc000017 	ldw	r16,0(sp)
    6db0:	dec00704 	addi	sp,sp,28
    6db4:	f800283a 	ret
    6db8:	21400017 	ldw	r5,0(r4)
    6dbc:	18c00104 	addi	r3,r3,4
    6dc0:	21000104 	addi	r4,r4,4
    6dc4:	197fff15 	stw	r5,-4(r3)
    6dc8:	223ffb36 	bltu	r4,r8,6db8 <__alt_data_end+0xfffe6db8>
    6dcc:	003fe606 	br	6d68 <__alt_data_end+0xfffe6d68>
    6dd0:	9c000084 	addi	r16,r19,2
    6dd4:	003fe406 	br	6d68 <__alt_data_end+0xfffe6d68>

00006dd8 <__mcmp>:
    6dd8:	20800417 	ldw	r2,16(r4)
    6ddc:	28c00417 	ldw	r3,16(r5)
    6de0:	10c5c83a 	sub	r2,r2,r3
    6de4:	1000111e 	bne	r2,zero,6e2c <__mcmp+0x54>
    6de8:	18c7883a 	add	r3,r3,r3
    6dec:	18c7883a 	add	r3,r3,r3
    6df0:	21000504 	addi	r4,r4,20
    6df4:	29400504 	addi	r5,r5,20
    6df8:	20c5883a 	add	r2,r4,r3
    6dfc:	28cb883a 	add	r5,r5,r3
    6e00:	00000106 	br	6e08 <__mcmp+0x30>
    6e04:	20800a2e 	bgeu	r4,r2,6e30 <__mcmp+0x58>
    6e08:	10bfff04 	addi	r2,r2,-4
    6e0c:	297fff04 	addi	r5,r5,-4
    6e10:	11800017 	ldw	r6,0(r2)
    6e14:	28c00017 	ldw	r3,0(r5)
    6e18:	30fffa26 	beq	r6,r3,6e04 <__alt_data_end+0xfffe6e04>
    6e1c:	30c00236 	bltu	r6,r3,6e28 <__mcmp+0x50>
    6e20:	00800044 	movi	r2,1
    6e24:	f800283a 	ret
    6e28:	00bfffc4 	movi	r2,-1
    6e2c:	f800283a 	ret
    6e30:	0005883a 	mov	r2,zero
    6e34:	f800283a 	ret

00006e38 <__mdiff>:
    6e38:	28c00417 	ldw	r3,16(r5)
    6e3c:	30800417 	ldw	r2,16(r6)
    6e40:	defffa04 	addi	sp,sp,-24
    6e44:	dcc00315 	stw	r19,12(sp)
    6e48:	dc800215 	stw	r18,8(sp)
    6e4c:	dfc00515 	stw	ra,20(sp)
    6e50:	dd000415 	stw	r20,16(sp)
    6e54:	dc400115 	stw	r17,4(sp)
    6e58:	dc000015 	stw	r16,0(sp)
    6e5c:	1887c83a 	sub	r3,r3,r2
    6e60:	2825883a 	mov	r18,r5
    6e64:	3027883a 	mov	r19,r6
    6e68:	1800141e 	bne	r3,zero,6ebc <__mdiff+0x84>
    6e6c:	1085883a 	add	r2,r2,r2
    6e70:	1085883a 	add	r2,r2,r2
    6e74:	2a000504 	addi	r8,r5,20
    6e78:	34000504 	addi	r16,r6,20
    6e7c:	4087883a 	add	r3,r8,r2
    6e80:	8085883a 	add	r2,r16,r2
    6e84:	00000106 	br	6e8c <__mdiff+0x54>
    6e88:	40c0592e 	bgeu	r8,r3,6ff0 <__mdiff+0x1b8>
    6e8c:	18ffff04 	addi	r3,r3,-4
    6e90:	10bfff04 	addi	r2,r2,-4
    6e94:	19c00017 	ldw	r7,0(r3)
    6e98:	11400017 	ldw	r5,0(r2)
    6e9c:	397ffa26 	beq	r7,r5,6e88 <__alt_data_end+0xfffe6e88>
    6ea0:	3940592e 	bgeu	r7,r5,7008 <__mdiff+0x1d0>
    6ea4:	9005883a 	mov	r2,r18
    6ea8:	4023883a 	mov	r17,r8
    6eac:	9825883a 	mov	r18,r19
    6eb0:	05000044 	movi	r20,1
    6eb4:	1027883a 	mov	r19,r2
    6eb8:	00000406 	br	6ecc <__mdiff+0x94>
    6ebc:	18005616 	blt	r3,zero,7018 <__mdiff+0x1e0>
    6ec0:	34400504 	addi	r17,r6,20
    6ec4:	2c000504 	addi	r16,r5,20
    6ec8:	0029883a 	mov	r20,zero
    6ecc:	91400117 	ldw	r5,4(r18)
    6ed0:	00065100 	call	6510 <_Balloc>
    6ed4:	92400417 	ldw	r9,16(r18)
    6ed8:	9b000417 	ldw	r12,16(r19)
    6edc:	12c00504 	addi	r11,r2,20
    6ee0:	4a51883a 	add	r8,r9,r9
    6ee4:	6319883a 	add	r12,r12,r12
    6ee8:	4211883a 	add	r8,r8,r8
    6eec:	6319883a 	add	r12,r12,r12
    6ef0:	15000315 	stw	r20,12(r2)
    6ef4:	8211883a 	add	r8,r16,r8
    6ef8:	8b19883a 	add	r12,r17,r12
    6efc:	0007883a 	mov	r3,zero
    6f00:	81400017 	ldw	r5,0(r16)
    6f04:	89c00017 	ldw	r7,0(r17)
    6f08:	59800104 	addi	r6,r11,4
    6f0c:	293fffcc 	andi	r4,r5,65535
    6f10:	20c7883a 	add	r3,r4,r3
    6f14:	393fffcc 	andi	r4,r7,65535
    6f18:	1909c83a 	sub	r4,r3,r4
    6f1c:	280ad43a 	srli	r5,r5,16
    6f20:	380ed43a 	srli	r7,r7,16
    6f24:	2007d43a 	srai	r3,r4,16
    6f28:	213fffcc 	andi	r4,r4,65535
    6f2c:	29cbc83a 	sub	r5,r5,r7
    6f30:	28c7883a 	add	r3,r5,r3
    6f34:	180a943a 	slli	r5,r3,16
    6f38:	8c400104 	addi	r17,r17,4
    6f3c:	84000104 	addi	r16,r16,4
    6f40:	2908b03a 	or	r4,r5,r4
    6f44:	59000015 	stw	r4,0(r11)
    6f48:	1807d43a 	srai	r3,r3,16
    6f4c:	3015883a 	mov	r10,r6
    6f50:	3017883a 	mov	r11,r6
    6f54:	8b3fea36 	bltu	r17,r12,6f00 <__alt_data_end+0xfffe6f00>
    6f58:	8200162e 	bgeu	r16,r8,6fb4 <__mdiff+0x17c>
    6f5c:	8017883a 	mov	r11,r16
    6f60:	59400017 	ldw	r5,0(r11)
    6f64:	31800104 	addi	r6,r6,4
    6f68:	5ac00104 	addi	r11,r11,4
    6f6c:	293fffcc 	andi	r4,r5,65535
    6f70:	20c7883a 	add	r3,r4,r3
    6f74:	280ed43a 	srli	r7,r5,16
    6f78:	180bd43a 	srai	r5,r3,16
    6f7c:	193fffcc 	andi	r4,r3,65535
    6f80:	3947883a 	add	r3,r7,r5
    6f84:	180a943a 	slli	r5,r3,16
    6f88:	1807d43a 	srai	r3,r3,16
    6f8c:	2908b03a 	or	r4,r5,r4
    6f90:	313fff15 	stw	r4,-4(r6)
    6f94:	5a3ff236 	bltu	r11,r8,6f60 <__alt_data_end+0xfffe6f60>
    6f98:	0406303a 	nor	r3,zero,r16
    6f9c:	1a07883a 	add	r3,r3,r8
    6fa0:	1806d0ba 	srli	r3,r3,2
    6fa4:	18c00044 	addi	r3,r3,1
    6fa8:	18c7883a 	add	r3,r3,r3
    6fac:	18c7883a 	add	r3,r3,r3
    6fb0:	50d5883a 	add	r10,r10,r3
    6fb4:	50ffff04 	addi	r3,r10,-4
    6fb8:	2000041e 	bne	r4,zero,6fcc <__mdiff+0x194>
    6fbc:	18ffff04 	addi	r3,r3,-4
    6fc0:	19000017 	ldw	r4,0(r3)
    6fc4:	4a7fffc4 	addi	r9,r9,-1
    6fc8:	203ffc26 	beq	r4,zero,6fbc <__alt_data_end+0xfffe6fbc>
    6fcc:	12400415 	stw	r9,16(r2)
    6fd0:	dfc00517 	ldw	ra,20(sp)
    6fd4:	dd000417 	ldw	r20,16(sp)
    6fd8:	dcc00317 	ldw	r19,12(sp)
    6fdc:	dc800217 	ldw	r18,8(sp)
    6fe0:	dc400117 	ldw	r17,4(sp)
    6fe4:	dc000017 	ldw	r16,0(sp)
    6fe8:	dec00604 	addi	sp,sp,24
    6fec:	f800283a 	ret
    6ff0:	000b883a 	mov	r5,zero
    6ff4:	00065100 	call	6510 <_Balloc>
    6ff8:	00c00044 	movi	r3,1
    6ffc:	10c00415 	stw	r3,16(r2)
    7000:	10000515 	stw	zero,20(r2)
    7004:	003ff206 	br	6fd0 <__alt_data_end+0xfffe6fd0>
    7008:	8023883a 	mov	r17,r16
    700c:	0029883a 	mov	r20,zero
    7010:	4021883a 	mov	r16,r8
    7014:	003fad06 	br	6ecc <__alt_data_end+0xfffe6ecc>
    7018:	9005883a 	mov	r2,r18
    701c:	94400504 	addi	r17,r18,20
    7020:	9c000504 	addi	r16,r19,20
    7024:	9825883a 	mov	r18,r19
    7028:	05000044 	movi	r20,1
    702c:	1027883a 	mov	r19,r2
    7030:	003fa606 	br	6ecc <__alt_data_end+0xfffe6ecc>

00007034 <__ulp>:
    7034:	295ffc2c 	andhi	r5,r5,32752
    7038:	00bf3034 	movhi	r2,64704
    703c:	2887883a 	add	r3,r5,r2
    7040:	00c0020e 	bge	zero,r3,704c <__ulp+0x18>
    7044:	0005883a 	mov	r2,zero
    7048:	f800283a 	ret
    704c:	00c7c83a 	sub	r3,zero,r3
    7050:	1807d53a 	srai	r3,r3,20
    7054:	008004c4 	movi	r2,19
    7058:	10c00b0e 	bge	r2,r3,7088 <__ulp+0x54>
    705c:	18bffb04 	addi	r2,r3,-20
    7060:	01000784 	movi	r4,30
    7064:	0007883a 	mov	r3,zero
    7068:	20800516 	blt	r4,r2,7080 <__ulp+0x4c>
    706c:	010007c4 	movi	r4,31
    7070:	2089c83a 	sub	r4,r4,r2
    7074:	00800044 	movi	r2,1
    7078:	1104983a 	sll	r2,r2,r4
    707c:	f800283a 	ret
    7080:	00800044 	movi	r2,1
    7084:	f800283a 	ret
    7088:	01400234 	movhi	r5,8
    708c:	28c7d83a 	sra	r3,r5,r3
    7090:	0005883a 	mov	r2,zero
    7094:	f800283a 	ret

00007098 <__b2d>:
    7098:	defffa04 	addi	sp,sp,-24
    709c:	dc000015 	stw	r16,0(sp)
    70a0:	24000417 	ldw	r16,16(r4)
    70a4:	dc400115 	stw	r17,4(sp)
    70a8:	24400504 	addi	r17,r4,20
    70ac:	8421883a 	add	r16,r16,r16
    70b0:	8421883a 	add	r16,r16,r16
    70b4:	8c21883a 	add	r16,r17,r16
    70b8:	dc800215 	stw	r18,8(sp)
    70bc:	84bfff17 	ldw	r18,-4(r16)
    70c0:	dd000415 	stw	r20,16(sp)
    70c4:	dcc00315 	stw	r19,12(sp)
    70c8:	9009883a 	mov	r4,r18
    70cc:	2829883a 	mov	r20,r5
    70d0:	dfc00515 	stw	ra,20(sp)
    70d4:	00068040 	call	6804 <__hi0bits>
    70d8:	00c00804 	movi	r3,32
    70dc:	1889c83a 	sub	r4,r3,r2
    70e0:	a1000015 	stw	r4,0(r20)
    70e4:	01000284 	movi	r4,10
    70e8:	84ffff04 	addi	r19,r16,-4
    70ec:	20801216 	blt	r4,r2,7138 <__b2d+0xa0>
    70f0:	018002c4 	movi	r6,11
    70f4:	308dc83a 	sub	r6,r6,r2
    70f8:	9186d83a 	srl	r3,r18,r6
    70fc:	18cffc34 	orhi	r3,r3,16368
    7100:	8cc0212e 	bgeu	r17,r19,7188 <__b2d+0xf0>
    7104:	813ffe17 	ldw	r4,-8(r16)
    7108:	218cd83a 	srl	r6,r4,r6
    710c:	10800544 	addi	r2,r2,21
    7110:	9084983a 	sll	r2,r18,r2
    7114:	1184b03a 	or	r2,r2,r6
    7118:	dfc00517 	ldw	ra,20(sp)
    711c:	dd000417 	ldw	r20,16(sp)
    7120:	dcc00317 	ldw	r19,12(sp)
    7124:	dc800217 	ldw	r18,8(sp)
    7128:	dc400117 	ldw	r17,4(sp)
    712c:	dc000017 	ldw	r16,0(sp)
    7130:	dec00604 	addi	sp,sp,24
    7134:	f800283a 	ret
    7138:	8cc00f2e 	bgeu	r17,r19,7178 <__b2d+0xe0>
    713c:	117ffd44 	addi	r5,r2,-11
    7140:	80bffe17 	ldw	r2,-8(r16)
    7144:	28000e26 	beq	r5,zero,7180 <__b2d+0xe8>
    7148:	1949c83a 	sub	r4,r3,r5
    714c:	9164983a 	sll	r18,r18,r5
    7150:	1106d83a 	srl	r3,r2,r4
    7154:	81bffe04 	addi	r6,r16,-8
    7158:	948ffc34 	orhi	r18,r18,16368
    715c:	90c6b03a 	or	r3,r18,r3
    7160:	89800e2e 	bgeu	r17,r6,719c <__b2d+0x104>
    7164:	81bffd17 	ldw	r6,-12(r16)
    7168:	1144983a 	sll	r2,r2,r5
    716c:	310ad83a 	srl	r5,r6,r4
    7170:	2884b03a 	or	r2,r5,r2
    7174:	003fe806 	br	7118 <__alt_data_end+0xfffe7118>
    7178:	10bffd44 	addi	r2,r2,-11
    717c:	1000041e 	bne	r2,zero,7190 <__b2d+0xf8>
    7180:	90cffc34 	orhi	r3,r18,16368
    7184:	003fe406 	br	7118 <__alt_data_end+0xfffe7118>
    7188:	000d883a 	mov	r6,zero
    718c:	003fdf06 	br	710c <__alt_data_end+0xfffe710c>
    7190:	90a4983a 	sll	r18,r18,r2
    7194:	0005883a 	mov	r2,zero
    7198:	003ff906 	br	7180 <__alt_data_end+0xfffe7180>
    719c:	1144983a 	sll	r2,r2,r5
    71a0:	003fdd06 	br	7118 <__alt_data_end+0xfffe7118>

000071a4 <__d2b>:
    71a4:	defff804 	addi	sp,sp,-32
    71a8:	dc000215 	stw	r16,8(sp)
    71ac:	3021883a 	mov	r16,r6
    71b0:	dc400315 	stw	r17,12(sp)
    71b4:	8022907a 	slli	r17,r16,1
    71b8:	dd000615 	stw	r20,24(sp)
    71bc:	2829883a 	mov	r20,r5
    71c0:	01400044 	movi	r5,1
    71c4:	dcc00515 	stw	r19,20(sp)
    71c8:	dc800415 	stw	r18,16(sp)
    71cc:	dfc00715 	stw	ra,28(sp)
    71d0:	3825883a 	mov	r18,r7
    71d4:	8822d57a 	srli	r17,r17,21
    71d8:	00065100 	call	6510 <_Balloc>
    71dc:	1027883a 	mov	r19,r2
    71e0:	00800434 	movhi	r2,16
    71e4:	10bfffc4 	addi	r2,r2,-1
    71e8:	808c703a 	and	r6,r16,r2
    71ec:	88000126 	beq	r17,zero,71f4 <__d2b+0x50>
    71f0:	31800434 	orhi	r6,r6,16
    71f4:	d9800015 	stw	r6,0(sp)
    71f8:	a0002426 	beq	r20,zero,728c <__d2b+0xe8>
    71fc:	d9000104 	addi	r4,sp,4
    7200:	dd000115 	stw	r20,4(sp)
    7204:	000686c0 	call	686c <__lo0bits>
    7208:	d8c00017 	ldw	r3,0(sp)
    720c:	10002f1e 	bne	r2,zero,72cc <__d2b+0x128>
    7210:	d9000117 	ldw	r4,4(sp)
    7214:	99000515 	stw	r4,20(r19)
    7218:	1821003a 	cmpeq	r16,r3,zero
    721c:	01000084 	movi	r4,2
    7220:	2421c83a 	sub	r16,r4,r16
    7224:	98c00615 	stw	r3,24(r19)
    7228:	9c000415 	stw	r16,16(r19)
    722c:	88001f1e 	bne	r17,zero,72ac <__d2b+0x108>
    7230:	10bef384 	addi	r2,r2,-1074
    7234:	90800015 	stw	r2,0(r18)
    7238:	00900034 	movhi	r2,16384
    723c:	10bfffc4 	addi	r2,r2,-1
    7240:	8085883a 	add	r2,r16,r2
    7244:	1085883a 	add	r2,r2,r2
    7248:	1085883a 	add	r2,r2,r2
    724c:	9885883a 	add	r2,r19,r2
    7250:	11000517 	ldw	r4,20(r2)
    7254:	8020917a 	slli	r16,r16,5
    7258:	00068040 	call	6804 <__hi0bits>
    725c:	d8c00817 	ldw	r3,32(sp)
    7260:	8085c83a 	sub	r2,r16,r2
    7264:	18800015 	stw	r2,0(r3)
    7268:	9805883a 	mov	r2,r19
    726c:	dfc00717 	ldw	ra,28(sp)
    7270:	dd000617 	ldw	r20,24(sp)
    7274:	dcc00517 	ldw	r19,20(sp)
    7278:	dc800417 	ldw	r18,16(sp)
    727c:	dc400317 	ldw	r17,12(sp)
    7280:	dc000217 	ldw	r16,8(sp)
    7284:	dec00804 	addi	sp,sp,32
    7288:	f800283a 	ret
    728c:	d809883a 	mov	r4,sp
    7290:	000686c0 	call	686c <__lo0bits>
    7294:	d8c00017 	ldw	r3,0(sp)
    7298:	04000044 	movi	r16,1
    729c:	9c000415 	stw	r16,16(r19)
    72a0:	98c00515 	stw	r3,20(r19)
    72a4:	10800804 	addi	r2,r2,32
    72a8:	883fe126 	beq	r17,zero,7230 <__alt_data_end+0xfffe7230>
    72ac:	00c00d44 	movi	r3,53
    72b0:	8c7ef344 	addi	r17,r17,-1075
    72b4:	88a3883a 	add	r17,r17,r2
    72b8:	1885c83a 	sub	r2,r3,r2
    72bc:	d8c00817 	ldw	r3,32(sp)
    72c0:	94400015 	stw	r17,0(r18)
    72c4:	18800015 	stw	r2,0(r3)
    72c8:	003fe706 	br	7268 <__alt_data_end+0xfffe7268>
    72cc:	01000804 	movi	r4,32
    72d0:	2089c83a 	sub	r4,r4,r2
    72d4:	1908983a 	sll	r4,r3,r4
    72d8:	d9400117 	ldw	r5,4(sp)
    72dc:	1886d83a 	srl	r3,r3,r2
    72e0:	2148b03a 	or	r4,r4,r5
    72e4:	99000515 	stw	r4,20(r19)
    72e8:	d8c00015 	stw	r3,0(sp)
    72ec:	003fca06 	br	7218 <__alt_data_end+0xfffe7218>

000072f0 <__ratio>:
    72f0:	defff904 	addi	sp,sp,-28
    72f4:	dc400315 	stw	r17,12(sp)
    72f8:	2823883a 	mov	r17,r5
    72fc:	d9400104 	addi	r5,sp,4
    7300:	dfc00615 	stw	ra,24(sp)
    7304:	dcc00515 	stw	r19,20(sp)
    7308:	dc800415 	stw	r18,16(sp)
    730c:	2027883a 	mov	r19,r4
    7310:	dc000215 	stw	r16,8(sp)
    7314:	00070980 	call	7098 <__b2d>
    7318:	d80b883a 	mov	r5,sp
    731c:	8809883a 	mov	r4,r17
    7320:	1025883a 	mov	r18,r2
    7324:	1821883a 	mov	r16,r3
    7328:	00070980 	call	7098 <__b2d>
    732c:	8a000417 	ldw	r8,16(r17)
    7330:	99000417 	ldw	r4,16(r19)
    7334:	d9400117 	ldw	r5,4(sp)
    7338:	2209c83a 	sub	r4,r4,r8
    733c:	2010917a 	slli	r8,r4,5
    7340:	d9000017 	ldw	r4,0(sp)
    7344:	2909c83a 	sub	r4,r5,r4
    7348:	4109883a 	add	r4,r8,r4
    734c:	01000e0e 	bge	zero,r4,7388 <__ratio+0x98>
    7350:	2008953a 	slli	r4,r4,20
    7354:	2421883a 	add	r16,r4,r16
    7358:	100d883a 	mov	r6,r2
    735c:	180f883a 	mov	r7,r3
    7360:	9009883a 	mov	r4,r18
    7364:	800b883a 	mov	r5,r16
    7368:	000b1dc0 	call	b1dc <__divdf3>
    736c:	dfc00617 	ldw	ra,24(sp)
    7370:	dcc00517 	ldw	r19,20(sp)
    7374:	dc800417 	ldw	r18,16(sp)
    7378:	dc400317 	ldw	r17,12(sp)
    737c:	dc000217 	ldw	r16,8(sp)
    7380:	dec00704 	addi	sp,sp,28
    7384:	f800283a 	ret
    7388:	2008953a 	slli	r4,r4,20
    738c:	1907c83a 	sub	r3,r3,r4
    7390:	003ff106 	br	7358 <__alt_data_end+0xfffe7358>

00007394 <_mprec_log10>:
    7394:	defffe04 	addi	sp,sp,-8
    7398:	dc000015 	stw	r16,0(sp)
    739c:	dfc00115 	stw	ra,4(sp)
    73a0:	008005c4 	movi	r2,23
    73a4:	2021883a 	mov	r16,r4
    73a8:	11000d0e 	bge	r2,r4,73e0 <_mprec_log10+0x4c>
    73ac:	0005883a 	mov	r2,zero
    73b0:	00cffc34 	movhi	r3,16368
    73b4:	843fffc4 	addi	r16,r16,-1
    73b8:	000d883a 	mov	r6,zero
    73bc:	01d00934 	movhi	r7,16420
    73c0:	1009883a 	mov	r4,r2
    73c4:	180b883a 	mov	r5,r3
    73c8:	000bd1c0 	call	bd1c <__muldf3>
    73cc:	803ff91e 	bne	r16,zero,73b4 <__alt_data_end+0xfffe73b4>
    73d0:	dfc00117 	ldw	ra,4(sp)
    73d4:	dc000017 	ldw	r16,0(sp)
    73d8:	dec00204 	addi	sp,sp,8
    73dc:	f800283a 	ret
    73e0:	202090fa 	slli	r16,r4,3
    73e4:	00800074 	movhi	r2,1
    73e8:	10be2f04 	addi	r2,r2,-1860
    73ec:	1421883a 	add	r16,r2,r16
    73f0:	80800017 	ldw	r2,0(r16)
    73f4:	80c00117 	ldw	r3,4(r16)
    73f8:	dfc00117 	ldw	ra,4(sp)
    73fc:	dc000017 	ldw	r16,0(sp)
    7400:	dec00204 	addi	sp,sp,8
    7404:	f800283a 	ret

00007408 <__copybits>:
    7408:	297fffc4 	addi	r5,r5,-1
    740c:	280fd17a 	srai	r7,r5,5
    7410:	30c00417 	ldw	r3,16(r6)
    7414:	30800504 	addi	r2,r6,20
    7418:	39c00044 	addi	r7,r7,1
    741c:	18c7883a 	add	r3,r3,r3
    7420:	39cf883a 	add	r7,r7,r7
    7424:	18c7883a 	add	r3,r3,r3
    7428:	39cf883a 	add	r7,r7,r7
    742c:	10c7883a 	add	r3,r2,r3
    7430:	21cf883a 	add	r7,r4,r7
    7434:	10c00d2e 	bgeu	r2,r3,746c <__copybits+0x64>
    7438:	200b883a 	mov	r5,r4
    743c:	12000017 	ldw	r8,0(r2)
    7440:	29400104 	addi	r5,r5,4
    7444:	10800104 	addi	r2,r2,4
    7448:	2a3fff15 	stw	r8,-4(r5)
    744c:	10fffb36 	bltu	r2,r3,743c <__alt_data_end+0xfffe743c>
    7450:	1985c83a 	sub	r2,r3,r6
    7454:	10bffac4 	addi	r2,r2,-21
    7458:	1004d0ba 	srli	r2,r2,2
    745c:	10800044 	addi	r2,r2,1
    7460:	1085883a 	add	r2,r2,r2
    7464:	1085883a 	add	r2,r2,r2
    7468:	2089883a 	add	r4,r4,r2
    746c:	21c0032e 	bgeu	r4,r7,747c <__copybits+0x74>
    7470:	20000015 	stw	zero,0(r4)
    7474:	21000104 	addi	r4,r4,4
    7478:	21fffd36 	bltu	r4,r7,7470 <__alt_data_end+0xfffe7470>
    747c:	f800283a 	ret

00007480 <__any_on>:
    7480:	20c00417 	ldw	r3,16(r4)
    7484:	2805d17a 	srai	r2,r5,5
    7488:	21000504 	addi	r4,r4,20
    748c:	18800d0e 	bge	r3,r2,74c4 <__any_on+0x44>
    7490:	18c7883a 	add	r3,r3,r3
    7494:	18c7883a 	add	r3,r3,r3
    7498:	20c7883a 	add	r3,r4,r3
    749c:	20c0192e 	bgeu	r4,r3,7504 <__any_on+0x84>
    74a0:	18bfff17 	ldw	r2,-4(r3)
    74a4:	18ffff04 	addi	r3,r3,-4
    74a8:	1000041e 	bne	r2,zero,74bc <__any_on+0x3c>
    74ac:	20c0142e 	bgeu	r4,r3,7500 <__any_on+0x80>
    74b0:	18ffff04 	addi	r3,r3,-4
    74b4:	19400017 	ldw	r5,0(r3)
    74b8:	283ffc26 	beq	r5,zero,74ac <__alt_data_end+0xfffe74ac>
    74bc:	00800044 	movi	r2,1
    74c0:	f800283a 	ret
    74c4:	10c00a0e 	bge	r2,r3,74f0 <__any_on+0x70>
    74c8:	1085883a 	add	r2,r2,r2
    74cc:	1085883a 	add	r2,r2,r2
    74d0:	294007cc 	andi	r5,r5,31
    74d4:	2087883a 	add	r3,r4,r2
    74d8:	283ff026 	beq	r5,zero,749c <__alt_data_end+0xfffe749c>
    74dc:	19800017 	ldw	r6,0(r3)
    74e0:	3144d83a 	srl	r2,r6,r5
    74e4:	114a983a 	sll	r5,r2,r5
    74e8:	317ff41e 	bne	r6,r5,74bc <__alt_data_end+0xfffe74bc>
    74ec:	003feb06 	br	749c <__alt_data_end+0xfffe749c>
    74f0:	1085883a 	add	r2,r2,r2
    74f4:	1085883a 	add	r2,r2,r2
    74f8:	2087883a 	add	r3,r4,r2
    74fc:	003fe706 	br	749c <__alt_data_end+0xfffe749c>
    7500:	f800283a 	ret
    7504:	0005883a 	mov	r2,zero
    7508:	f800283a 	ret

0000750c <_realloc_r>:
    750c:	defff604 	addi	sp,sp,-40
    7510:	dc800215 	stw	r18,8(sp)
    7514:	dfc00915 	stw	ra,36(sp)
    7518:	df000815 	stw	fp,32(sp)
    751c:	ddc00715 	stw	r23,28(sp)
    7520:	dd800615 	stw	r22,24(sp)
    7524:	dd400515 	stw	r21,20(sp)
    7528:	dd000415 	stw	r20,16(sp)
    752c:	dcc00315 	stw	r19,12(sp)
    7530:	dc400115 	stw	r17,4(sp)
    7534:	dc000015 	stw	r16,0(sp)
    7538:	3025883a 	mov	r18,r6
    753c:	2800b726 	beq	r5,zero,781c <_realloc_r+0x310>
    7540:	282b883a 	mov	r21,r5
    7544:	2029883a 	mov	r20,r4
    7548:	000d5140 	call	d514 <__malloc_lock>
    754c:	a8bfff17 	ldw	r2,-4(r21)
    7550:	043fff04 	movi	r16,-4
    7554:	90c002c4 	addi	r3,r18,11
    7558:	01000584 	movi	r4,22
    755c:	acfffe04 	addi	r19,r21,-8
    7560:	1420703a 	and	r16,r2,r16
    7564:	20c0332e 	bgeu	r4,r3,7634 <_realloc_r+0x128>
    7568:	047ffe04 	movi	r17,-8
    756c:	1c62703a 	and	r17,r3,r17
    7570:	8807883a 	mov	r3,r17
    7574:	88005816 	blt	r17,zero,76d8 <_realloc_r+0x1cc>
    7578:	8c805736 	bltu	r17,r18,76d8 <_realloc_r+0x1cc>
    757c:	80c0300e 	bge	r16,r3,7640 <_realloc_r+0x134>
    7580:	07000074 	movhi	fp,1
    7584:	e73fdd04 	addi	fp,fp,-140
    7588:	e1c00217 	ldw	r7,8(fp)
    758c:	9c09883a 	add	r4,r19,r16
    7590:	22000117 	ldw	r8,4(r4)
    7594:	21c06326 	beq	r4,r7,7724 <_realloc_r+0x218>
    7598:	017fff84 	movi	r5,-2
    759c:	414a703a 	and	r5,r8,r5
    75a0:	214b883a 	add	r5,r4,r5
    75a4:	29800117 	ldw	r6,4(r5)
    75a8:	3180004c 	andi	r6,r6,1
    75ac:	30003f26 	beq	r6,zero,76ac <_realloc_r+0x1a0>
    75b0:	1080004c 	andi	r2,r2,1
    75b4:	10008326 	beq	r2,zero,77c4 <_realloc_r+0x2b8>
    75b8:	900b883a 	mov	r5,r18
    75bc:	a009883a 	mov	r4,r20
    75c0:	00058540 	call	5854 <_malloc_r>
    75c4:	1025883a 	mov	r18,r2
    75c8:	10011e26 	beq	r2,zero,7a44 <_realloc_r+0x538>
    75cc:	a93fff17 	ldw	r4,-4(r21)
    75d0:	10fffe04 	addi	r3,r2,-8
    75d4:	00bfff84 	movi	r2,-2
    75d8:	2084703a 	and	r2,r4,r2
    75dc:	9885883a 	add	r2,r19,r2
    75e0:	1880ee26 	beq	r3,r2,799c <_realloc_r+0x490>
    75e4:	81bfff04 	addi	r6,r16,-4
    75e8:	00800904 	movi	r2,36
    75ec:	1180b836 	bltu	r2,r6,78d0 <_realloc_r+0x3c4>
    75f0:	00c004c4 	movi	r3,19
    75f4:	19809636 	bltu	r3,r6,7850 <_realloc_r+0x344>
    75f8:	9005883a 	mov	r2,r18
    75fc:	a807883a 	mov	r3,r21
    7600:	19000017 	ldw	r4,0(r3)
    7604:	11000015 	stw	r4,0(r2)
    7608:	19000117 	ldw	r4,4(r3)
    760c:	11000115 	stw	r4,4(r2)
    7610:	18c00217 	ldw	r3,8(r3)
    7614:	10c00215 	stw	r3,8(r2)
    7618:	a80b883a 	mov	r5,r21
    761c:	a009883a 	mov	r4,r20
    7620:	0004c680 	call	4c68 <_free_r>
    7624:	a009883a 	mov	r4,r20
    7628:	000d5380 	call	d538 <__malloc_unlock>
    762c:	9005883a 	mov	r2,r18
    7630:	00001206 	br	767c <_realloc_r+0x170>
    7634:	00c00404 	movi	r3,16
    7638:	1823883a 	mov	r17,r3
    763c:	003fce06 	br	7578 <__alt_data_end+0xfffe7578>
    7640:	a825883a 	mov	r18,r21
    7644:	8445c83a 	sub	r2,r16,r17
    7648:	00c003c4 	movi	r3,15
    764c:	18802636 	bltu	r3,r2,76e8 <_realloc_r+0x1dc>
    7650:	99800117 	ldw	r6,4(r19)
    7654:	9c07883a 	add	r3,r19,r16
    7658:	3180004c 	andi	r6,r6,1
    765c:	3420b03a 	or	r16,r6,r16
    7660:	9c000115 	stw	r16,4(r19)
    7664:	18800117 	ldw	r2,4(r3)
    7668:	10800054 	ori	r2,r2,1
    766c:	18800115 	stw	r2,4(r3)
    7670:	a009883a 	mov	r4,r20
    7674:	000d5380 	call	d538 <__malloc_unlock>
    7678:	9005883a 	mov	r2,r18
    767c:	dfc00917 	ldw	ra,36(sp)
    7680:	df000817 	ldw	fp,32(sp)
    7684:	ddc00717 	ldw	r23,28(sp)
    7688:	dd800617 	ldw	r22,24(sp)
    768c:	dd400517 	ldw	r21,20(sp)
    7690:	dd000417 	ldw	r20,16(sp)
    7694:	dcc00317 	ldw	r19,12(sp)
    7698:	dc800217 	ldw	r18,8(sp)
    769c:	dc400117 	ldw	r17,4(sp)
    76a0:	dc000017 	ldw	r16,0(sp)
    76a4:	dec00a04 	addi	sp,sp,40
    76a8:	f800283a 	ret
    76ac:	017fff04 	movi	r5,-4
    76b0:	414a703a 	and	r5,r8,r5
    76b4:	814d883a 	add	r6,r16,r5
    76b8:	30c01f16 	blt	r6,r3,7738 <_realloc_r+0x22c>
    76bc:	20800317 	ldw	r2,12(r4)
    76c0:	20c00217 	ldw	r3,8(r4)
    76c4:	a825883a 	mov	r18,r21
    76c8:	3021883a 	mov	r16,r6
    76cc:	18800315 	stw	r2,12(r3)
    76d0:	10c00215 	stw	r3,8(r2)
    76d4:	003fdb06 	br	7644 <__alt_data_end+0xfffe7644>
    76d8:	00800304 	movi	r2,12
    76dc:	a0800015 	stw	r2,0(r20)
    76e0:	0005883a 	mov	r2,zero
    76e4:	003fe506 	br	767c <__alt_data_end+0xfffe767c>
    76e8:	98c00117 	ldw	r3,4(r19)
    76ec:	9c4b883a 	add	r5,r19,r17
    76f0:	11000054 	ori	r4,r2,1
    76f4:	18c0004c 	andi	r3,r3,1
    76f8:	1c62b03a 	or	r17,r3,r17
    76fc:	9c400115 	stw	r17,4(r19)
    7700:	29000115 	stw	r4,4(r5)
    7704:	2885883a 	add	r2,r5,r2
    7708:	10c00117 	ldw	r3,4(r2)
    770c:	29400204 	addi	r5,r5,8
    7710:	a009883a 	mov	r4,r20
    7714:	18c00054 	ori	r3,r3,1
    7718:	10c00115 	stw	r3,4(r2)
    771c:	0004c680 	call	4c68 <_free_r>
    7720:	003fd306 	br	7670 <__alt_data_end+0xfffe7670>
    7724:	017fff04 	movi	r5,-4
    7728:	414a703a 	and	r5,r8,r5
    772c:	89800404 	addi	r6,r17,16
    7730:	8151883a 	add	r8,r16,r5
    7734:	4180590e 	bge	r8,r6,789c <_realloc_r+0x390>
    7738:	1080004c 	andi	r2,r2,1
    773c:	103f9e1e 	bne	r2,zero,75b8 <__alt_data_end+0xfffe75b8>
    7740:	adbffe17 	ldw	r22,-8(r21)
    7744:	00bfff04 	movi	r2,-4
    7748:	9dadc83a 	sub	r22,r19,r22
    774c:	b1800117 	ldw	r6,4(r22)
    7750:	3084703a 	and	r2,r6,r2
    7754:	20002026 	beq	r4,zero,77d8 <_realloc_r+0x2cc>
    7758:	80af883a 	add	r23,r16,r2
    775c:	b96f883a 	add	r23,r23,r5
    7760:	21c05f26 	beq	r4,r7,78e0 <_realloc_r+0x3d4>
    7764:	b8c01c16 	blt	r23,r3,77d8 <_realloc_r+0x2cc>
    7768:	20800317 	ldw	r2,12(r4)
    776c:	20c00217 	ldw	r3,8(r4)
    7770:	81bfff04 	addi	r6,r16,-4
    7774:	01000904 	movi	r4,36
    7778:	18800315 	stw	r2,12(r3)
    777c:	10c00215 	stw	r3,8(r2)
    7780:	b0c00217 	ldw	r3,8(r22)
    7784:	b0800317 	ldw	r2,12(r22)
    7788:	b4800204 	addi	r18,r22,8
    778c:	18800315 	stw	r2,12(r3)
    7790:	10c00215 	stw	r3,8(r2)
    7794:	21801b36 	bltu	r4,r6,7804 <_realloc_r+0x2f8>
    7798:	008004c4 	movi	r2,19
    779c:	1180352e 	bgeu	r2,r6,7874 <_realloc_r+0x368>
    77a0:	a8800017 	ldw	r2,0(r21)
    77a4:	b0800215 	stw	r2,8(r22)
    77a8:	a8800117 	ldw	r2,4(r21)
    77ac:	b0800315 	stw	r2,12(r22)
    77b0:	008006c4 	movi	r2,27
    77b4:	11807f36 	bltu	r2,r6,79b4 <_realloc_r+0x4a8>
    77b8:	b0800404 	addi	r2,r22,16
    77bc:	ad400204 	addi	r21,r21,8
    77c0:	00002d06 	br	7878 <_realloc_r+0x36c>
    77c4:	adbffe17 	ldw	r22,-8(r21)
    77c8:	00bfff04 	movi	r2,-4
    77cc:	9dadc83a 	sub	r22,r19,r22
    77d0:	b1000117 	ldw	r4,4(r22)
    77d4:	2084703a 	and	r2,r4,r2
    77d8:	b03f7726 	beq	r22,zero,75b8 <__alt_data_end+0xfffe75b8>
    77dc:	80af883a 	add	r23,r16,r2
    77e0:	b8ff7516 	blt	r23,r3,75b8 <__alt_data_end+0xfffe75b8>
    77e4:	b0800317 	ldw	r2,12(r22)
    77e8:	b0c00217 	ldw	r3,8(r22)
    77ec:	81bfff04 	addi	r6,r16,-4
    77f0:	01000904 	movi	r4,36
    77f4:	18800315 	stw	r2,12(r3)
    77f8:	10c00215 	stw	r3,8(r2)
    77fc:	b4800204 	addi	r18,r22,8
    7800:	21bfe52e 	bgeu	r4,r6,7798 <__alt_data_end+0xfffe7798>
    7804:	a80b883a 	mov	r5,r21
    7808:	9009883a 	mov	r4,r18
    780c:	000628c0 	call	628c <memmove>
    7810:	b821883a 	mov	r16,r23
    7814:	b027883a 	mov	r19,r22
    7818:	003f8a06 	br	7644 <__alt_data_end+0xfffe7644>
    781c:	300b883a 	mov	r5,r6
    7820:	dfc00917 	ldw	ra,36(sp)
    7824:	df000817 	ldw	fp,32(sp)
    7828:	ddc00717 	ldw	r23,28(sp)
    782c:	dd800617 	ldw	r22,24(sp)
    7830:	dd400517 	ldw	r21,20(sp)
    7834:	dd000417 	ldw	r20,16(sp)
    7838:	dcc00317 	ldw	r19,12(sp)
    783c:	dc800217 	ldw	r18,8(sp)
    7840:	dc400117 	ldw	r17,4(sp)
    7844:	dc000017 	ldw	r16,0(sp)
    7848:	dec00a04 	addi	sp,sp,40
    784c:	00058541 	jmpi	5854 <_malloc_r>
    7850:	a8c00017 	ldw	r3,0(r21)
    7854:	90c00015 	stw	r3,0(r18)
    7858:	a8c00117 	ldw	r3,4(r21)
    785c:	90c00115 	stw	r3,4(r18)
    7860:	00c006c4 	movi	r3,27
    7864:	19804536 	bltu	r3,r6,797c <_realloc_r+0x470>
    7868:	90800204 	addi	r2,r18,8
    786c:	a8c00204 	addi	r3,r21,8
    7870:	003f6306 	br	7600 <__alt_data_end+0xfffe7600>
    7874:	9005883a 	mov	r2,r18
    7878:	a8c00017 	ldw	r3,0(r21)
    787c:	b821883a 	mov	r16,r23
    7880:	b027883a 	mov	r19,r22
    7884:	10c00015 	stw	r3,0(r2)
    7888:	a8c00117 	ldw	r3,4(r21)
    788c:	10c00115 	stw	r3,4(r2)
    7890:	a8c00217 	ldw	r3,8(r21)
    7894:	10c00215 	stw	r3,8(r2)
    7898:	003f6a06 	br	7644 <__alt_data_end+0xfffe7644>
    789c:	9c67883a 	add	r19,r19,r17
    78a0:	4445c83a 	sub	r2,r8,r17
    78a4:	e4c00215 	stw	r19,8(fp)
    78a8:	10800054 	ori	r2,r2,1
    78ac:	98800115 	stw	r2,4(r19)
    78b0:	a8bfff17 	ldw	r2,-4(r21)
    78b4:	a009883a 	mov	r4,r20
    78b8:	1080004c 	andi	r2,r2,1
    78bc:	1462b03a 	or	r17,r2,r17
    78c0:	ac7fff15 	stw	r17,-4(r21)
    78c4:	000d5380 	call	d538 <__malloc_unlock>
    78c8:	a805883a 	mov	r2,r21
    78cc:	003f6b06 	br	767c <__alt_data_end+0xfffe767c>
    78d0:	a80b883a 	mov	r5,r21
    78d4:	9009883a 	mov	r4,r18
    78d8:	000628c0 	call	628c <memmove>
    78dc:	003f4e06 	br	7618 <__alt_data_end+0xfffe7618>
    78e0:	89000404 	addi	r4,r17,16
    78e4:	b93fbc16 	blt	r23,r4,77d8 <__alt_data_end+0xfffe77d8>
    78e8:	b0800317 	ldw	r2,12(r22)
    78ec:	b0c00217 	ldw	r3,8(r22)
    78f0:	81bfff04 	addi	r6,r16,-4
    78f4:	01000904 	movi	r4,36
    78f8:	18800315 	stw	r2,12(r3)
    78fc:	10c00215 	stw	r3,8(r2)
    7900:	b4800204 	addi	r18,r22,8
    7904:	21804336 	bltu	r4,r6,7a14 <_realloc_r+0x508>
    7908:	008004c4 	movi	r2,19
    790c:	11803f2e 	bgeu	r2,r6,7a0c <_realloc_r+0x500>
    7910:	a8800017 	ldw	r2,0(r21)
    7914:	b0800215 	stw	r2,8(r22)
    7918:	a8800117 	ldw	r2,4(r21)
    791c:	b0800315 	stw	r2,12(r22)
    7920:	008006c4 	movi	r2,27
    7924:	11803f36 	bltu	r2,r6,7a24 <_realloc_r+0x518>
    7928:	b0800404 	addi	r2,r22,16
    792c:	ad400204 	addi	r21,r21,8
    7930:	a8c00017 	ldw	r3,0(r21)
    7934:	10c00015 	stw	r3,0(r2)
    7938:	a8c00117 	ldw	r3,4(r21)
    793c:	10c00115 	stw	r3,4(r2)
    7940:	a8c00217 	ldw	r3,8(r21)
    7944:	10c00215 	stw	r3,8(r2)
    7948:	b447883a 	add	r3,r22,r17
    794c:	bc45c83a 	sub	r2,r23,r17
    7950:	e0c00215 	stw	r3,8(fp)
    7954:	10800054 	ori	r2,r2,1
    7958:	18800115 	stw	r2,4(r3)
    795c:	b0800117 	ldw	r2,4(r22)
    7960:	a009883a 	mov	r4,r20
    7964:	1080004c 	andi	r2,r2,1
    7968:	1462b03a 	or	r17,r2,r17
    796c:	b4400115 	stw	r17,4(r22)
    7970:	000d5380 	call	d538 <__malloc_unlock>
    7974:	9005883a 	mov	r2,r18
    7978:	003f4006 	br	767c <__alt_data_end+0xfffe767c>
    797c:	a8c00217 	ldw	r3,8(r21)
    7980:	90c00215 	stw	r3,8(r18)
    7984:	a8c00317 	ldw	r3,12(r21)
    7988:	90c00315 	stw	r3,12(r18)
    798c:	30801126 	beq	r6,r2,79d4 <_realloc_r+0x4c8>
    7990:	90800404 	addi	r2,r18,16
    7994:	a8c00404 	addi	r3,r21,16
    7998:	003f1906 	br	7600 <__alt_data_end+0xfffe7600>
    799c:	90ffff17 	ldw	r3,-4(r18)
    79a0:	00bfff04 	movi	r2,-4
    79a4:	a825883a 	mov	r18,r21
    79a8:	1884703a 	and	r2,r3,r2
    79ac:	80a1883a 	add	r16,r16,r2
    79b0:	003f2406 	br	7644 <__alt_data_end+0xfffe7644>
    79b4:	a8800217 	ldw	r2,8(r21)
    79b8:	b0800415 	stw	r2,16(r22)
    79bc:	a8800317 	ldw	r2,12(r21)
    79c0:	b0800515 	stw	r2,20(r22)
    79c4:	31000a26 	beq	r6,r4,79f0 <_realloc_r+0x4e4>
    79c8:	b0800604 	addi	r2,r22,24
    79cc:	ad400404 	addi	r21,r21,16
    79d0:	003fa906 	br	7878 <__alt_data_end+0xfffe7878>
    79d4:	a9000417 	ldw	r4,16(r21)
    79d8:	90800604 	addi	r2,r18,24
    79dc:	a8c00604 	addi	r3,r21,24
    79e0:	91000415 	stw	r4,16(r18)
    79e4:	a9000517 	ldw	r4,20(r21)
    79e8:	91000515 	stw	r4,20(r18)
    79ec:	003f0406 	br	7600 <__alt_data_end+0xfffe7600>
    79f0:	a8c00417 	ldw	r3,16(r21)
    79f4:	ad400604 	addi	r21,r21,24
    79f8:	b0800804 	addi	r2,r22,32
    79fc:	b0c00615 	stw	r3,24(r22)
    7a00:	a8ffff17 	ldw	r3,-4(r21)
    7a04:	b0c00715 	stw	r3,28(r22)
    7a08:	003f9b06 	br	7878 <__alt_data_end+0xfffe7878>
    7a0c:	9005883a 	mov	r2,r18
    7a10:	003fc706 	br	7930 <__alt_data_end+0xfffe7930>
    7a14:	a80b883a 	mov	r5,r21
    7a18:	9009883a 	mov	r4,r18
    7a1c:	000628c0 	call	628c <memmove>
    7a20:	003fc906 	br	7948 <__alt_data_end+0xfffe7948>
    7a24:	a8800217 	ldw	r2,8(r21)
    7a28:	b0800415 	stw	r2,16(r22)
    7a2c:	a8800317 	ldw	r2,12(r21)
    7a30:	b0800515 	stw	r2,20(r22)
    7a34:	31000726 	beq	r6,r4,7a54 <_realloc_r+0x548>
    7a38:	b0800604 	addi	r2,r22,24
    7a3c:	ad400404 	addi	r21,r21,16
    7a40:	003fbb06 	br	7930 <__alt_data_end+0xfffe7930>
    7a44:	a009883a 	mov	r4,r20
    7a48:	000d5380 	call	d538 <__malloc_unlock>
    7a4c:	0005883a 	mov	r2,zero
    7a50:	003f0a06 	br	767c <__alt_data_end+0xfffe767c>
    7a54:	a8c00417 	ldw	r3,16(r21)
    7a58:	ad400604 	addi	r21,r21,24
    7a5c:	b0800804 	addi	r2,r22,32
    7a60:	b0c00615 	stw	r3,24(r22)
    7a64:	a8ffff17 	ldw	r3,-4(r21)
    7a68:	b0c00715 	stw	r3,28(r22)
    7a6c:	003fb006 	br	7930 <__alt_data_end+0xfffe7930>

00007a70 <__fpclassifyd>:
    7a70:	00a00034 	movhi	r2,32768
    7a74:	10bfffc4 	addi	r2,r2,-1
    7a78:	2884703a 	and	r2,r5,r2
    7a7c:	10000726 	beq	r2,zero,7a9c <__fpclassifyd+0x2c>
    7a80:	00fffc34 	movhi	r3,65520
    7a84:	019ff834 	movhi	r6,32736
    7a88:	28c7883a 	add	r3,r5,r3
    7a8c:	31bfffc4 	addi	r6,r6,-1
    7a90:	30c00536 	bltu	r6,r3,7aa8 <__fpclassifyd+0x38>
    7a94:	00800104 	movi	r2,4
    7a98:	f800283a 	ret
    7a9c:	2000021e 	bne	r4,zero,7aa8 <__fpclassifyd+0x38>
    7aa0:	00800084 	movi	r2,2
    7aa4:	f800283a 	ret
    7aa8:	00dffc34 	movhi	r3,32752
    7aac:	019ff834 	movhi	r6,32736
    7ab0:	28cb883a 	add	r5,r5,r3
    7ab4:	31bfffc4 	addi	r6,r6,-1
    7ab8:	317ff62e 	bgeu	r6,r5,7a94 <__alt_data_end+0xfffe7a94>
    7abc:	01400434 	movhi	r5,16
    7ac0:	297fffc4 	addi	r5,r5,-1
    7ac4:	28800236 	bltu	r5,r2,7ad0 <__fpclassifyd+0x60>
    7ac8:	008000c4 	movi	r2,3
    7acc:	f800283a 	ret
    7ad0:	10c00226 	beq	r2,r3,7adc <__fpclassifyd+0x6c>
    7ad4:	0005883a 	mov	r2,zero
    7ad8:	f800283a 	ret
    7adc:	2005003a 	cmpeq	r2,r4,zero
    7ae0:	f800283a 	ret

00007ae4 <_sbrk_r>:
    7ae4:	defffd04 	addi	sp,sp,-12
    7ae8:	dc000015 	stw	r16,0(sp)
    7aec:	04000074 	movhi	r16,1
    7af0:	dc400115 	stw	r17,4(sp)
    7af4:	840c3204 	addi	r16,r16,12488
    7af8:	2023883a 	mov	r17,r4
    7afc:	2809883a 	mov	r4,r5
    7b00:	dfc00215 	stw	ra,8(sp)
    7b04:	80000015 	stw	zero,0(r16)
    7b08:	000d6f80 	call	d6f8 <sbrk>
    7b0c:	00ffffc4 	movi	r3,-1
    7b10:	10c00526 	beq	r2,r3,7b28 <_sbrk_r+0x44>
    7b14:	dfc00217 	ldw	ra,8(sp)
    7b18:	dc400117 	ldw	r17,4(sp)
    7b1c:	dc000017 	ldw	r16,0(sp)
    7b20:	dec00304 	addi	sp,sp,12
    7b24:	f800283a 	ret
    7b28:	80c00017 	ldw	r3,0(r16)
    7b2c:	183ff926 	beq	r3,zero,7b14 <__alt_data_end+0xfffe7b14>
    7b30:	88c00015 	stw	r3,0(r17)
    7b34:	003ff706 	br	7b14 <__alt_data_end+0xfffe7b14>

00007b38 <__sread>:
    7b38:	defffe04 	addi	sp,sp,-8
    7b3c:	dc000015 	stw	r16,0(sp)
    7b40:	2821883a 	mov	r16,r5
    7b44:	2940038f 	ldh	r5,14(r5)
    7b48:	dfc00115 	stw	ra,4(sp)
    7b4c:	000992c0 	call	992c <_read_r>
    7b50:	10000716 	blt	r2,zero,7b70 <__sread+0x38>
    7b54:	80c01417 	ldw	r3,80(r16)
    7b58:	1887883a 	add	r3,r3,r2
    7b5c:	80c01415 	stw	r3,80(r16)
    7b60:	dfc00117 	ldw	ra,4(sp)
    7b64:	dc000017 	ldw	r16,0(sp)
    7b68:	dec00204 	addi	sp,sp,8
    7b6c:	f800283a 	ret
    7b70:	80c0030b 	ldhu	r3,12(r16)
    7b74:	18fbffcc 	andi	r3,r3,61439
    7b78:	80c0030d 	sth	r3,12(r16)
    7b7c:	dfc00117 	ldw	ra,4(sp)
    7b80:	dc000017 	ldw	r16,0(sp)
    7b84:	dec00204 	addi	sp,sp,8
    7b88:	f800283a 	ret

00007b8c <__seofread>:
    7b8c:	0005883a 	mov	r2,zero
    7b90:	f800283a 	ret

00007b94 <__swrite>:
    7b94:	2880030b 	ldhu	r2,12(r5)
    7b98:	defffb04 	addi	sp,sp,-20
    7b9c:	dcc00315 	stw	r19,12(sp)
    7ba0:	dc800215 	stw	r18,8(sp)
    7ba4:	dc400115 	stw	r17,4(sp)
    7ba8:	dc000015 	stw	r16,0(sp)
    7bac:	dfc00415 	stw	ra,16(sp)
    7bb0:	10c0400c 	andi	r3,r2,256
    7bb4:	2821883a 	mov	r16,r5
    7bb8:	2023883a 	mov	r17,r4
    7bbc:	3025883a 	mov	r18,r6
    7bc0:	3827883a 	mov	r19,r7
    7bc4:	18000526 	beq	r3,zero,7bdc <__swrite+0x48>
    7bc8:	2940038f 	ldh	r5,14(r5)
    7bcc:	01c00084 	movi	r7,2
    7bd0:	000d883a 	mov	r6,zero
    7bd4:	00098cc0 	call	98cc <_lseek_r>
    7bd8:	8080030b 	ldhu	r2,12(r16)
    7bdc:	8140038f 	ldh	r5,14(r16)
    7be0:	10bbffcc 	andi	r2,r2,61439
    7be4:	980f883a 	mov	r7,r19
    7be8:	900d883a 	mov	r6,r18
    7bec:	8809883a 	mov	r4,r17
    7bf0:	8080030d 	sth	r2,12(r16)
    7bf4:	dfc00417 	ldw	ra,16(sp)
    7bf8:	dcc00317 	ldw	r19,12(sp)
    7bfc:	dc800217 	ldw	r18,8(sp)
    7c00:	dc400117 	ldw	r17,4(sp)
    7c04:	dc000017 	ldw	r16,0(sp)
    7c08:	dec00504 	addi	sp,sp,20
    7c0c:	00093981 	jmpi	9398 <_write_r>

00007c10 <__sseek>:
    7c10:	defffe04 	addi	sp,sp,-8
    7c14:	dc000015 	stw	r16,0(sp)
    7c18:	2821883a 	mov	r16,r5
    7c1c:	2940038f 	ldh	r5,14(r5)
    7c20:	dfc00115 	stw	ra,4(sp)
    7c24:	00098cc0 	call	98cc <_lseek_r>
    7c28:	00ffffc4 	movi	r3,-1
    7c2c:	10c00826 	beq	r2,r3,7c50 <__sseek+0x40>
    7c30:	80c0030b 	ldhu	r3,12(r16)
    7c34:	80801415 	stw	r2,80(r16)
    7c38:	18c40014 	ori	r3,r3,4096
    7c3c:	80c0030d 	sth	r3,12(r16)
    7c40:	dfc00117 	ldw	ra,4(sp)
    7c44:	dc000017 	ldw	r16,0(sp)
    7c48:	dec00204 	addi	sp,sp,8
    7c4c:	f800283a 	ret
    7c50:	80c0030b 	ldhu	r3,12(r16)
    7c54:	18fbffcc 	andi	r3,r3,61439
    7c58:	80c0030d 	sth	r3,12(r16)
    7c5c:	dfc00117 	ldw	ra,4(sp)
    7c60:	dc000017 	ldw	r16,0(sp)
    7c64:	dec00204 	addi	sp,sp,8
    7c68:	f800283a 	ret

00007c6c <__sclose>:
    7c6c:	2940038f 	ldh	r5,14(r5)
    7c70:	00093f81 	jmpi	93f8 <_close_r>

00007c74 <strcmp>:
    7c74:	2144b03a 	or	r2,r4,r5
    7c78:	108000cc 	andi	r2,r2,3
    7c7c:	1000171e 	bne	r2,zero,7cdc <strcmp+0x68>
    7c80:	20800017 	ldw	r2,0(r4)
    7c84:	28c00017 	ldw	r3,0(r5)
    7c88:	10c0141e 	bne	r2,r3,7cdc <strcmp+0x68>
    7c8c:	027fbff4 	movhi	r9,65279
    7c90:	4a7fbfc4 	addi	r9,r9,-257
    7c94:	0086303a 	nor	r3,zero,r2
    7c98:	02202074 	movhi	r8,32897
    7c9c:	1245883a 	add	r2,r2,r9
    7ca0:	42202004 	addi	r8,r8,-32640
    7ca4:	10c4703a 	and	r2,r2,r3
    7ca8:	1204703a 	and	r2,r2,r8
    7cac:	10000226 	beq	r2,zero,7cb8 <strcmp+0x44>
    7cb0:	00002306 	br	7d40 <strcmp+0xcc>
    7cb4:	1000221e 	bne	r2,zero,7d40 <strcmp+0xcc>
    7cb8:	21000104 	addi	r4,r4,4
    7cbc:	20c00017 	ldw	r3,0(r4)
    7cc0:	29400104 	addi	r5,r5,4
    7cc4:	29800017 	ldw	r6,0(r5)
    7cc8:	1a4f883a 	add	r7,r3,r9
    7ccc:	00c4303a 	nor	r2,zero,r3
    7cd0:	3884703a 	and	r2,r7,r2
    7cd4:	1204703a 	and	r2,r2,r8
    7cd8:	19bff626 	beq	r3,r6,7cb4 <__alt_data_end+0xfffe7cb4>
    7cdc:	20800003 	ldbu	r2,0(r4)
    7ce0:	10c03fcc 	andi	r3,r2,255
    7ce4:	18c0201c 	xori	r3,r3,128
    7ce8:	18ffe004 	addi	r3,r3,-128
    7cec:	18000c26 	beq	r3,zero,7d20 <strcmp+0xac>
    7cf0:	29800007 	ldb	r6,0(r5)
    7cf4:	19800326 	beq	r3,r6,7d04 <strcmp+0x90>
    7cf8:	00001306 	br	7d48 <strcmp+0xd4>
    7cfc:	29800007 	ldb	r6,0(r5)
    7d00:	11800b1e 	bne	r2,r6,7d30 <strcmp+0xbc>
    7d04:	21000044 	addi	r4,r4,1
    7d08:	20c00003 	ldbu	r3,0(r4)
    7d0c:	29400044 	addi	r5,r5,1
    7d10:	18803fcc 	andi	r2,r3,255
    7d14:	1080201c 	xori	r2,r2,128
    7d18:	10bfe004 	addi	r2,r2,-128
    7d1c:	103ff71e 	bne	r2,zero,7cfc <__alt_data_end+0xfffe7cfc>
    7d20:	0007883a 	mov	r3,zero
    7d24:	28800003 	ldbu	r2,0(r5)
    7d28:	1885c83a 	sub	r2,r3,r2
    7d2c:	f800283a 	ret
    7d30:	28800003 	ldbu	r2,0(r5)
    7d34:	18c03fcc 	andi	r3,r3,255
    7d38:	1885c83a 	sub	r2,r3,r2
    7d3c:	f800283a 	ret
    7d40:	0005883a 	mov	r2,zero
    7d44:	f800283a 	ret
    7d48:	10c03fcc 	andi	r3,r2,255
    7d4c:	003ff506 	br	7d24 <__alt_data_end+0xfffe7d24>

00007d50 <__sprint_r.part.0>:
    7d50:	28801917 	ldw	r2,100(r5)
    7d54:	defff604 	addi	sp,sp,-40
    7d58:	dd400515 	stw	r21,20(sp)
    7d5c:	dfc00915 	stw	ra,36(sp)
    7d60:	df000815 	stw	fp,32(sp)
    7d64:	ddc00715 	stw	r23,28(sp)
    7d68:	dd800615 	stw	r22,24(sp)
    7d6c:	dd000415 	stw	r20,16(sp)
    7d70:	dcc00315 	stw	r19,12(sp)
    7d74:	dc800215 	stw	r18,8(sp)
    7d78:	dc400115 	stw	r17,4(sp)
    7d7c:	dc000015 	stw	r16,0(sp)
    7d80:	1088000c 	andi	r2,r2,8192
    7d84:	302b883a 	mov	r21,r6
    7d88:	10002e26 	beq	r2,zero,7e44 <__sprint_r.part.0+0xf4>
    7d8c:	30800217 	ldw	r2,8(r6)
    7d90:	35800017 	ldw	r22,0(r6)
    7d94:	10002926 	beq	r2,zero,7e3c <__sprint_r.part.0+0xec>
    7d98:	2827883a 	mov	r19,r5
    7d9c:	2029883a 	mov	r20,r4
    7da0:	b5c00104 	addi	r23,r22,4
    7da4:	04bfffc4 	movi	r18,-1
    7da8:	bc400017 	ldw	r17,0(r23)
    7dac:	b4000017 	ldw	r16,0(r22)
    7db0:	0039883a 	mov	fp,zero
    7db4:	8822d0ba 	srli	r17,r17,2
    7db8:	8800031e 	bne	r17,zero,7dc8 <__sprint_r.part.0+0x78>
    7dbc:	00001806 	br	7e20 <__sprint_r.part.0+0xd0>
    7dc0:	84000104 	addi	r16,r16,4
    7dc4:	8f001526 	beq	r17,fp,7e1c <__sprint_r.part.0+0xcc>
    7dc8:	81400017 	ldw	r5,0(r16)
    7dcc:	980d883a 	mov	r6,r19
    7dd0:	a009883a 	mov	r4,r20
    7dd4:	00097780 	call	9778 <_fputwc_r>
    7dd8:	e7000044 	addi	fp,fp,1
    7ddc:	14bff81e 	bne	r2,r18,7dc0 <__alt_data_end+0xfffe7dc0>
    7de0:	9005883a 	mov	r2,r18
    7de4:	a8000215 	stw	zero,8(r21)
    7de8:	a8000115 	stw	zero,4(r21)
    7dec:	dfc00917 	ldw	ra,36(sp)
    7df0:	df000817 	ldw	fp,32(sp)
    7df4:	ddc00717 	ldw	r23,28(sp)
    7df8:	dd800617 	ldw	r22,24(sp)
    7dfc:	dd400517 	ldw	r21,20(sp)
    7e00:	dd000417 	ldw	r20,16(sp)
    7e04:	dcc00317 	ldw	r19,12(sp)
    7e08:	dc800217 	ldw	r18,8(sp)
    7e0c:	dc400117 	ldw	r17,4(sp)
    7e10:	dc000017 	ldw	r16,0(sp)
    7e14:	dec00a04 	addi	sp,sp,40
    7e18:	f800283a 	ret
    7e1c:	a8800217 	ldw	r2,8(r21)
    7e20:	8c63883a 	add	r17,r17,r17
    7e24:	8c63883a 	add	r17,r17,r17
    7e28:	1445c83a 	sub	r2,r2,r17
    7e2c:	a8800215 	stw	r2,8(r21)
    7e30:	b5800204 	addi	r22,r22,8
    7e34:	bdc00204 	addi	r23,r23,8
    7e38:	103fdb1e 	bne	r2,zero,7da8 <__alt_data_end+0xfffe7da8>
    7e3c:	0005883a 	mov	r2,zero
    7e40:	003fe806 	br	7de4 <__alt_data_end+0xfffe7de4>
    7e44:	0004f780 	call	4f78 <__sfvwrite_r>
    7e48:	003fe606 	br	7de4 <__alt_data_end+0xfffe7de4>

00007e4c <__sprint_r>:
    7e4c:	30c00217 	ldw	r3,8(r6)
    7e50:	18000126 	beq	r3,zero,7e58 <__sprint_r+0xc>
    7e54:	0007d501 	jmpi	7d50 <__sprint_r.part.0>
    7e58:	30000115 	stw	zero,4(r6)
    7e5c:	0005883a 	mov	r2,zero
    7e60:	f800283a 	ret

00007e64 <___vfiprintf_internal_r>:
    7e64:	deffc904 	addi	sp,sp,-220
    7e68:	df003515 	stw	fp,212(sp)
    7e6c:	dd003115 	stw	r20,196(sp)
    7e70:	dfc03615 	stw	ra,216(sp)
    7e74:	ddc03415 	stw	r23,208(sp)
    7e78:	dd803315 	stw	r22,204(sp)
    7e7c:	dd403215 	stw	r21,200(sp)
    7e80:	dcc03015 	stw	r19,192(sp)
    7e84:	dc802f15 	stw	r18,188(sp)
    7e88:	dc402e15 	stw	r17,184(sp)
    7e8c:	dc002d15 	stw	r16,180(sp)
    7e90:	d9002015 	stw	r4,128(sp)
    7e94:	d9c02215 	stw	r7,136(sp)
    7e98:	2829883a 	mov	r20,r5
    7e9c:	3039883a 	mov	fp,r6
    7ea0:	20000226 	beq	r4,zero,7eac <___vfiprintf_internal_r+0x48>
    7ea4:	20800e17 	ldw	r2,56(r4)
    7ea8:	1000cf26 	beq	r2,zero,81e8 <___vfiprintf_internal_r+0x384>
    7eac:	a080030b 	ldhu	r2,12(r20)
    7eb0:	10c8000c 	andi	r3,r2,8192
    7eb4:	1800061e 	bne	r3,zero,7ed0 <___vfiprintf_internal_r+0x6c>
    7eb8:	a1001917 	ldw	r4,100(r20)
    7ebc:	00f7ffc4 	movi	r3,-8193
    7ec0:	10880014 	ori	r2,r2,8192
    7ec4:	20c6703a 	and	r3,r4,r3
    7ec8:	a080030d 	sth	r2,12(r20)
    7ecc:	a0c01915 	stw	r3,100(r20)
    7ed0:	10c0020c 	andi	r3,r2,8
    7ed4:	1800a926 	beq	r3,zero,817c <___vfiprintf_internal_r+0x318>
    7ed8:	a0c00417 	ldw	r3,16(r20)
    7edc:	1800a726 	beq	r3,zero,817c <___vfiprintf_internal_r+0x318>
    7ee0:	1080068c 	andi	r2,r2,26
    7ee4:	00c00284 	movi	r3,10
    7ee8:	10c0ac26 	beq	r2,r3,819c <___vfiprintf_internal_r+0x338>
    7eec:	da801a04 	addi	r10,sp,104
    7ef0:	da801e15 	stw	r10,120(sp)
    7ef4:	d8801e17 	ldw	r2,120(sp)
    7ef8:	da8019c4 	addi	r10,sp,103
    7efc:	05800074 	movhi	r22,1
    7f00:	05c00074 	movhi	r23,1
    7f04:	da801f15 	stw	r10,124(sp)
    7f08:	1295c83a 	sub	r10,r2,r10
    7f0c:	b5be6504 	addi	r22,r22,-1644
    7f10:	bdfe6104 	addi	r23,r23,-1660
    7f14:	dec01a15 	stw	sp,104(sp)
    7f18:	d8001c15 	stw	zero,112(sp)
    7f1c:	d8001b15 	stw	zero,108(sp)
    7f20:	d8002615 	stw	zero,152(sp)
    7f24:	d8002315 	stw	zero,140(sp)
    7f28:	da802715 	stw	r10,156(sp)
    7f2c:	d811883a 	mov	r8,sp
    7f30:	dd002115 	stw	r20,132(sp)
    7f34:	e021883a 	mov	r16,fp
    7f38:	80800007 	ldb	r2,0(r16)
    7f3c:	1003ea26 	beq	r2,zero,8ee8 <___vfiprintf_internal_r+0x1084>
    7f40:	00c00944 	movi	r3,37
    7f44:	8025883a 	mov	r18,r16
    7f48:	10c0021e 	bne	r2,r3,7f54 <___vfiprintf_internal_r+0xf0>
    7f4c:	00001606 	br	7fa8 <___vfiprintf_internal_r+0x144>
    7f50:	10c00326 	beq	r2,r3,7f60 <___vfiprintf_internal_r+0xfc>
    7f54:	94800044 	addi	r18,r18,1
    7f58:	90800007 	ldb	r2,0(r18)
    7f5c:	103ffc1e 	bne	r2,zero,7f50 <__alt_data_end+0xfffe7f50>
    7f60:	9423c83a 	sub	r17,r18,r16
    7f64:	88001026 	beq	r17,zero,7fa8 <___vfiprintf_internal_r+0x144>
    7f68:	d8c01c17 	ldw	r3,112(sp)
    7f6c:	d8801b17 	ldw	r2,108(sp)
    7f70:	44000015 	stw	r16,0(r8)
    7f74:	88c7883a 	add	r3,r17,r3
    7f78:	10800044 	addi	r2,r2,1
    7f7c:	44400115 	stw	r17,4(r8)
    7f80:	d8c01c15 	stw	r3,112(sp)
    7f84:	d8801b15 	stw	r2,108(sp)
    7f88:	010001c4 	movi	r4,7
    7f8c:	2080760e 	bge	r4,r2,8168 <___vfiprintf_internal_r+0x304>
    7f90:	1803821e 	bne	r3,zero,8d9c <___vfiprintf_internal_r+0xf38>
    7f94:	da802317 	ldw	r10,140(sp)
    7f98:	d8001b15 	stw	zero,108(sp)
    7f9c:	d811883a 	mov	r8,sp
    7fa0:	5455883a 	add	r10,r10,r17
    7fa4:	da802315 	stw	r10,140(sp)
    7fa8:	90800007 	ldb	r2,0(r18)
    7fac:	10044626 	beq	r2,zero,90c8 <___vfiprintf_internal_r+0x1264>
    7fb0:	90c00047 	ldb	r3,1(r18)
    7fb4:	94000044 	addi	r16,r18,1
    7fb8:	d8001d85 	stb	zero,118(sp)
    7fbc:	0009883a 	mov	r4,zero
    7fc0:	000f883a 	mov	r7,zero
    7fc4:	027fffc4 	movi	r9,-1
    7fc8:	0023883a 	mov	r17,zero
    7fcc:	0029883a 	mov	r20,zero
    7fd0:	01401604 	movi	r5,88
    7fd4:	01800244 	movi	r6,9
    7fd8:	03400a84 	movi	r13,42
    7fdc:	03001b04 	movi	r12,108
    7fe0:	84000044 	addi	r16,r16,1
    7fe4:	18bff804 	addi	r2,r3,-32
    7fe8:	28827336 	bltu	r5,r2,89b8 <___vfiprintf_internal_r+0xb54>
    7fec:	100490ba 	slli	r2,r2,2
    7ff0:	02800074 	movhi	r10,1
    7ff4:	52a00104 	addi	r10,r10,-32764
    7ff8:	1285883a 	add	r2,r2,r10
    7ffc:	10800017 	ldw	r2,0(r2)
    8000:	1000683a 	jmp	r2
    8004:	000086ec 	andhi	zero,zero,539
    8008:	000089b8 	rdprs	zero,zero,550
    800c:	000089b8 	rdprs	zero,zero,550
    8010:	0000870c 	andi	zero,zero,540
    8014:	000089b8 	rdprs	zero,zero,550
    8018:	000089b8 	rdprs	zero,zero,550
    801c:	000089b8 	rdprs	zero,zero,550
    8020:	000089b8 	rdprs	zero,zero,550
    8024:	000089b8 	rdprs	zero,zero,550
    8028:	000089b8 	rdprs	zero,zero,550
    802c:	000088f4 	movhi	zero,547
    8030:	00008910 	cmplti	zero,zero,548
    8034:	000089b8 	rdprs	zero,zero,550
    8038:	000081f8 	rdprs	zero,zero,519
    803c:	00008920 	cmpeqi	zero,zero,548
    8040:	000089b8 	rdprs	zero,zero,550
    8044:	00008718 	cmpnei	zero,zero,540
    8048:	00008724 	muli	zero,zero,540
    804c:	00008724 	muli	zero,zero,540
    8050:	00008724 	muli	zero,zero,540
    8054:	00008724 	muli	zero,zero,540
    8058:	00008724 	muli	zero,zero,540
    805c:	00008724 	muli	zero,zero,540
    8060:	00008724 	muli	zero,zero,540
    8064:	00008724 	muli	zero,zero,540
    8068:	00008724 	muli	zero,zero,540
    806c:	000089b8 	rdprs	zero,zero,550
    8070:	000089b8 	rdprs	zero,zero,550
    8074:	000089b8 	rdprs	zero,zero,550
    8078:	000089b8 	rdprs	zero,zero,550
    807c:	000089b8 	rdprs	zero,zero,550
    8080:	000089b8 	rdprs	zero,zero,550
    8084:	000089b8 	rdprs	zero,zero,550
    8088:	000089b8 	rdprs	zero,zero,550
    808c:	000089b8 	rdprs	zero,zero,550
    8090:	000089b8 	rdprs	zero,zero,550
    8094:	00008750 	cmplti	zero,zero,541
    8098:	000089b8 	rdprs	zero,zero,550
    809c:	000089b8 	rdprs	zero,zero,550
    80a0:	000089b8 	rdprs	zero,zero,550
    80a4:	000089b8 	rdprs	zero,zero,550
    80a8:	000089b8 	rdprs	zero,zero,550
    80ac:	000089b8 	rdprs	zero,zero,550
    80b0:	000089b8 	rdprs	zero,zero,550
    80b4:	000089b8 	rdprs	zero,zero,550
    80b8:	000089b8 	rdprs	zero,zero,550
    80bc:	000089b8 	rdprs	zero,zero,550
    80c0:	00008788 	cmpgei	zero,zero,542
    80c4:	000089b8 	rdprs	zero,zero,550
    80c8:	000089b8 	rdprs	zero,zero,550
    80cc:	000089b8 	rdprs	zero,zero,550
    80d0:	000089b8 	rdprs	zero,zero,550
    80d4:	000089b8 	rdprs	zero,zero,550
    80d8:	000087e0 	cmpeqi	zero,zero,543
    80dc:	000089b8 	rdprs	zero,zero,550
    80e0:	000089b8 	rdprs	zero,zero,550
    80e4:	00008850 	cmplti	zero,zero,545
    80e8:	000089b8 	rdprs	zero,zero,550
    80ec:	000089b8 	rdprs	zero,zero,550
    80f0:	000089b8 	rdprs	zero,zero,550
    80f4:	000089b8 	rdprs	zero,zero,550
    80f8:	000089b8 	rdprs	zero,zero,550
    80fc:	000089b8 	rdprs	zero,zero,550
    8100:	000089b8 	rdprs	zero,zero,550
    8104:	000089b8 	rdprs	zero,zero,550
    8108:	000089b8 	rdprs	zero,zero,550
    810c:	000089b8 	rdprs	zero,zero,550
    8110:	000085fc 	xorhi	zero,zero,535
    8114:	00008628 	cmpgeui	zero,zero,536
    8118:	000089b8 	rdprs	zero,zero,550
    811c:	000089b8 	rdprs	zero,zero,550
    8120:	000089b8 	rdprs	zero,zero,550
    8124:	00008960 	cmpeqi	zero,zero,549
    8128:	00008628 	cmpgeui	zero,zero,536
    812c:	000089b8 	rdprs	zero,zero,550
    8130:	000089b8 	rdprs	zero,zero,550
    8134:	000084bc 	xorhi	zero,zero,530
    8138:	000089b8 	rdprs	zero,zero,550
    813c:	000084cc 	andi	zero,zero,531
    8140:	00008508 	cmpgei	zero,zero,532
    8144:	00008204 	movi	zero,520
    8148:	000084b0 	cmpltui	zero,zero,530
    814c:	000089b8 	rdprs	zero,zero,550
    8150:	0000888c 	andi	zero,zero,546
    8154:	000089b8 	rdprs	zero,zero,550
    8158:	000088e4 	muli	zero,zero,547
    815c:	000089b8 	rdprs	zero,zero,550
    8160:	000089b8 	rdprs	zero,zero,550
    8164:	000085a8 	cmpgeui	zero,zero,534
    8168:	42000204 	addi	r8,r8,8
    816c:	da802317 	ldw	r10,140(sp)
    8170:	5455883a 	add	r10,r10,r17
    8174:	da802315 	stw	r10,140(sp)
    8178:	003f8b06 	br	7fa8 <__alt_data_end+0xfffe7fa8>
    817c:	d9002017 	ldw	r4,128(sp)
    8180:	a00b883a 	mov	r5,r20
    8184:	0002b200 	call	2b20 <__swsetup_r>
    8188:	1003b11e 	bne	r2,zero,9050 <___vfiprintf_internal_r+0x11ec>
    818c:	a080030b 	ldhu	r2,12(r20)
    8190:	00c00284 	movi	r3,10
    8194:	1080068c 	andi	r2,r2,26
    8198:	10ff541e 	bne	r2,r3,7eec <__alt_data_end+0xfffe7eec>
    819c:	a080038f 	ldh	r2,14(r20)
    81a0:	103f5216 	blt	r2,zero,7eec <__alt_data_end+0xfffe7eec>
    81a4:	d9c02217 	ldw	r7,136(sp)
    81a8:	d9002017 	ldw	r4,128(sp)
    81ac:	e00d883a 	mov	r6,fp
    81b0:	a00b883a 	mov	r5,r20
    81b4:	00092dc0 	call	92dc <__sbprintf>
    81b8:	dfc03617 	ldw	ra,216(sp)
    81bc:	df003517 	ldw	fp,212(sp)
    81c0:	ddc03417 	ldw	r23,208(sp)
    81c4:	dd803317 	ldw	r22,204(sp)
    81c8:	dd403217 	ldw	r21,200(sp)
    81cc:	dd003117 	ldw	r20,196(sp)
    81d0:	dcc03017 	ldw	r19,192(sp)
    81d4:	dc802f17 	ldw	r18,188(sp)
    81d8:	dc402e17 	ldw	r17,184(sp)
    81dc:	dc002d17 	ldw	r16,180(sp)
    81e0:	dec03704 	addi	sp,sp,220
    81e4:	f800283a 	ret
    81e8:	0004af40 	call	4af4 <__sinit>
    81ec:	003f2f06 	br	7eac <__alt_data_end+0xfffe7eac>
    81f0:	0463c83a 	sub	r17,zero,r17
    81f4:	d8802215 	stw	r2,136(sp)
    81f8:	a5000114 	ori	r20,r20,4
    81fc:	80c00007 	ldb	r3,0(r16)
    8200:	003f7706 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8204:	00800c04 	movi	r2,48
    8208:	da802217 	ldw	r10,136(sp)
    820c:	d8801d05 	stb	r2,116(sp)
    8210:	00801e04 	movi	r2,120
    8214:	d8801d45 	stb	r2,117(sp)
    8218:	d8001d85 	stb	zero,118(sp)
    821c:	50c00104 	addi	r3,r10,4
    8220:	54800017 	ldw	r18,0(r10)
    8224:	0027883a 	mov	r19,zero
    8228:	a0800094 	ori	r2,r20,2
    822c:	48030b16 	blt	r9,zero,8e5c <___vfiprintf_internal_r+0xff8>
    8230:	00bfdfc4 	movi	r2,-129
    8234:	a096703a 	and	r11,r20,r2
    8238:	d8c02215 	stw	r3,136(sp)
    823c:	5d000094 	ori	r20,r11,2
    8240:	90032b1e 	bne	r18,zero,8ef0 <___vfiprintf_internal_r+0x108c>
    8244:	00800074 	movhi	r2,1
    8248:	10be0004 	addi	r2,r2,-2048
    824c:	d8802615 	stw	r2,152(sp)
    8250:	0039883a 	mov	fp,zero
    8254:	48017b1e 	bne	r9,zero,8844 <___vfiprintf_internal_r+0x9e0>
    8258:	0013883a 	mov	r9,zero
    825c:	0027883a 	mov	r19,zero
    8260:	dd401a04 	addi	r21,sp,104
    8264:	4825883a 	mov	r18,r9
    8268:	4cc0010e 	bge	r9,r19,8270 <___vfiprintf_internal_r+0x40c>
    826c:	9825883a 	mov	r18,r19
    8270:	e7003fcc 	andi	fp,fp,255
    8274:	e700201c 	xori	fp,fp,128
    8278:	e73fe004 	addi	fp,fp,-128
    827c:	e0000126 	beq	fp,zero,8284 <___vfiprintf_internal_r+0x420>
    8280:	94800044 	addi	r18,r18,1
    8284:	a380008c 	andi	r14,r20,2
    8288:	70000126 	beq	r14,zero,8290 <___vfiprintf_internal_r+0x42c>
    828c:	94800084 	addi	r18,r18,2
    8290:	a700210c 	andi	fp,r20,132
    8294:	e001df1e 	bne	fp,zero,8a14 <___vfiprintf_internal_r+0xbb0>
    8298:	8c87c83a 	sub	r3,r17,r18
    829c:	00c1dd0e 	bge	zero,r3,8a14 <___vfiprintf_internal_r+0xbb0>
    82a0:	01c00404 	movi	r7,16
    82a4:	d8801c17 	ldw	r2,112(sp)
    82a8:	38c3ad0e 	bge	r7,r3,9160 <___vfiprintf_internal_r+0x12fc>
    82ac:	02800074 	movhi	r10,1
    82b0:	52be6504 	addi	r10,r10,-1644
    82b4:	dc002915 	stw	r16,164(sp)
    82b8:	d9801b17 	ldw	r6,108(sp)
    82bc:	da802415 	stw	r10,144(sp)
    82c0:	03c001c4 	movi	r15,7
    82c4:	da402515 	stw	r9,148(sp)
    82c8:	db802815 	stw	r14,160(sp)
    82cc:	1821883a 	mov	r16,r3
    82d0:	00000506 	br	82e8 <___vfiprintf_internal_r+0x484>
    82d4:	31400084 	addi	r5,r6,2
    82d8:	42000204 	addi	r8,r8,8
    82dc:	200d883a 	mov	r6,r4
    82e0:	843ffc04 	addi	r16,r16,-16
    82e4:	3c000d0e 	bge	r7,r16,831c <___vfiprintf_internal_r+0x4b8>
    82e8:	10800404 	addi	r2,r2,16
    82ec:	31000044 	addi	r4,r6,1
    82f0:	45800015 	stw	r22,0(r8)
    82f4:	41c00115 	stw	r7,4(r8)
    82f8:	d8801c15 	stw	r2,112(sp)
    82fc:	d9001b15 	stw	r4,108(sp)
    8300:	793ff40e 	bge	r15,r4,82d4 <__alt_data_end+0xfffe82d4>
    8304:	1001b51e 	bne	r2,zero,89dc <___vfiprintf_internal_r+0xb78>
    8308:	843ffc04 	addi	r16,r16,-16
    830c:	000d883a 	mov	r6,zero
    8310:	01400044 	movi	r5,1
    8314:	d811883a 	mov	r8,sp
    8318:	3c3ff316 	blt	r7,r16,82e8 <__alt_data_end+0xfffe82e8>
    831c:	8007883a 	mov	r3,r16
    8320:	da402517 	ldw	r9,148(sp)
    8324:	db802817 	ldw	r14,160(sp)
    8328:	dc002917 	ldw	r16,164(sp)
    832c:	da802417 	ldw	r10,144(sp)
    8330:	1885883a 	add	r2,r3,r2
    8334:	40c00115 	stw	r3,4(r8)
    8338:	42800015 	stw	r10,0(r8)
    833c:	d8801c15 	stw	r2,112(sp)
    8340:	d9401b15 	stw	r5,108(sp)
    8344:	00c001c4 	movi	r3,7
    8348:	19426016 	blt	r3,r5,8ccc <___vfiprintf_internal_r+0xe68>
    834c:	d8c01d87 	ldb	r3,118(sp)
    8350:	42000204 	addi	r8,r8,8
    8354:	29000044 	addi	r4,r5,1
    8358:	1801b31e 	bne	r3,zero,8a28 <___vfiprintf_internal_r+0xbc4>
    835c:	7001c026 	beq	r14,zero,8a60 <___vfiprintf_internal_r+0xbfc>
    8360:	d8c01d04 	addi	r3,sp,116
    8364:	10800084 	addi	r2,r2,2
    8368:	40c00015 	stw	r3,0(r8)
    836c:	00c00084 	movi	r3,2
    8370:	40c00115 	stw	r3,4(r8)
    8374:	d8801c15 	stw	r2,112(sp)
    8378:	d9001b15 	stw	r4,108(sp)
    837c:	00c001c4 	movi	r3,7
    8380:	1902650e 	bge	r3,r4,8d18 <___vfiprintf_internal_r+0xeb4>
    8384:	10029a1e 	bne	r2,zero,8df0 <___vfiprintf_internal_r+0xf8c>
    8388:	00c02004 	movi	r3,128
    838c:	01000044 	movi	r4,1
    8390:	000b883a 	mov	r5,zero
    8394:	d811883a 	mov	r8,sp
    8398:	e0c1b31e 	bne	fp,r3,8a68 <___vfiprintf_internal_r+0xc04>
    839c:	8cb9c83a 	sub	fp,r17,r18
    83a0:	0701b10e 	bge	zero,fp,8a68 <___vfiprintf_internal_r+0xc04>
    83a4:	01c00404 	movi	r7,16
    83a8:	3f03890e 	bge	r7,fp,91d0 <___vfiprintf_internal_r+0x136c>
    83ac:	00c00074 	movhi	r3,1
    83b0:	18fe6104 	addi	r3,r3,-1660
    83b4:	d8c02415 	stw	r3,144(sp)
    83b8:	8007883a 	mov	r3,r16
    83bc:	034001c4 	movi	r13,7
    83c0:	e021883a 	mov	r16,fp
    83c4:	da402515 	stw	r9,148(sp)
    83c8:	1839883a 	mov	fp,r3
    83cc:	00000506 	br	83e4 <___vfiprintf_internal_r+0x580>
    83d0:	29800084 	addi	r6,r5,2
    83d4:	42000204 	addi	r8,r8,8
    83d8:	180b883a 	mov	r5,r3
    83dc:	843ffc04 	addi	r16,r16,-16
    83e0:	3c000d0e 	bge	r7,r16,8418 <___vfiprintf_internal_r+0x5b4>
    83e4:	10800404 	addi	r2,r2,16
    83e8:	28c00044 	addi	r3,r5,1
    83ec:	45c00015 	stw	r23,0(r8)
    83f0:	41c00115 	stw	r7,4(r8)
    83f4:	d8801c15 	stw	r2,112(sp)
    83f8:	d8c01b15 	stw	r3,108(sp)
    83fc:	68fff40e 	bge	r13,r3,83d0 <__alt_data_end+0xfffe83d0>
    8400:	1002241e 	bne	r2,zero,8c94 <___vfiprintf_internal_r+0xe30>
    8404:	843ffc04 	addi	r16,r16,-16
    8408:	01800044 	movi	r6,1
    840c:	000b883a 	mov	r5,zero
    8410:	d811883a 	mov	r8,sp
    8414:	3c3ff316 	blt	r7,r16,83e4 <__alt_data_end+0xfffe83e4>
    8418:	da402517 	ldw	r9,148(sp)
    841c:	e007883a 	mov	r3,fp
    8420:	8039883a 	mov	fp,r16
    8424:	1821883a 	mov	r16,r3
    8428:	d8c02417 	ldw	r3,144(sp)
    842c:	1705883a 	add	r2,r2,fp
    8430:	47000115 	stw	fp,4(r8)
    8434:	40c00015 	stw	r3,0(r8)
    8438:	d8801c15 	stw	r2,112(sp)
    843c:	d9801b15 	stw	r6,108(sp)
    8440:	00c001c4 	movi	r3,7
    8444:	19827616 	blt	r3,r6,8e20 <___vfiprintf_internal_r+0xfbc>
    8448:	4cf9c83a 	sub	fp,r9,r19
    844c:	42000204 	addi	r8,r8,8
    8450:	31000044 	addi	r4,r6,1
    8454:	300b883a 	mov	r5,r6
    8458:	07018516 	blt	zero,fp,8a70 <___vfiprintf_internal_r+0xc0c>
    845c:	9885883a 	add	r2,r19,r2
    8460:	45400015 	stw	r21,0(r8)
    8464:	44c00115 	stw	r19,4(r8)
    8468:	d8801c15 	stw	r2,112(sp)
    846c:	d9001b15 	stw	r4,108(sp)
    8470:	00c001c4 	movi	r3,7
    8474:	1901dd0e 	bge	r3,r4,8bec <___vfiprintf_internal_r+0xd88>
    8478:	1002401e 	bne	r2,zero,8d7c <___vfiprintf_internal_r+0xf18>
    847c:	d8001b15 	stw	zero,108(sp)
    8480:	a2c0010c 	andi	r11,r20,4
    8484:	58000226 	beq	r11,zero,8490 <___vfiprintf_internal_r+0x62c>
    8488:	8ca7c83a 	sub	r19,r17,r18
    848c:	04c2f216 	blt	zero,r19,9058 <___vfiprintf_internal_r+0x11f4>
    8490:	8c80010e 	bge	r17,r18,8498 <___vfiprintf_internal_r+0x634>
    8494:	9023883a 	mov	r17,r18
    8498:	da802317 	ldw	r10,140(sp)
    849c:	5455883a 	add	r10,r10,r17
    84a0:	da802315 	stw	r10,140(sp)
    84a4:	d8001b15 	stw	zero,108(sp)
    84a8:	d811883a 	mov	r8,sp
    84ac:	003ea206 	br	7f38 <__alt_data_end+0xfffe7f38>
    84b0:	a5000814 	ori	r20,r20,32
    84b4:	80c00007 	ldb	r3,0(r16)
    84b8:	003ec906 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    84bc:	80c00007 	ldb	r3,0(r16)
    84c0:	1b030926 	beq	r3,r12,90e8 <___vfiprintf_internal_r+0x1284>
    84c4:	a5000414 	ori	r20,r20,16
    84c8:	003ec506 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    84cc:	21003fcc 	andi	r4,r4,255
    84d0:	20035e1e 	bne	r4,zero,924c <___vfiprintf_internal_r+0x13e8>
    84d4:	a080080c 	andi	r2,r20,32
    84d8:	1002a526 	beq	r2,zero,8f70 <___vfiprintf_internal_r+0x110c>
    84dc:	da802217 	ldw	r10,136(sp)
    84e0:	50800017 	ldw	r2,0(r10)
    84e4:	da802317 	ldw	r10,140(sp)
    84e8:	5007d7fa 	srai	r3,r10,31
    84ec:	da802217 	ldw	r10,136(sp)
    84f0:	10c00115 	stw	r3,4(r2)
    84f4:	52800104 	addi	r10,r10,4
    84f8:	da802215 	stw	r10,136(sp)
    84fc:	da802317 	ldw	r10,140(sp)
    8500:	12800015 	stw	r10,0(r2)
    8504:	003e8c06 	br	7f38 <__alt_data_end+0xfffe7f38>
    8508:	21003fcc 	andi	r4,r4,255
    850c:	2003511e 	bne	r4,zero,9254 <___vfiprintf_internal_r+0x13f0>
    8510:	a080080c 	andi	r2,r20,32
    8514:	1000a126 	beq	r2,zero,879c <___vfiprintf_internal_r+0x938>
    8518:	da802217 	ldw	r10,136(sp)
    851c:	d8001d85 	stb	zero,118(sp)
    8520:	50800204 	addi	r2,r10,8
    8524:	54800017 	ldw	r18,0(r10)
    8528:	54c00117 	ldw	r19,4(r10)
    852c:	4802b416 	blt	r9,zero,9000 <___vfiprintf_internal_r+0x119c>
    8530:	013fdfc4 	movi	r4,-129
    8534:	94c6b03a 	or	r3,r18,r19
    8538:	d8802215 	stw	r2,136(sp)
    853c:	a128703a 	and	r20,r20,r4
    8540:	1800a226 	beq	r3,zero,87cc <___vfiprintf_internal_r+0x968>
    8544:	0039883a 	mov	fp,zero
    8548:	dd401a04 	addi	r21,sp,104
    854c:	9006d0fa 	srli	r3,r18,3
    8550:	9808977a 	slli	r4,r19,29
    8554:	9826d0fa 	srli	r19,r19,3
    8558:	948001cc 	andi	r18,r18,7
    855c:	90800c04 	addi	r2,r18,48
    8560:	ad7fffc4 	addi	r21,r21,-1
    8564:	20e4b03a 	or	r18,r4,r3
    8568:	a8800005 	stb	r2,0(r21)
    856c:	94c6b03a 	or	r3,r18,r19
    8570:	183ff61e 	bne	r3,zero,854c <__alt_data_end+0xfffe854c>
    8574:	a0c0004c 	andi	r3,r20,1
    8578:	18005926 	beq	r3,zero,86e0 <___vfiprintf_internal_r+0x87c>
    857c:	10803fcc 	andi	r2,r2,255
    8580:	1080201c 	xori	r2,r2,128
    8584:	10bfe004 	addi	r2,r2,-128
    8588:	00c00c04 	movi	r3,48
    858c:	10c05426 	beq	r2,r3,86e0 <___vfiprintf_internal_r+0x87c>
    8590:	da801e17 	ldw	r10,120(sp)
    8594:	a8bfffc4 	addi	r2,r21,-1
    8598:	a8ffffc5 	stb	r3,-1(r21)
    859c:	50a7c83a 	sub	r19,r10,r2
    85a0:	102b883a 	mov	r21,r2
    85a4:	003f2f06 	br	8264 <__alt_data_end+0xfffe8264>
    85a8:	21003fcc 	andi	r4,r4,255
    85ac:	2003421e 	bne	r4,zero,92b8 <___vfiprintf_internal_r+0x1454>
    85b0:	00800074 	movhi	r2,1
    85b4:	10be0004 	addi	r2,r2,-2048
    85b8:	d8802615 	stw	r2,152(sp)
    85bc:	a080080c 	andi	r2,r20,32
    85c0:	1000aa26 	beq	r2,zero,886c <___vfiprintf_internal_r+0xa08>
    85c4:	da802217 	ldw	r10,136(sp)
    85c8:	54800017 	ldw	r18,0(r10)
    85cc:	54c00117 	ldw	r19,4(r10)
    85d0:	52800204 	addi	r10,r10,8
    85d4:	da802215 	stw	r10,136(sp)
    85d8:	a080004c 	andi	r2,r20,1
    85dc:	1001d226 	beq	r2,zero,8d28 <___vfiprintf_internal_r+0xec4>
    85e0:	94c4b03a 	or	r2,r18,r19
    85e4:	1002351e 	bne	r2,zero,8ebc <___vfiprintf_internal_r+0x1058>
    85e8:	d8001d85 	stb	zero,118(sp)
    85ec:	48022216 	blt	r9,zero,8e78 <___vfiprintf_internal_r+0x1014>
    85f0:	00bfdfc4 	movi	r2,-129
    85f4:	a0a8703a 	and	r20,r20,r2
    85f8:	003f1506 	br	8250 <__alt_data_end+0xfffe8250>
    85fc:	da802217 	ldw	r10,136(sp)
    8600:	04800044 	movi	r18,1
    8604:	d8001d85 	stb	zero,118(sp)
    8608:	50800017 	ldw	r2,0(r10)
    860c:	52800104 	addi	r10,r10,4
    8610:	da802215 	stw	r10,136(sp)
    8614:	d8801005 	stb	r2,64(sp)
    8618:	9027883a 	mov	r19,r18
    861c:	dd401004 	addi	r21,sp,64
    8620:	0013883a 	mov	r9,zero
    8624:	003f1706 	br	8284 <__alt_data_end+0xfffe8284>
    8628:	21003fcc 	andi	r4,r4,255
    862c:	2003201e 	bne	r4,zero,92b0 <___vfiprintf_internal_r+0x144c>
    8630:	a080080c 	andi	r2,r20,32
    8634:	10004b26 	beq	r2,zero,8764 <___vfiprintf_internal_r+0x900>
    8638:	da802217 	ldw	r10,136(sp)
    863c:	50800117 	ldw	r2,4(r10)
    8640:	54800017 	ldw	r18,0(r10)
    8644:	52800204 	addi	r10,r10,8
    8648:	da802215 	stw	r10,136(sp)
    864c:	1027883a 	mov	r19,r2
    8650:	10022c16 	blt	r2,zero,8f04 <___vfiprintf_internal_r+0x10a0>
    8654:	df001d83 	ldbu	fp,118(sp)
    8658:	48007216 	blt	r9,zero,8824 <___vfiprintf_internal_r+0x9c0>
    865c:	00ffdfc4 	movi	r3,-129
    8660:	94c4b03a 	or	r2,r18,r19
    8664:	a0e8703a 	and	r20,r20,r3
    8668:	1000cc26 	beq	r2,zero,899c <___vfiprintf_internal_r+0xb38>
    866c:	98021026 	beq	r19,zero,8eb0 <___vfiprintf_internal_r+0x104c>
    8670:	dc402415 	stw	r17,144(sp)
    8674:	dc002515 	stw	r16,148(sp)
    8678:	9823883a 	mov	r17,r19
    867c:	9021883a 	mov	r16,r18
    8680:	dd401a04 	addi	r21,sp,104
    8684:	4825883a 	mov	r18,r9
    8688:	4027883a 	mov	r19,r8
    868c:	8009883a 	mov	r4,r16
    8690:	880b883a 	mov	r5,r17
    8694:	01800284 	movi	r6,10
    8698:	000f883a 	mov	r7,zero
    869c:	000a2440 	call	a244 <__umoddi3>
    86a0:	10800c04 	addi	r2,r2,48
    86a4:	ad7fffc4 	addi	r21,r21,-1
    86a8:	8009883a 	mov	r4,r16
    86ac:	880b883a 	mov	r5,r17
    86b0:	a8800005 	stb	r2,0(r21)
    86b4:	01800284 	movi	r6,10
    86b8:	000f883a 	mov	r7,zero
    86bc:	0009ccc0 	call	9ccc <__udivdi3>
    86c0:	1021883a 	mov	r16,r2
    86c4:	10c4b03a 	or	r2,r2,r3
    86c8:	1823883a 	mov	r17,r3
    86cc:	103fef1e 	bne	r2,zero,868c <__alt_data_end+0xfffe868c>
    86d0:	dc402417 	ldw	r17,144(sp)
    86d4:	dc002517 	ldw	r16,148(sp)
    86d8:	9013883a 	mov	r9,r18
    86dc:	9811883a 	mov	r8,r19
    86e0:	da801e17 	ldw	r10,120(sp)
    86e4:	5567c83a 	sub	r19,r10,r21
    86e8:	003ede06 	br	8264 <__alt_data_end+0xfffe8264>
    86ec:	38803fcc 	andi	r2,r7,255
    86f0:	1080201c 	xori	r2,r2,128
    86f4:	10bfe004 	addi	r2,r2,-128
    86f8:	1002371e 	bne	r2,zero,8fd8 <___vfiprintf_internal_r+0x1174>
    86fc:	01000044 	movi	r4,1
    8700:	01c00804 	movi	r7,32
    8704:	80c00007 	ldb	r3,0(r16)
    8708:	003e3506 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    870c:	a5000054 	ori	r20,r20,1
    8710:	80c00007 	ldb	r3,0(r16)
    8714:	003e3206 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8718:	a5002014 	ori	r20,r20,128
    871c:	80c00007 	ldb	r3,0(r16)
    8720:	003e2f06 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8724:	8015883a 	mov	r10,r16
    8728:	0023883a 	mov	r17,zero
    872c:	18bff404 	addi	r2,r3,-48
    8730:	50c00007 	ldb	r3,0(r10)
    8734:	8c4002a4 	muli	r17,r17,10
    8738:	84000044 	addi	r16,r16,1
    873c:	8015883a 	mov	r10,r16
    8740:	1463883a 	add	r17,r2,r17
    8744:	18bff404 	addi	r2,r3,-48
    8748:	30bff92e 	bgeu	r6,r2,8730 <__alt_data_end+0xfffe8730>
    874c:	003e2506 	br	7fe4 <__alt_data_end+0xfffe7fe4>
    8750:	21003fcc 	andi	r4,r4,255
    8754:	2002d41e 	bne	r4,zero,92a8 <___vfiprintf_internal_r+0x1444>
    8758:	a5000414 	ori	r20,r20,16
    875c:	a080080c 	andi	r2,r20,32
    8760:	103fb51e 	bne	r2,zero,8638 <__alt_data_end+0xfffe8638>
    8764:	a080040c 	andi	r2,r20,16
    8768:	1001f826 	beq	r2,zero,8f4c <___vfiprintf_internal_r+0x10e8>
    876c:	da802217 	ldw	r10,136(sp)
    8770:	54800017 	ldw	r18,0(r10)
    8774:	52800104 	addi	r10,r10,4
    8778:	da802215 	stw	r10,136(sp)
    877c:	9027d7fa 	srai	r19,r18,31
    8780:	9805883a 	mov	r2,r19
    8784:	003fb206 	br	8650 <__alt_data_end+0xfffe8650>
    8788:	21003fcc 	andi	r4,r4,255
    878c:	2002c41e 	bne	r4,zero,92a0 <___vfiprintf_internal_r+0x143c>
    8790:	a5000414 	ori	r20,r20,16
    8794:	a080080c 	andi	r2,r20,32
    8798:	103f5f1e 	bne	r2,zero,8518 <__alt_data_end+0xfffe8518>
    879c:	a080040c 	andi	r2,r20,16
    87a0:	10020f26 	beq	r2,zero,8fe0 <___vfiprintf_internal_r+0x117c>
    87a4:	da802217 	ldw	r10,136(sp)
    87a8:	d8001d85 	stb	zero,118(sp)
    87ac:	0027883a 	mov	r19,zero
    87b0:	50800104 	addi	r2,r10,4
    87b4:	54800017 	ldw	r18,0(r10)
    87b8:	48021116 	blt	r9,zero,9000 <___vfiprintf_internal_r+0x119c>
    87bc:	00ffdfc4 	movi	r3,-129
    87c0:	d8802215 	stw	r2,136(sp)
    87c4:	a0e8703a 	and	r20,r20,r3
    87c8:	903f5e1e 	bne	r18,zero,8544 <__alt_data_end+0xfffe8544>
    87cc:	0039883a 	mov	fp,zero
    87d0:	4802a626 	beq	r9,zero,926c <___vfiprintf_internal_r+0x1408>
    87d4:	0025883a 	mov	r18,zero
    87d8:	0027883a 	mov	r19,zero
    87dc:	003f5a06 	br	8548 <__alt_data_end+0xfffe8548>
    87e0:	21003fcc 	andi	r4,r4,255
    87e4:	20029f1e 	bne	r4,zero,9264 <___vfiprintf_internal_r+0x1400>
    87e8:	a5000414 	ori	r20,r20,16
    87ec:	a080080c 	andi	r2,r20,32
    87f0:	10005e1e 	bne	r2,zero,896c <___vfiprintf_internal_r+0xb08>
    87f4:	a080040c 	andi	r2,r20,16
    87f8:	1001a21e 	bne	r2,zero,8e84 <___vfiprintf_internal_r+0x1020>
    87fc:	a080100c 	andi	r2,r20,64
    8800:	d8001d85 	stb	zero,118(sp)
    8804:	da802217 	ldw	r10,136(sp)
    8808:	1002231e 	bne	r2,zero,9098 <___vfiprintf_internal_r+0x1234>
    880c:	50800104 	addi	r2,r10,4
    8810:	54800017 	ldw	r18,0(r10)
    8814:	0027883a 	mov	r19,zero
    8818:	4801a00e 	bge	r9,zero,8e9c <___vfiprintf_internal_r+0x1038>
    881c:	d8802215 	stw	r2,136(sp)
    8820:	0039883a 	mov	fp,zero
    8824:	94c4b03a 	or	r2,r18,r19
    8828:	103f901e 	bne	r2,zero,866c <__alt_data_end+0xfffe866c>
    882c:	00800044 	movi	r2,1
    8830:	10803fcc 	andi	r2,r2,255
    8834:	00c00044 	movi	r3,1
    8838:	10c05926 	beq	r2,r3,89a0 <___vfiprintf_internal_r+0xb3c>
    883c:	00c00084 	movi	r3,2
    8840:	10ffe41e 	bne	r2,r3,87d4 <__alt_data_end+0xfffe87d4>
    8844:	0025883a 	mov	r18,zero
    8848:	0027883a 	mov	r19,zero
    884c:	00013d06 	br	8d44 <___vfiprintf_internal_r+0xee0>
    8850:	21003fcc 	andi	r4,r4,255
    8854:	2002811e 	bne	r4,zero,925c <___vfiprintf_internal_r+0x13f8>
    8858:	00800074 	movhi	r2,1
    885c:	10bdfb04 	addi	r2,r2,-2068
    8860:	d8802615 	stw	r2,152(sp)
    8864:	a080080c 	andi	r2,r20,32
    8868:	103f561e 	bne	r2,zero,85c4 <__alt_data_end+0xfffe85c4>
    886c:	a080040c 	andi	r2,r20,16
    8870:	1001d126 	beq	r2,zero,8fb8 <___vfiprintf_internal_r+0x1154>
    8874:	da802217 	ldw	r10,136(sp)
    8878:	0027883a 	mov	r19,zero
    887c:	54800017 	ldw	r18,0(r10)
    8880:	52800104 	addi	r10,r10,4
    8884:	da802215 	stw	r10,136(sp)
    8888:	003f5306 	br	85d8 <__alt_data_end+0xfffe85d8>
    888c:	da802217 	ldw	r10,136(sp)
    8890:	d8001d85 	stb	zero,118(sp)
    8894:	55400017 	ldw	r21,0(r10)
    8898:	50c00104 	addi	r3,r10,4
    889c:	a8024226 	beq	r21,zero,91a8 <___vfiprintf_internal_r+0x1344>
    88a0:	48021816 	blt	r9,zero,9104 <___vfiprintf_internal_r+0x12a0>
    88a4:	480d883a 	mov	r6,r9
    88a8:	000b883a 	mov	r5,zero
    88ac:	a809883a 	mov	r4,r21
    88b0:	d8c02a15 	stw	r3,168(sp)
    88b4:	da002b15 	stw	r8,172(sp)
    88b8:	da402c15 	stw	r9,176(sp)
    88bc:	00060600 	call	6060 <memchr>
    88c0:	d8c02a17 	ldw	r3,168(sp)
    88c4:	da002b17 	ldw	r8,172(sp)
    88c8:	da402c17 	ldw	r9,176(sp)
    88cc:	10024826 	beq	r2,zero,91f0 <___vfiprintf_internal_r+0x138c>
    88d0:	1567c83a 	sub	r19,r2,r21
    88d4:	df001d83 	ldbu	fp,118(sp)
    88d8:	d8c02215 	stw	r3,136(sp)
    88dc:	0013883a 	mov	r9,zero
    88e0:	003e6006 	br	8264 <__alt_data_end+0xfffe8264>
    88e4:	21003fcc 	andi	r4,r4,255
    88e8:	203fc026 	beq	r4,zero,87ec <__alt_data_end+0xfffe87ec>
    88ec:	d9c01d85 	stb	r7,118(sp)
    88f0:	003fbe06 	br	87ec <__alt_data_end+0xfffe87ec>
    88f4:	da802217 	ldw	r10,136(sp)
    88f8:	54400017 	ldw	r17,0(r10)
    88fc:	50800104 	addi	r2,r10,4
    8900:	883e3b16 	blt	r17,zero,81f0 <__alt_data_end+0xfffe81f0>
    8904:	d8802215 	stw	r2,136(sp)
    8908:	80c00007 	ldb	r3,0(r16)
    890c:	003db406 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8910:	01000044 	movi	r4,1
    8914:	01c00ac4 	movi	r7,43
    8918:	80c00007 	ldb	r3,0(r16)
    891c:	003db006 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8920:	80c00007 	ldb	r3,0(r16)
    8924:	82800044 	addi	r10,r16,1
    8928:	1b423c26 	beq	r3,r13,921c <___vfiprintf_internal_r+0x13b8>
    892c:	18bff404 	addi	r2,r3,-48
    8930:	0013883a 	mov	r9,zero
    8934:	30822b36 	bltu	r6,r2,91e4 <___vfiprintf_internal_r+0x1380>
    8938:	50c00007 	ldb	r3,0(r10)
    893c:	4a4002a4 	muli	r9,r9,10
    8940:	54000044 	addi	r16,r10,1
    8944:	8015883a 	mov	r10,r16
    8948:	4893883a 	add	r9,r9,r2
    894c:	18bff404 	addi	r2,r3,-48
    8950:	30bff92e 	bgeu	r6,r2,8938 <__alt_data_end+0xfffe8938>
    8954:	483da30e 	bge	r9,zero,7fe4 <__alt_data_end+0xfffe7fe4>
    8958:	027fffc4 	movi	r9,-1
    895c:	003da106 	br	7fe4 <__alt_data_end+0xfffe7fe4>
    8960:	a5001014 	ori	r20,r20,64
    8964:	80c00007 	ldb	r3,0(r16)
    8968:	003d9d06 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    896c:	da802217 	ldw	r10,136(sp)
    8970:	d8001d85 	stb	zero,118(sp)
    8974:	50c00204 	addi	r3,r10,8
    8978:	54800017 	ldw	r18,0(r10)
    897c:	54c00117 	ldw	r19,4(r10)
    8980:	4801ca16 	blt	r9,zero,90ac <___vfiprintf_internal_r+0x1248>
    8984:	013fdfc4 	movi	r4,-129
    8988:	94c4b03a 	or	r2,r18,r19
    898c:	d8c02215 	stw	r3,136(sp)
    8990:	a128703a 	and	r20,r20,r4
    8994:	0039883a 	mov	fp,zero
    8998:	103f341e 	bne	r2,zero,866c <__alt_data_end+0xfffe866c>
    899c:	483e2e26 	beq	r9,zero,8258 <__alt_data_end+0xfffe8258>
    89a0:	0025883a 	mov	r18,zero
    89a4:	94800c04 	addi	r18,r18,48
    89a8:	dc8019c5 	stb	r18,103(sp)
    89ac:	dcc02717 	ldw	r19,156(sp)
    89b0:	dd4019c4 	addi	r21,sp,103
    89b4:	003e2b06 	br	8264 <__alt_data_end+0xfffe8264>
    89b8:	21003fcc 	andi	r4,r4,255
    89bc:	2002361e 	bne	r4,zero,9298 <___vfiprintf_internal_r+0x1434>
    89c0:	1801c126 	beq	r3,zero,90c8 <___vfiprintf_internal_r+0x1264>
    89c4:	04800044 	movi	r18,1
    89c8:	d8c01005 	stb	r3,64(sp)
    89cc:	d8001d85 	stb	zero,118(sp)
    89d0:	9027883a 	mov	r19,r18
    89d4:	dd401004 	addi	r21,sp,64
    89d8:	003f1106 	br	8620 <__alt_data_end+0xfffe8620>
    89dc:	d9402117 	ldw	r5,132(sp)
    89e0:	d9002017 	ldw	r4,128(sp)
    89e4:	d9801a04 	addi	r6,sp,104
    89e8:	d9c02b15 	stw	r7,172(sp)
    89ec:	dbc02a15 	stw	r15,168(sp)
    89f0:	0007d500 	call	7d50 <__sprint_r.part.0>
    89f4:	d9c02b17 	ldw	r7,172(sp)
    89f8:	dbc02a17 	ldw	r15,168(sp)
    89fc:	10006d1e 	bne	r2,zero,8bb4 <___vfiprintf_internal_r+0xd50>
    8a00:	d9801b17 	ldw	r6,108(sp)
    8a04:	d8801c17 	ldw	r2,112(sp)
    8a08:	d811883a 	mov	r8,sp
    8a0c:	31400044 	addi	r5,r6,1
    8a10:	003e3306 	br	82e0 <__alt_data_end+0xfffe82e0>
    8a14:	d9401b17 	ldw	r5,108(sp)
    8a18:	d8801c17 	ldw	r2,112(sp)
    8a1c:	29000044 	addi	r4,r5,1
    8a20:	d8c01d87 	ldb	r3,118(sp)
    8a24:	183e4d26 	beq	r3,zero,835c <__alt_data_end+0xfffe835c>
    8a28:	00c00044 	movi	r3,1
    8a2c:	d9401d84 	addi	r5,sp,118
    8a30:	10c5883a 	add	r2,r2,r3
    8a34:	41400015 	stw	r5,0(r8)
    8a38:	40c00115 	stw	r3,4(r8)
    8a3c:	d8801c15 	stw	r2,112(sp)
    8a40:	d9001b15 	stw	r4,108(sp)
    8a44:	014001c4 	movi	r5,7
    8a48:	2900a90e 	bge	r5,r4,8cf0 <___vfiprintf_internal_r+0xe8c>
    8a4c:	1000da1e 	bne	r2,zero,8db8 <___vfiprintf_internal_r+0xf54>
    8a50:	7000ab1e 	bne	r14,zero,8d00 <___vfiprintf_internal_r+0xe9c>
    8a54:	000b883a 	mov	r5,zero
    8a58:	1809883a 	mov	r4,r3
    8a5c:	d811883a 	mov	r8,sp
    8a60:	00c02004 	movi	r3,128
    8a64:	e0fe4d26 	beq	fp,r3,839c <__alt_data_end+0xfffe839c>
    8a68:	4cf9c83a 	sub	fp,r9,r19
    8a6c:	073e7b0e 	bge	zero,fp,845c <__alt_data_end+0xfffe845c>
    8a70:	01c00404 	movi	r7,16
    8a74:	3f01900e 	bge	r7,fp,90b8 <___vfiprintf_internal_r+0x1254>
    8a78:	00c00074 	movhi	r3,1
    8a7c:	18fe6104 	addi	r3,r3,-1660
    8a80:	d8c02415 	stw	r3,144(sp)
    8a84:	034001c4 	movi	r13,7
    8a88:	00000506 	br	8aa0 <___vfiprintf_internal_r+0xc3c>
    8a8c:	29000084 	addi	r4,r5,2
    8a90:	42000204 	addi	r8,r8,8
    8a94:	180b883a 	mov	r5,r3
    8a98:	e73ffc04 	addi	fp,fp,-16
    8a9c:	3f000d0e 	bge	r7,fp,8ad4 <___vfiprintf_internal_r+0xc70>
    8aa0:	10800404 	addi	r2,r2,16
    8aa4:	28c00044 	addi	r3,r5,1
    8aa8:	45c00015 	stw	r23,0(r8)
    8aac:	41c00115 	stw	r7,4(r8)
    8ab0:	d8801c15 	stw	r2,112(sp)
    8ab4:	d8c01b15 	stw	r3,108(sp)
    8ab8:	68fff40e 	bge	r13,r3,8a8c <__alt_data_end+0xfffe8a8c>
    8abc:	1000101e 	bne	r2,zero,8b00 <___vfiprintf_internal_r+0xc9c>
    8ac0:	e73ffc04 	addi	fp,fp,-16
    8ac4:	01000044 	movi	r4,1
    8ac8:	000b883a 	mov	r5,zero
    8acc:	d811883a 	mov	r8,sp
    8ad0:	3f3ff316 	blt	r7,fp,8aa0 <__alt_data_end+0xfffe8aa0>
    8ad4:	da802417 	ldw	r10,144(sp)
    8ad8:	1705883a 	add	r2,r2,fp
    8adc:	47000115 	stw	fp,4(r8)
    8ae0:	42800015 	stw	r10,0(r8)
    8ae4:	d8801c15 	stw	r2,112(sp)
    8ae8:	d9001b15 	stw	r4,108(sp)
    8aec:	00c001c4 	movi	r3,7
    8af0:	19003616 	blt	r3,r4,8bcc <___vfiprintf_internal_r+0xd68>
    8af4:	42000204 	addi	r8,r8,8
    8af8:	21000044 	addi	r4,r4,1
    8afc:	003e5706 	br	845c <__alt_data_end+0xfffe845c>
    8b00:	d9402117 	ldw	r5,132(sp)
    8b04:	d9002017 	ldw	r4,128(sp)
    8b08:	d9801a04 	addi	r6,sp,104
    8b0c:	d9c02b15 	stw	r7,172(sp)
    8b10:	db402a15 	stw	r13,168(sp)
    8b14:	0007d500 	call	7d50 <__sprint_r.part.0>
    8b18:	d9c02b17 	ldw	r7,172(sp)
    8b1c:	db402a17 	ldw	r13,168(sp)
    8b20:	1000241e 	bne	r2,zero,8bb4 <___vfiprintf_internal_r+0xd50>
    8b24:	d9401b17 	ldw	r5,108(sp)
    8b28:	d8801c17 	ldw	r2,112(sp)
    8b2c:	d811883a 	mov	r8,sp
    8b30:	29000044 	addi	r4,r5,1
    8b34:	003fd806 	br	8a98 <__alt_data_end+0xfffe8a98>
    8b38:	d9401b17 	ldw	r5,108(sp)
    8b3c:	00c00074 	movhi	r3,1
    8b40:	18fe6504 	addi	r3,r3,-1644
    8b44:	d8c02415 	stw	r3,144(sp)
    8b48:	29400044 	addi	r5,r5,1
    8b4c:	d8c02417 	ldw	r3,144(sp)
    8b50:	14c5883a 	add	r2,r2,r19
    8b54:	44c00115 	stw	r19,4(r8)
    8b58:	40c00015 	stw	r3,0(r8)
    8b5c:	d8801c15 	stw	r2,112(sp)
    8b60:	d9401b15 	stw	r5,108(sp)
    8b64:	00c001c4 	movi	r3,7
    8b68:	1940070e 	bge	r3,r5,8b88 <___vfiprintf_internal_r+0xd24>
    8b6c:	103e4826 	beq	r2,zero,8490 <__alt_data_end+0xfffe8490>
    8b70:	d9402117 	ldw	r5,132(sp)
    8b74:	d9002017 	ldw	r4,128(sp)
    8b78:	d9801a04 	addi	r6,sp,104
    8b7c:	0007d500 	call	7d50 <__sprint_r.part.0>
    8b80:	10000c1e 	bne	r2,zero,8bb4 <___vfiprintf_internal_r+0xd50>
    8b84:	d8801c17 	ldw	r2,112(sp)
    8b88:	8c80010e 	bge	r17,r18,8b90 <___vfiprintf_internal_r+0xd2c>
    8b8c:	9023883a 	mov	r17,r18
    8b90:	da802317 	ldw	r10,140(sp)
    8b94:	5455883a 	add	r10,r10,r17
    8b98:	da802315 	stw	r10,140(sp)
    8b9c:	103e4126 	beq	r2,zero,84a4 <__alt_data_end+0xfffe84a4>
    8ba0:	d9402117 	ldw	r5,132(sp)
    8ba4:	d9002017 	ldw	r4,128(sp)
    8ba8:	d9801a04 	addi	r6,sp,104
    8bac:	0007d500 	call	7d50 <__sprint_r.part.0>
    8bb0:	103e3c26 	beq	r2,zero,84a4 <__alt_data_end+0xfffe84a4>
    8bb4:	dd002117 	ldw	r20,132(sp)
    8bb8:	a080030b 	ldhu	r2,12(r20)
    8bbc:	1080100c 	andi	r2,r2,64
    8bc0:	1001231e 	bne	r2,zero,9050 <___vfiprintf_internal_r+0x11ec>
    8bc4:	d8802317 	ldw	r2,140(sp)
    8bc8:	003d7b06 	br	81b8 <__alt_data_end+0xfffe81b8>
    8bcc:	1000991e 	bne	r2,zero,8e34 <___vfiprintf_internal_r+0xfd0>
    8bd0:	00c00044 	movi	r3,1
    8bd4:	9805883a 	mov	r2,r19
    8bd8:	dd400015 	stw	r21,0(sp)
    8bdc:	dcc00115 	stw	r19,4(sp)
    8be0:	dcc01c15 	stw	r19,112(sp)
    8be4:	d8c01b15 	stw	r3,108(sp)
    8be8:	d811883a 	mov	r8,sp
    8bec:	42000204 	addi	r8,r8,8
    8bf0:	a2c0010c 	andi	r11,r20,4
    8bf4:	583fe426 	beq	r11,zero,8b88 <__alt_data_end+0xfffe8b88>
    8bf8:	8ca7c83a 	sub	r19,r17,r18
    8bfc:	04ffe20e 	bge	zero,r19,8b88 <__alt_data_end+0xfffe8b88>
    8c00:	01c00404 	movi	r7,16
    8c04:	3cffcc0e 	bge	r7,r19,8b38 <__alt_data_end+0xfffe8b38>
    8c08:	02800074 	movhi	r10,1
    8c0c:	52be6504 	addi	r10,r10,-1644
    8c10:	d9001b17 	ldw	r4,108(sp)
    8c14:	da802415 	stw	r10,144(sp)
    8c18:	382b883a 	mov	r21,r7
    8c1c:	050001c4 	movi	r20,7
    8c20:	df002017 	ldw	fp,128(sp)
    8c24:	00000506 	br	8c3c <___vfiprintf_internal_r+0xdd8>
    8c28:	21400084 	addi	r5,r4,2
    8c2c:	42000204 	addi	r8,r8,8
    8c30:	1809883a 	mov	r4,r3
    8c34:	9cfffc04 	addi	r19,r19,-16
    8c38:	acffc40e 	bge	r21,r19,8b4c <__alt_data_end+0xfffe8b4c>
    8c3c:	10800404 	addi	r2,r2,16
    8c40:	20c00044 	addi	r3,r4,1
    8c44:	45800015 	stw	r22,0(r8)
    8c48:	45400115 	stw	r21,4(r8)
    8c4c:	d8801c15 	stw	r2,112(sp)
    8c50:	d8c01b15 	stw	r3,108(sp)
    8c54:	a0fff40e 	bge	r20,r3,8c28 <__alt_data_end+0xfffe8c28>
    8c58:	1000041e 	bne	r2,zero,8c6c <___vfiprintf_internal_r+0xe08>
    8c5c:	01400044 	movi	r5,1
    8c60:	0009883a 	mov	r4,zero
    8c64:	d811883a 	mov	r8,sp
    8c68:	003ff206 	br	8c34 <__alt_data_end+0xfffe8c34>
    8c6c:	d9402117 	ldw	r5,132(sp)
    8c70:	d9801a04 	addi	r6,sp,104
    8c74:	e009883a 	mov	r4,fp
    8c78:	0007d500 	call	7d50 <__sprint_r.part.0>
    8c7c:	103fcd1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8c80:	d9001b17 	ldw	r4,108(sp)
    8c84:	d8801c17 	ldw	r2,112(sp)
    8c88:	d811883a 	mov	r8,sp
    8c8c:	21400044 	addi	r5,r4,1
    8c90:	003fe806 	br	8c34 <__alt_data_end+0xfffe8c34>
    8c94:	d9402117 	ldw	r5,132(sp)
    8c98:	d9002017 	ldw	r4,128(sp)
    8c9c:	d9801a04 	addi	r6,sp,104
    8ca0:	d9c02b15 	stw	r7,172(sp)
    8ca4:	db402a15 	stw	r13,168(sp)
    8ca8:	0007d500 	call	7d50 <__sprint_r.part.0>
    8cac:	d9c02b17 	ldw	r7,172(sp)
    8cb0:	db402a17 	ldw	r13,168(sp)
    8cb4:	103fbf1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8cb8:	d9401b17 	ldw	r5,108(sp)
    8cbc:	d8801c17 	ldw	r2,112(sp)
    8cc0:	d811883a 	mov	r8,sp
    8cc4:	29800044 	addi	r6,r5,1
    8cc8:	003dc406 	br	83dc <__alt_data_end+0xfffe83dc>
    8ccc:	1000d21e 	bne	r2,zero,9018 <___vfiprintf_internal_r+0x11b4>
    8cd0:	d8c01d87 	ldb	r3,118(sp)
    8cd4:	18009526 	beq	r3,zero,8f2c <___vfiprintf_internal_r+0x10c8>
    8cd8:	00800044 	movi	r2,1
    8cdc:	d8c01d84 	addi	r3,sp,118
    8ce0:	1009883a 	mov	r4,r2
    8ce4:	d8c00015 	stw	r3,0(sp)
    8ce8:	d8800115 	stw	r2,4(sp)
    8cec:	d811883a 	mov	r8,sp
    8cf0:	200b883a 	mov	r5,r4
    8cf4:	42000204 	addi	r8,r8,8
    8cf8:	21000044 	addi	r4,r4,1
    8cfc:	003d9706 	br	835c <__alt_data_end+0xfffe835c>
    8d00:	d9001d04 	addi	r4,sp,116
    8d04:	00800084 	movi	r2,2
    8d08:	d9000015 	stw	r4,0(sp)
    8d0c:	d8800115 	stw	r2,4(sp)
    8d10:	1809883a 	mov	r4,r3
    8d14:	d811883a 	mov	r8,sp
    8d18:	200b883a 	mov	r5,r4
    8d1c:	42000204 	addi	r8,r8,8
    8d20:	21000044 	addi	r4,r4,1
    8d24:	003f4e06 	br	8a60 <__alt_data_end+0xfffe8a60>
    8d28:	d8001d85 	stb	zero,118(sp)
    8d2c:	48005016 	blt	r9,zero,8e70 <___vfiprintf_internal_r+0x100c>
    8d30:	00ffdfc4 	movi	r3,-129
    8d34:	94c4b03a 	or	r2,r18,r19
    8d38:	a0e8703a 	and	r20,r20,r3
    8d3c:	103d4426 	beq	r2,zero,8250 <__alt_data_end+0xfffe8250>
    8d40:	0039883a 	mov	fp,zero
    8d44:	d9002617 	ldw	r4,152(sp)
    8d48:	dd401a04 	addi	r21,sp,104
    8d4c:	908003cc 	andi	r2,r18,15
    8d50:	9806973a 	slli	r3,r19,28
    8d54:	2085883a 	add	r2,r4,r2
    8d58:	9024d13a 	srli	r18,r18,4
    8d5c:	10800003 	ldbu	r2,0(r2)
    8d60:	9826d13a 	srli	r19,r19,4
    8d64:	ad7fffc4 	addi	r21,r21,-1
    8d68:	1ca4b03a 	or	r18,r3,r18
    8d6c:	a8800005 	stb	r2,0(r21)
    8d70:	94c4b03a 	or	r2,r18,r19
    8d74:	103ff51e 	bne	r2,zero,8d4c <__alt_data_end+0xfffe8d4c>
    8d78:	003e5906 	br	86e0 <__alt_data_end+0xfffe86e0>
    8d7c:	d9402117 	ldw	r5,132(sp)
    8d80:	d9002017 	ldw	r4,128(sp)
    8d84:	d9801a04 	addi	r6,sp,104
    8d88:	0007d500 	call	7d50 <__sprint_r.part.0>
    8d8c:	103f891e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8d90:	d8801c17 	ldw	r2,112(sp)
    8d94:	d811883a 	mov	r8,sp
    8d98:	003f9506 	br	8bf0 <__alt_data_end+0xfffe8bf0>
    8d9c:	d9402117 	ldw	r5,132(sp)
    8da0:	d9002017 	ldw	r4,128(sp)
    8da4:	d9801a04 	addi	r6,sp,104
    8da8:	0007d500 	call	7d50 <__sprint_r.part.0>
    8dac:	103f811e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8db0:	d811883a 	mov	r8,sp
    8db4:	003ced06 	br	816c <__alt_data_end+0xfffe816c>
    8db8:	d9402117 	ldw	r5,132(sp)
    8dbc:	d9002017 	ldw	r4,128(sp)
    8dc0:	d9801a04 	addi	r6,sp,104
    8dc4:	da402c15 	stw	r9,176(sp)
    8dc8:	db802a15 	stw	r14,168(sp)
    8dcc:	0007d500 	call	7d50 <__sprint_r.part.0>
    8dd0:	da402c17 	ldw	r9,176(sp)
    8dd4:	db802a17 	ldw	r14,168(sp)
    8dd8:	103f761e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8ddc:	d9401b17 	ldw	r5,108(sp)
    8de0:	d8801c17 	ldw	r2,112(sp)
    8de4:	d811883a 	mov	r8,sp
    8de8:	29000044 	addi	r4,r5,1
    8dec:	003d5b06 	br	835c <__alt_data_end+0xfffe835c>
    8df0:	d9402117 	ldw	r5,132(sp)
    8df4:	d9002017 	ldw	r4,128(sp)
    8df8:	d9801a04 	addi	r6,sp,104
    8dfc:	da402c15 	stw	r9,176(sp)
    8e00:	0007d500 	call	7d50 <__sprint_r.part.0>
    8e04:	da402c17 	ldw	r9,176(sp)
    8e08:	103f6a1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8e0c:	d9401b17 	ldw	r5,108(sp)
    8e10:	d8801c17 	ldw	r2,112(sp)
    8e14:	d811883a 	mov	r8,sp
    8e18:	29000044 	addi	r4,r5,1
    8e1c:	003f1006 	br	8a60 <__alt_data_end+0xfffe8a60>
    8e20:	1000c31e 	bne	r2,zero,9130 <___vfiprintf_internal_r+0x12cc>
    8e24:	01000044 	movi	r4,1
    8e28:	000b883a 	mov	r5,zero
    8e2c:	d811883a 	mov	r8,sp
    8e30:	003f0d06 	br	8a68 <__alt_data_end+0xfffe8a68>
    8e34:	d9402117 	ldw	r5,132(sp)
    8e38:	d9002017 	ldw	r4,128(sp)
    8e3c:	d9801a04 	addi	r6,sp,104
    8e40:	0007d500 	call	7d50 <__sprint_r.part.0>
    8e44:	103f5b1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    8e48:	d9001b17 	ldw	r4,108(sp)
    8e4c:	d8801c17 	ldw	r2,112(sp)
    8e50:	d811883a 	mov	r8,sp
    8e54:	21000044 	addi	r4,r4,1
    8e58:	003d8006 	br	845c <__alt_data_end+0xfffe845c>
    8e5c:	01000074 	movhi	r4,1
    8e60:	213e0004 	addi	r4,r4,-2048
    8e64:	d9002615 	stw	r4,152(sp)
    8e68:	d8c02215 	stw	r3,136(sp)
    8e6c:	1029883a 	mov	r20,r2
    8e70:	94c4b03a 	or	r2,r18,r19
    8e74:	103fb21e 	bne	r2,zero,8d40 <__alt_data_end+0xfffe8d40>
    8e78:	0039883a 	mov	fp,zero
    8e7c:	00800084 	movi	r2,2
    8e80:	003e6b06 	br	8830 <__alt_data_end+0xfffe8830>
    8e84:	da802217 	ldw	r10,136(sp)
    8e88:	d8001d85 	stb	zero,118(sp)
    8e8c:	0027883a 	mov	r19,zero
    8e90:	50800104 	addi	r2,r10,4
    8e94:	54800017 	ldw	r18,0(r10)
    8e98:	483e6016 	blt	r9,zero,881c <__alt_data_end+0xfffe881c>
    8e9c:	00ffdfc4 	movi	r3,-129
    8ea0:	d8802215 	stw	r2,136(sp)
    8ea4:	a0e8703a 	and	r20,r20,r3
    8ea8:	0039883a 	mov	fp,zero
    8eac:	903ebb26 	beq	r18,zero,899c <__alt_data_end+0xfffe899c>
    8eb0:	00800244 	movi	r2,9
    8eb4:	14bdee36 	bltu	r2,r18,8670 <__alt_data_end+0xfffe8670>
    8eb8:	003eba06 	br	89a4 <__alt_data_end+0xfffe89a4>
    8ebc:	00800c04 	movi	r2,48
    8ec0:	d8c01d45 	stb	r3,117(sp)
    8ec4:	d8801d05 	stb	r2,116(sp)
    8ec8:	d8001d85 	stb	zero,118(sp)
    8ecc:	a0c00094 	ori	r3,r20,2
    8ed0:	4800a916 	blt	r9,zero,9178 <___vfiprintf_internal_r+0x1314>
    8ed4:	00bfdfc4 	movi	r2,-129
    8ed8:	a096703a 	and	r11,r20,r2
    8edc:	5d000094 	ori	r20,r11,2
    8ee0:	0039883a 	mov	fp,zero
    8ee4:	003f9706 	br	8d44 <__alt_data_end+0xfffe8d44>
    8ee8:	8025883a 	mov	r18,r16
    8eec:	003c2e06 	br	7fa8 <__alt_data_end+0xfffe7fa8>
    8ef0:	00800074 	movhi	r2,1
    8ef4:	10be0004 	addi	r2,r2,-2048
    8ef8:	0039883a 	mov	fp,zero
    8efc:	d8802615 	stw	r2,152(sp)
    8f00:	003f9006 	br	8d44 <__alt_data_end+0xfffe8d44>
    8f04:	04a5c83a 	sub	r18,zero,r18
    8f08:	07000b44 	movi	fp,45
    8f0c:	9004c03a 	cmpne	r2,r18,zero
    8f10:	04e7c83a 	sub	r19,zero,r19
    8f14:	df001d85 	stb	fp,118(sp)
    8f18:	98a7c83a 	sub	r19,r19,r2
    8f1c:	48009f16 	blt	r9,zero,919c <___vfiprintf_internal_r+0x1338>
    8f20:	00bfdfc4 	movi	r2,-129
    8f24:	a0a8703a 	and	r20,r20,r2
    8f28:	003dd006 	br	866c <__alt_data_end+0xfffe866c>
    8f2c:	70004c26 	beq	r14,zero,9060 <___vfiprintf_internal_r+0x11fc>
    8f30:	00800084 	movi	r2,2
    8f34:	d8c01d04 	addi	r3,sp,116
    8f38:	d8c00015 	stw	r3,0(sp)
    8f3c:	d8800115 	stw	r2,4(sp)
    8f40:	01000044 	movi	r4,1
    8f44:	d811883a 	mov	r8,sp
    8f48:	003f7306 	br	8d18 <__alt_data_end+0xfffe8d18>
    8f4c:	a080100c 	andi	r2,r20,64
    8f50:	da802217 	ldw	r10,136(sp)
    8f54:	103e0626 	beq	r2,zero,8770 <__alt_data_end+0xfffe8770>
    8f58:	5480000f 	ldh	r18,0(r10)
    8f5c:	52800104 	addi	r10,r10,4
    8f60:	da802215 	stw	r10,136(sp)
    8f64:	9027d7fa 	srai	r19,r18,31
    8f68:	9805883a 	mov	r2,r19
    8f6c:	003db806 	br	8650 <__alt_data_end+0xfffe8650>
    8f70:	a080040c 	andi	r2,r20,16
    8f74:	1000091e 	bne	r2,zero,8f9c <___vfiprintf_internal_r+0x1138>
    8f78:	a2c0100c 	andi	r11,r20,64
    8f7c:	58000726 	beq	r11,zero,8f9c <___vfiprintf_internal_r+0x1138>
    8f80:	da802217 	ldw	r10,136(sp)
    8f84:	50800017 	ldw	r2,0(r10)
    8f88:	52800104 	addi	r10,r10,4
    8f8c:	da802215 	stw	r10,136(sp)
    8f90:	da802317 	ldw	r10,140(sp)
    8f94:	1280000d 	sth	r10,0(r2)
    8f98:	003be706 	br	7f38 <__alt_data_end+0xfffe7f38>
    8f9c:	da802217 	ldw	r10,136(sp)
    8fa0:	50800017 	ldw	r2,0(r10)
    8fa4:	52800104 	addi	r10,r10,4
    8fa8:	da802215 	stw	r10,136(sp)
    8fac:	da802317 	ldw	r10,140(sp)
    8fb0:	12800015 	stw	r10,0(r2)
    8fb4:	003be006 	br	7f38 <__alt_data_end+0xfffe7f38>
    8fb8:	a080100c 	andi	r2,r20,64
    8fbc:	da802217 	ldw	r10,136(sp)
    8fc0:	10003026 	beq	r2,zero,9084 <___vfiprintf_internal_r+0x1220>
    8fc4:	5480000b 	ldhu	r18,0(r10)
    8fc8:	52800104 	addi	r10,r10,4
    8fcc:	0027883a 	mov	r19,zero
    8fd0:	da802215 	stw	r10,136(sp)
    8fd4:	003d8006 	br	85d8 <__alt_data_end+0xfffe85d8>
    8fd8:	80c00007 	ldb	r3,0(r16)
    8fdc:	003c0006 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    8fe0:	a080100c 	andi	r2,r20,64
    8fe4:	d8001d85 	stb	zero,118(sp)
    8fe8:	da802217 	ldw	r10,136(sp)
    8fec:	1000201e 	bne	r2,zero,9070 <___vfiprintf_internal_r+0x120c>
    8ff0:	50800104 	addi	r2,r10,4
    8ff4:	54800017 	ldw	r18,0(r10)
    8ff8:	0027883a 	mov	r19,zero
    8ffc:	483def0e 	bge	r9,zero,87bc <__alt_data_end+0xfffe87bc>
    9000:	94c6b03a 	or	r3,r18,r19
    9004:	d8802215 	stw	r2,136(sp)
    9008:	183d4e1e 	bne	r3,zero,8544 <__alt_data_end+0xfffe8544>
    900c:	0039883a 	mov	fp,zero
    9010:	0005883a 	mov	r2,zero
    9014:	003e0606 	br	8830 <__alt_data_end+0xfffe8830>
    9018:	d9402117 	ldw	r5,132(sp)
    901c:	d9002017 	ldw	r4,128(sp)
    9020:	d9801a04 	addi	r6,sp,104
    9024:	da402c15 	stw	r9,176(sp)
    9028:	db802a15 	stw	r14,168(sp)
    902c:	0007d500 	call	7d50 <__sprint_r.part.0>
    9030:	da402c17 	ldw	r9,176(sp)
    9034:	db802a17 	ldw	r14,168(sp)
    9038:	103ede1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    903c:	d9401b17 	ldw	r5,108(sp)
    9040:	d8801c17 	ldw	r2,112(sp)
    9044:	d811883a 	mov	r8,sp
    9048:	29000044 	addi	r4,r5,1
    904c:	003e7406 	br	8a20 <__alt_data_end+0xfffe8a20>
    9050:	00bfffc4 	movi	r2,-1
    9054:	003c5806 	br	81b8 <__alt_data_end+0xfffe81b8>
    9058:	d811883a 	mov	r8,sp
    905c:	003ee806 	br	8c00 <__alt_data_end+0xfffe8c00>
    9060:	000b883a 	mov	r5,zero
    9064:	01000044 	movi	r4,1
    9068:	d811883a 	mov	r8,sp
    906c:	003e7c06 	br	8a60 <__alt_data_end+0xfffe8a60>
    9070:	50800104 	addi	r2,r10,4
    9074:	5480000b 	ldhu	r18,0(r10)
    9078:	0027883a 	mov	r19,zero
    907c:	483dcf0e 	bge	r9,zero,87bc <__alt_data_end+0xfffe87bc>
    9080:	003fdf06 	br	9000 <__alt_data_end+0xfffe9000>
    9084:	54800017 	ldw	r18,0(r10)
    9088:	52800104 	addi	r10,r10,4
    908c:	0027883a 	mov	r19,zero
    9090:	da802215 	stw	r10,136(sp)
    9094:	003d5006 	br	85d8 <__alt_data_end+0xfffe85d8>
    9098:	50800104 	addi	r2,r10,4
    909c:	5480000b 	ldhu	r18,0(r10)
    90a0:	0027883a 	mov	r19,zero
    90a4:	483f7d0e 	bge	r9,zero,8e9c <__alt_data_end+0xfffe8e9c>
    90a8:	003ddc06 	br	881c <__alt_data_end+0xfffe881c>
    90ac:	d8c02215 	stw	r3,136(sp)
    90b0:	0039883a 	mov	fp,zero
    90b4:	003ddb06 	br	8824 <__alt_data_end+0xfffe8824>
    90b8:	02800074 	movhi	r10,1
    90bc:	52be6104 	addi	r10,r10,-1660
    90c0:	da802415 	stw	r10,144(sp)
    90c4:	003e8306 	br	8ad4 <__alt_data_end+0xfffe8ad4>
    90c8:	d8801c17 	ldw	r2,112(sp)
    90cc:	dd002117 	ldw	r20,132(sp)
    90d0:	103eb926 	beq	r2,zero,8bb8 <__alt_data_end+0xfffe8bb8>
    90d4:	d9002017 	ldw	r4,128(sp)
    90d8:	d9801a04 	addi	r6,sp,104
    90dc:	a00b883a 	mov	r5,r20
    90e0:	0007d500 	call	7d50 <__sprint_r.part.0>
    90e4:	003eb406 	br	8bb8 <__alt_data_end+0xfffe8bb8>
    90e8:	80c00043 	ldbu	r3,1(r16)
    90ec:	a5000814 	ori	r20,r20,32
    90f0:	84000044 	addi	r16,r16,1
    90f4:	18c03fcc 	andi	r3,r3,255
    90f8:	18c0201c 	xori	r3,r3,128
    90fc:	18ffe004 	addi	r3,r3,-128
    9100:	003bb706 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    9104:	a809883a 	mov	r4,r21
    9108:	d8c02a15 	stw	r3,168(sp)
    910c:	da002b15 	stw	r8,172(sp)
    9110:	00007b80 	call	7b8 <strlen>
    9114:	d8c02a17 	ldw	r3,168(sp)
    9118:	1027883a 	mov	r19,r2
    911c:	df001d83 	ldbu	fp,118(sp)
    9120:	d8c02215 	stw	r3,136(sp)
    9124:	0013883a 	mov	r9,zero
    9128:	da002b17 	ldw	r8,172(sp)
    912c:	003c4d06 	br	8264 <__alt_data_end+0xfffe8264>
    9130:	d9402117 	ldw	r5,132(sp)
    9134:	d9002017 	ldw	r4,128(sp)
    9138:	d9801a04 	addi	r6,sp,104
    913c:	da402c15 	stw	r9,176(sp)
    9140:	0007d500 	call	7d50 <__sprint_r.part.0>
    9144:	da402c17 	ldw	r9,176(sp)
    9148:	103e9a1e 	bne	r2,zero,8bb4 <__alt_data_end+0xfffe8bb4>
    914c:	d9401b17 	ldw	r5,108(sp)
    9150:	d8801c17 	ldw	r2,112(sp)
    9154:	d811883a 	mov	r8,sp
    9158:	29000044 	addi	r4,r5,1
    915c:	003e4206 	br	8a68 <__alt_data_end+0xfffe8a68>
    9160:	d9401b17 	ldw	r5,108(sp)
    9164:	01000074 	movhi	r4,1
    9168:	213e6504 	addi	r4,r4,-1644
    916c:	d9002415 	stw	r4,144(sp)
    9170:	29400044 	addi	r5,r5,1
    9174:	003c6d06 	br	832c <__alt_data_end+0xfffe832c>
    9178:	0039883a 	mov	fp,zero
    917c:	00800084 	movi	r2,2
    9180:	10803fcc 	andi	r2,r2,255
    9184:	01000044 	movi	r4,1
    9188:	11001e26 	beq	r2,r4,9204 <___vfiprintf_internal_r+0x13a0>
    918c:	01000084 	movi	r4,2
    9190:	11001e1e 	bne	r2,r4,920c <___vfiprintf_internal_r+0x13a8>
    9194:	1829883a 	mov	r20,r3
    9198:	003eea06 	br	8d44 <__alt_data_end+0xfffe8d44>
    919c:	a007883a 	mov	r3,r20
    91a0:	00800044 	movi	r2,1
    91a4:	003ff606 	br	9180 <__alt_data_end+0xfffe9180>
    91a8:	00800184 	movi	r2,6
    91ac:	1240012e 	bgeu	r2,r9,91b4 <___vfiprintf_internal_r+0x1350>
    91b0:	1013883a 	mov	r9,r2
    91b4:	4827883a 	mov	r19,r9
    91b8:	4825883a 	mov	r18,r9
    91bc:	48001516 	blt	r9,zero,9214 <___vfiprintf_internal_r+0x13b0>
    91c0:	05400074 	movhi	r21,1
    91c4:	d8c02215 	stw	r3,136(sp)
    91c8:	ad7e0504 	addi	r21,r21,-2028
    91cc:	003d1406 	br	8620 <__alt_data_end+0xfffe8620>
    91d0:	02800074 	movhi	r10,1
    91d4:	52be6104 	addi	r10,r10,-1660
    91d8:	da802415 	stw	r10,144(sp)
    91dc:	200d883a 	mov	r6,r4
    91e0:	003c9106 	br	8428 <__alt_data_end+0xfffe8428>
    91e4:	5021883a 	mov	r16,r10
    91e8:	0013883a 	mov	r9,zero
    91ec:	003b7d06 	br	7fe4 <__alt_data_end+0xfffe7fe4>
    91f0:	4827883a 	mov	r19,r9
    91f4:	df001d83 	ldbu	fp,118(sp)
    91f8:	d8c02215 	stw	r3,136(sp)
    91fc:	0013883a 	mov	r9,zero
    9200:	003c1806 	br	8264 <__alt_data_end+0xfffe8264>
    9204:	1829883a 	mov	r20,r3
    9208:	003d1806 	br	866c <__alt_data_end+0xfffe866c>
    920c:	1829883a 	mov	r20,r3
    9210:	003ccd06 	br	8548 <__alt_data_end+0xfffe8548>
    9214:	0025883a 	mov	r18,zero
    9218:	003fe906 	br	91c0 <__alt_data_end+0xfffe91c0>
    921c:	d8802217 	ldw	r2,136(sp)
    9220:	80c00043 	ldbu	r3,1(r16)
    9224:	5021883a 	mov	r16,r10
    9228:	12400017 	ldw	r9,0(r2)
    922c:	10800104 	addi	r2,r2,4
    9230:	d8802215 	stw	r2,136(sp)
    9234:	483faf0e 	bge	r9,zero,90f4 <__alt_data_end+0xfffe90f4>
    9238:	18c03fcc 	andi	r3,r3,255
    923c:	18c0201c 	xori	r3,r3,128
    9240:	027fffc4 	movi	r9,-1
    9244:	18ffe004 	addi	r3,r3,-128
    9248:	003b6506 	br	7fe0 <__alt_data_end+0xfffe7fe0>
    924c:	d9c01d85 	stb	r7,118(sp)
    9250:	003ca006 	br	84d4 <__alt_data_end+0xfffe84d4>
    9254:	d9c01d85 	stb	r7,118(sp)
    9258:	003cad06 	br	8510 <__alt_data_end+0xfffe8510>
    925c:	d9c01d85 	stb	r7,118(sp)
    9260:	003d7d06 	br	8858 <__alt_data_end+0xfffe8858>
    9264:	d9c01d85 	stb	r7,118(sp)
    9268:	003d5f06 	br	87e8 <__alt_data_end+0xfffe87e8>
    926c:	a080004c 	andi	r2,r20,1
    9270:	0039883a 	mov	fp,zero
    9274:	10000526 	beq	r2,zero,928c <___vfiprintf_internal_r+0x1428>
    9278:	00800c04 	movi	r2,48
    927c:	d88019c5 	stb	r2,103(sp)
    9280:	dcc02717 	ldw	r19,156(sp)
    9284:	dd4019c4 	addi	r21,sp,103
    9288:	003bf606 	br	8264 <__alt_data_end+0xfffe8264>
    928c:	0027883a 	mov	r19,zero
    9290:	dd401a04 	addi	r21,sp,104
    9294:	003bf306 	br	8264 <__alt_data_end+0xfffe8264>
    9298:	d9c01d85 	stb	r7,118(sp)
    929c:	003dc806 	br	89c0 <__alt_data_end+0xfffe89c0>
    92a0:	d9c01d85 	stb	r7,118(sp)
    92a4:	003d3a06 	br	8790 <__alt_data_end+0xfffe8790>
    92a8:	d9c01d85 	stb	r7,118(sp)
    92ac:	003d2a06 	br	8758 <__alt_data_end+0xfffe8758>
    92b0:	d9c01d85 	stb	r7,118(sp)
    92b4:	003cde06 	br	8630 <__alt_data_end+0xfffe8630>
    92b8:	d9c01d85 	stb	r7,118(sp)
    92bc:	003cbc06 	br	85b0 <__alt_data_end+0xfffe85b0>

000092c0 <__vfiprintf_internal>:
    92c0:	00800074 	movhi	r2,1
    92c4:	10856204 	addi	r2,r2,5512
    92c8:	300f883a 	mov	r7,r6
    92cc:	280d883a 	mov	r6,r5
    92d0:	200b883a 	mov	r5,r4
    92d4:	11000017 	ldw	r4,0(r2)
    92d8:	0007e641 	jmpi	7e64 <___vfiprintf_internal_r>

000092dc <__sbprintf>:
    92dc:	2880030b 	ldhu	r2,12(r5)
    92e0:	2ac01917 	ldw	r11,100(r5)
    92e4:	2a80038b 	ldhu	r10,14(r5)
    92e8:	2a400717 	ldw	r9,28(r5)
    92ec:	2a000917 	ldw	r8,36(r5)
    92f0:	defee204 	addi	sp,sp,-1144
    92f4:	00c10004 	movi	r3,1024
    92f8:	dc011a15 	stw	r16,1128(sp)
    92fc:	10bfff4c 	andi	r2,r2,65533
    9300:	2821883a 	mov	r16,r5
    9304:	d8cb883a 	add	r5,sp,r3
    9308:	dc811c15 	stw	r18,1136(sp)
    930c:	dc411b15 	stw	r17,1132(sp)
    9310:	dfc11d15 	stw	ra,1140(sp)
    9314:	2025883a 	mov	r18,r4
    9318:	d881030d 	sth	r2,1036(sp)
    931c:	dac11915 	stw	r11,1124(sp)
    9320:	da81038d 	sth	r10,1038(sp)
    9324:	da410715 	stw	r9,1052(sp)
    9328:	da010915 	stw	r8,1060(sp)
    932c:	dec10015 	stw	sp,1024(sp)
    9330:	dec10415 	stw	sp,1040(sp)
    9334:	d8c10215 	stw	r3,1032(sp)
    9338:	d8c10515 	stw	r3,1044(sp)
    933c:	d8010615 	stw	zero,1048(sp)
    9340:	0007e640 	call	7e64 <___vfiprintf_internal_r>
    9344:	1023883a 	mov	r17,r2
    9348:	10000416 	blt	r2,zero,935c <__sbprintf+0x80>
    934c:	d9410004 	addi	r5,sp,1024
    9350:	9009883a 	mov	r4,r18
    9354:	00047180 	call	4718 <_fflush_r>
    9358:	10000d1e 	bne	r2,zero,9390 <__sbprintf+0xb4>
    935c:	d881030b 	ldhu	r2,1036(sp)
    9360:	1080100c 	andi	r2,r2,64
    9364:	10000326 	beq	r2,zero,9374 <__sbprintf+0x98>
    9368:	8080030b 	ldhu	r2,12(r16)
    936c:	10801014 	ori	r2,r2,64
    9370:	8080030d 	sth	r2,12(r16)
    9374:	8805883a 	mov	r2,r17
    9378:	dfc11d17 	ldw	ra,1140(sp)
    937c:	dc811c17 	ldw	r18,1136(sp)
    9380:	dc411b17 	ldw	r17,1132(sp)
    9384:	dc011a17 	ldw	r16,1128(sp)
    9388:	dec11e04 	addi	sp,sp,1144
    938c:	f800283a 	ret
    9390:	047fffc4 	movi	r17,-1
    9394:	003ff106 	br	935c <__alt_data_end+0xfffe935c>

00009398 <_write_r>:
    9398:	defffd04 	addi	sp,sp,-12
    939c:	2805883a 	mov	r2,r5
    93a0:	dc000015 	stw	r16,0(sp)
    93a4:	04000074 	movhi	r16,1
    93a8:	dc400115 	stw	r17,4(sp)
    93ac:	300b883a 	mov	r5,r6
    93b0:	840c3204 	addi	r16,r16,12488
    93b4:	2023883a 	mov	r17,r4
    93b8:	380d883a 	mov	r6,r7
    93bc:	1009883a 	mov	r4,r2
    93c0:	dfc00215 	stw	ra,8(sp)
    93c4:	80000015 	stw	zero,0(r16)
    93c8:	000d7e40 	call	d7e4 <write>
    93cc:	00ffffc4 	movi	r3,-1
    93d0:	10c00526 	beq	r2,r3,93e8 <_write_r+0x50>
    93d4:	dfc00217 	ldw	ra,8(sp)
    93d8:	dc400117 	ldw	r17,4(sp)
    93dc:	dc000017 	ldw	r16,0(sp)
    93e0:	dec00304 	addi	sp,sp,12
    93e4:	f800283a 	ret
    93e8:	80c00017 	ldw	r3,0(r16)
    93ec:	183ff926 	beq	r3,zero,93d4 <__alt_data_end+0xfffe93d4>
    93f0:	88c00015 	stw	r3,0(r17)
    93f4:	003ff706 	br	93d4 <__alt_data_end+0xfffe93d4>

000093f8 <_close_r>:
    93f8:	defffd04 	addi	sp,sp,-12
    93fc:	dc000015 	stw	r16,0(sp)
    9400:	04000074 	movhi	r16,1
    9404:	dc400115 	stw	r17,4(sp)
    9408:	840c3204 	addi	r16,r16,12488
    940c:	2023883a 	mov	r17,r4
    9410:	2809883a 	mov	r4,r5
    9414:	dfc00215 	stw	ra,8(sp)
    9418:	80000015 	stw	zero,0(r16)
    941c:	000cfd40 	call	cfd4 <close>
    9420:	00ffffc4 	movi	r3,-1
    9424:	10c00526 	beq	r2,r3,943c <_close_r+0x44>
    9428:	dfc00217 	ldw	ra,8(sp)
    942c:	dc400117 	ldw	r17,4(sp)
    9430:	dc000017 	ldw	r16,0(sp)
    9434:	dec00304 	addi	sp,sp,12
    9438:	f800283a 	ret
    943c:	80c00017 	ldw	r3,0(r16)
    9440:	183ff926 	beq	r3,zero,9428 <__alt_data_end+0xfffe9428>
    9444:	88c00015 	stw	r3,0(r17)
    9448:	003ff706 	br	9428 <__alt_data_end+0xfffe9428>

0000944c <_calloc_r>:
    944c:	298b383a 	mul	r5,r5,r6
    9450:	defffe04 	addi	sp,sp,-8
    9454:	dfc00115 	stw	ra,4(sp)
    9458:	dc000015 	stw	r16,0(sp)
    945c:	00058540 	call	5854 <_malloc_r>
    9460:	10002926 	beq	r2,zero,9508 <_calloc_r+0xbc>
    9464:	11bfff17 	ldw	r6,-4(r2)
    9468:	1021883a 	mov	r16,r2
    946c:	00bfff04 	movi	r2,-4
    9470:	308c703a 	and	r6,r6,r2
    9474:	00c00904 	movi	r3,36
    9478:	308d883a 	add	r6,r6,r2
    947c:	19801636 	bltu	r3,r6,94d8 <_calloc_r+0x8c>
    9480:	008004c4 	movi	r2,19
    9484:	11800b2e 	bgeu	r2,r6,94b4 <_calloc_r+0x68>
    9488:	80000015 	stw	zero,0(r16)
    948c:	80000115 	stw	zero,4(r16)
    9490:	008006c4 	movi	r2,27
    9494:	11801a2e 	bgeu	r2,r6,9500 <_calloc_r+0xb4>
    9498:	80000215 	stw	zero,8(r16)
    949c:	80000315 	stw	zero,12(r16)
    94a0:	30c0151e 	bne	r6,r3,94f8 <_calloc_r+0xac>
    94a4:	80000415 	stw	zero,16(r16)
    94a8:	80800604 	addi	r2,r16,24
    94ac:	80000515 	stw	zero,20(r16)
    94b0:	00000106 	br	94b8 <_calloc_r+0x6c>
    94b4:	8005883a 	mov	r2,r16
    94b8:	10000015 	stw	zero,0(r2)
    94bc:	10000115 	stw	zero,4(r2)
    94c0:	10000215 	stw	zero,8(r2)
    94c4:	8005883a 	mov	r2,r16
    94c8:	dfc00117 	ldw	ra,4(sp)
    94cc:	dc000017 	ldw	r16,0(sp)
    94d0:	dec00204 	addi	sp,sp,8
    94d4:	f800283a 	ret
    94d8:	000b883a 	mov	r5,zero
    94dc:	8009883a 	mov	r4,r16
    94e0:	00063e80 	call	63e8 <memset>
    94e4:	8005883a 	mov	r2,r16
    94e8:	dfc00117 	ldw	ra,4(sp)
    94ec:	dc000017 	ldw	r16,0(sp)
    94f0:	dec00204 	addi	sp,sp,8
    94f4:	f800283a 	ret
    94f8:	80800404 	addi	r2,r16,16
    94fc:	003fee06 	br	94b8 <__alt_data_end+0xfffe94b8>
    9500:	80800204 	addi	r2,r16,8
    9504:	003fec06 	br	94b8 <__alt_data_end+0xfffe94b8>
    9508:	0005883a 	mov	r2,zero
    950c:	003fee06 	br	94c8 <__alt_data_end+0xfffe94c8>

00009510 <_fclose_r>:
    9510:	28003926 	beq	r5,zero,95f8 <_fclose_r+0xe8>
    9514:	defffc04 	addi	sp,sp,-16
    9518:	dc400115 	stw	r17,4(sp)
    951c:	dc000015 	stw	r16,0(sp)
    9520:	dfc00315 	stw	ra,12(sp)
    9524:	dc800215 	stw	r18,8(sp)
    9528:	2023883a 	mov	r17,r4
    952c:	2821883a 	mov	r16,r5
    9530:	20000226 	beq	r4,zero,953c <_fclose_r+0x2c>
    9534:	20800e17 	ldw	r2,56(r4)
    9538:	10002726 	beq	r2,zero,95d8 <_fclose_r+0xc8>
    953c:	8080030f 	ldh	r2,12(r16)
    9540:	1000071e 	bne	r2,zero,9560 <_fclose_r+0x50>
    9544:	0005883a 	mov	r2,zero
    9548:	dfc00317 	ldw	ra,12(sp)
    954c:	dc800217 	ldw	r18,8(sp)
    9550:	dc400117 	ldw	r17,4(sp)
    9554:	dc000017 	ldw	r16,0(sp)
    9558:	dec00404 	addi	sp,sp,16
    955c:	f800283a 	ret
    9560:	800b883a 	mov	r5,r16
    9564:	8809883a 	mov	r4,r17
    9568:	00044fc0 	call	44fc <__sflush_r>
    956c:	1025883a 	mov	r18,r2
    9570:	80800b17 	ldw	r2,44(r16)
    9574:	10000426 	beq	r2,zero,9588 <_fclose_r+0x78>
    9578:	81400717 	ldw	r5,28(r16)
    957c:	8809883a 	mov	r4,r17
    9580:	103ee83a 	callr	r2
    9584:	10001616 	blt	r2,zero,95e0 <_fclose_r+0xd0>
    9588:	8080030b 	ldhu	r2,12(r16)
    958c:	1080200c 	andi	r2,r2,128
    9590:	1000151e 	bne	r2,zero,95e8 <_fclose_r+0xd8>
    9594:	81400c17 	ldw	r5,48(r16)
    9598:	28000526 	beq	r5,zero,95b0 <_fclose_r+0xa0>
    959c:	80801004 	addi	r2,r16,64
    95a0:	28800226 	beq	r5,r2,95ac <_fclose_r+0x9c>
    95a4:	8809883a 	mov	r4,r17
    95a8:	0004c680 	call	4c68 <_free_r>
    95ac:	80000c15 	stw	zero,48(r16)
    95b0:	81401117 	ldw	r5,68(r16)
    95b4:	28000326 	beq	r5,zero,95c4 <_fclose_r+0xb4>
    95b8:	8809883a 	mov	r4,r17
    95bc:	0004c680 	call	4c68 <_free_r>
    95c0:	80001115 	stw	zero,68(r16)
    95c4:	0004b040 	call	4b04 <__sfp_lock_acquire>
    95c8:	8000030d 	sth	zero,12(r16)
    95cc:	0004b080 	call	4b08 <__sfp_lock_release>
    95d0:	9005883a 	mov	r2,r18
    95d4:	003fdc06 	br	9548 <__alt_data_end+0xfffe9548>
    95d8:	0004af40 	call	4af4 <__sinit>
    95dc:	003fd706 	br	953c <__alt_data_end+0xfffe953c>
    95e0:	04bfffc4 	movi	r18,-1
    95e4:	003fe806 	br	9588 <__alt_data_end+0xfffe9588>
    95e8:	81400417 	ldw	r5,16(r16)
    95ec:	8809883a 	mov	r4,r17
    95f0:	0004c680 	call	4c68 <_free_r>
    95f4:	003fe706 	br	9594 <__alt_data_end+0xfffe9594>
    95f8:	0005883a 	mov	r2,zero
    95fc:	f800283a 	ret

00009600 <fclose>:
    9600:	00800074 	movhi	r2,1
    9604:	10856204 	addi	r2,r2,5512
    9608:	200b883a 	mov	r5,r4
    960c:	11000017 	ldw	r4,0(r2)
    9610:	00095101 	jmpi	9510 <_fclose_r>

00009614 <__fputwc>:
    9614:	defff804 	addi	sp,sp,-32
    9618:	dcc00415 	stw	r19,16(sp)
    961c:	dc800315 	stw	r18,12(sp)
    9620:	dc000115 	stw	r16,4(sp)
    9624:	dfc00715 	stw	ra,28(sp)
    9628:	dd400615 	stw	r21,24(sp)
    962c:	dd000515 	stw	r20,20(sp)
    9630:	dc400215 	stw	r17,8(sp)
    9634:	2027883a 	mov	r19,r4
    9638:	2825883a 	mov	r18,r5
    963c:	3021883a 	mov	r16,r6
    9640:	00056440 	call	5644 <__locale_mb_cur_max>
    9644:	00c00044 	movi	r3,1
    9648:	10c03e26 	beq	r2,r3,9744 <__fputwc+0x130>
    964c:	81c01704 	addi	r7,r16,92
    9650:	900d883a 	mov	r6,r18
    9654:	d80b883a 	mov	r5,sp
    9658:	9809883a 	mov	r4,r19
    965c:	0009ae40 	call	9ae4 <_wcrtomb_r>
    9660:	1029883a 	mov	r20,r2
    9664:	00bfffc4 	movi	r2,-1
    9668:	a0802026 	beq	r20,r2,96ec <__fputwc+0xd8>
    966c:	d9400003 	ldbu	r5,0(sp)
    9670:	a0001c26 	beq	r20,zero,96e4 <__fputwc+0xd0>
    9674:	0023883a 	mov	r17,zero
    9678:	05400284 	movi	r21,10
    967c:	00000906 	br	96a4 <__fputwc+0x90>
    9680:	80800017 	ldw	r2,0(r16)
    9684:	11400005 	stb	r5,0(r2)
    9688:	80c00017 	ldw	r3,0(r16)
    968c:	18c00044 	addi	r3,r3,1
    9690:	80c00015 	stw	r3,0(r16)
    9694:	8c400044 	addi	r17,r17,1
    9698:	dc45883a 	add	r2,sp,r17
    969c:	8d00112e 	bgeu	r17,r20,96e4 <__fputwc+0xd0>
    96a0:	11400003 	ldbu	r5,0(r2)
    96a4:	80c00217 	ldw	r3,8(r16)
    96a8:	18ffffc4 	addi	r3,r3,-1
    96ac:	80c00215 	stw	r3,8(r16)
    96b0:	183ff30e 	bge	r3,zero,9680 <__alt_data_end+0xfffe9680>
    96b4:	80800617 	ldw	r2,24(r16)
    96b8:	18801916 	blt	r3,r2,9720 <__fputwc+0x10c>
    96bc:	80800017 	ldw	r2,0(r16)
    96c0:	11400005 	stb	r5,0(r2)
    96c4:	80800017 	ldw	r2,0(r16)
    96c8:	10c00003 	ldbu	r3,0(r2)
    96cc:	10800044 	addi	r2,r2,1
    96d0:	1d402326 	beq	r3,r21,9760 <__fputwc+0x14c>
    96d4:	80800015 	stw	r2,0(r16)
    96d8:	8c400044 	addi	r17,r17,1
    96dc:	dc45883a 	add	r2,sp,r17
    96e0:	8d3fef36 	bltu	r17,r20,96a0 <__alt_data_end+0xfffe96a0>
    96e4:	9005883a 	mov	r2,r18
    96e8:	00000406 	br	96fc <__fputwc+0xe8>
    96ec:	80c0030b 	ldhu	r3,12(r16)
    96f0:	a005883a 	mov	r2,r20
    96f4:	18c01014 	ori	r3,r3,64
    96f8:	80c0030d 	sth	r3,12(r16)
    96fc:	dfc00717 	ldw	ra,28(sp)
    9700:	dd400617 	ldw	r21,24(sp)
    9704:	dd000517 	ldw	r20,20(sp)
    9708:	dcc00417 	ldw	r19,16(sp)
    970c:	dc800317 	ldw	r18,12(sp)
    9710:	dc400217 	ldw	r17,8(sp)
    9714:	dc000117 	ldw	r16,4(sp)
    9718:	dec00804 	addi	sp,sp,32
    971c:	f800283a 	ret
    9720:	800d883a 	mov	r6,r16
    9724:	29403fcc 	andi	r5,r5,255
    9728:	9809883a 	mov	r4,r19
    972c:	000998c0 	call	998c <__swbuf_r>
    9730:	10bfffe0 	cmpeqi	r2,r2,-1
    9734:	10803fcc 	andi	r2,r2,255
    9738:	103fd626 	beq	r2,zero,9694 <__alt_data_end+0xfffe9694>
    973c:	00bfffc4 	movi	r2,-1
    9740:	003fee06 	br	96fc <__alt_data_end+0xfffe96fc>
    9744:	90ffffc4 	addi	r3,r18,-1
    9748:	01003f84 	movi	r4,254
    974c:	20ffbf36 	bltu	r4,r3,964c <__alt_data_end+0xfffe964c>
    9750:	900b883a 	mov	r5,r18
    9754:	dc800005 	stb	r18,0(sp)
    9758:	1029883a 	mov	r20,r2
    975c:	003fc506 	br	9674 <__alt_data_end+0xfffe9674>
    9760:	800d883a 	mov	r6,r16
    9764:	a80b883a 	mov	r5,r21
    9768:	9809883a 	mov	r4,r19
    976c:	000998c0 	call	998c <__swbuf_r>
    9770:	10bfffe0 	cmpeqi	r2,r2,-1
    9774:	003fef06 	br	9734 <__alt_data_end+0xfffe9734>

00009778 <_fputwc_r>:
    9778:	3080030b 	ldhu	r2,12(r6)
    977c:	10c8000c 	andi	r3,r2,8192
    9780:	1800051e 	bne	r3,zero,9798 <_fputwc_r+0x20>
    9784:	30c01917 	ldw	r3,100(r6)
    9788:	10880014 	ori	r2,r2,8192
    978c:	3080030d 	sth	r2,12(r6)
    9790:	18880014 	ori	r2,r3,8192
    9794:	30801915 	stw	r2,100(r6)
    9798:	00096141 	jmpi	9614 <__fputwc>

0000979c <fputwc>:
    979c:	00800074 	movhi	r2,1
    97a0:	defffc04 	addi	sp,sp,-16
    97a4:	10856204 	addi	r2,r2,5512
    97a8:	dc000115 	stw	r16,4(sp)
    97ac:	14000017 	ldw	r16,0(r2)
    97b0:	dc400215 	stw	r17,8(sp)
    97b4:	dfc00315 	stw	ra,12(sp)
    97b8:	2023883a 	mov	r17,r4
    97bc:	80000226 	beq	r16,zero,97c8 <fputwc+0x2c>
    97c0:	80800e17 	ldw	r2,56(r16)
    97c4:	10001026 	beq	r2,zero,9808 <fputwc+0x6c>
    97c8:	2880030b 	ldhu	r2,12(r5)
    97cc:	10c8000c 	andi	r3,r2,8192
    97d0:	1800051e 	bne	r3,zero,97e8 <fputwc+0x4c>
    97d4:	28c01917 	ldw	r3,100(r5)
    97d8:	10880014 	ori	r2,r2,8192
    97dc:	2880030d 	sth	r2,12(r5)
    97e0:	18880014 	ori	r2,r3,8192
    97e4:	28801915 	stw	r2,100(r5)
    97e8:	280d883a 	mov	r6,r5
    97ec:	8009883a 	mov	r4,r16
    97f0:	880b883a 	mov	r5,r17
    97f4:	dfc00317 	ldw	ra,12(sp)
    97f8:	dc400217 	ldw	r17,8(sp)
    97fc:	dc000117 	ldw	r16,4(sp)
    9800:	dec00404 	addi	sp,sp,16
    9804:	00096141 	jmpi	9614 <__fputwc>
    9808:	8009883a 	mov	r4,r16
    980c:	d9400015 	stw	r5,0(sp)
    9810:	0004af40 	call	4af4 <__sinit>
    9814:	d9400017 	ldw	r5,0(sp)
    9818:	003feb06 	br	97c8 <__alt_data_end+0xfffe97c8>

0000981c <_fstat_r>:
    981c:	defffd04 	addi	sp,sp,-12
    9820:	2805883a 	mov	r2,r5
    9824:	dc000015 	stw	r16,0(sp)
    9828:	04000074 	movhi	r16,1
    982c:	dc400115 	stw	r17,4(sp)
    9830:	840c3204 	addi	r16,r16,12488
    9834:	2023883a 	mov	r17,r4
    9838:	300b883a 	mov	r5,r6
    983c:	1009883a 	mov	r4,r2
    9840:	dfc00215 	stw	ra,8(sp)
    9844:	80000015 	stw	zero,0(r16)
    9848:	000d10c0 	call	d10c <fstat>
    984c:	00ffffc4 	movi	r3,-1
    9850:	10c00526 	beq	r2,r3,9868 <_fstat_r+0x4c>
    9854:	dfc00217 	ldw	ra,8(sp)
    9858:	dc400117 	ldw	r17,4(sp)
    985c:	dc000017 	ldw	r16,0(sp)
    9860:	dec00304 	addi	sp,sp,12
    9864:	f800283a 	ret
    9868:	80c00017 	ldw	r3,0(r16)
    986c:	183ff926 	beq	r3,zero,9854 <__alt_data_end+0xfffe9854>
    9870:	88c00015 	stw	r3,0(r17)
    9874:	003ff706 	br	9854 <__alt_data_end+0xfffe9854>

00009878 <_isatty_r>:
    9878:	defffd04 	addi	sp,sp,-12
    987c:	dc000015 	stw	r16,0(sp)
    9880:	04000074 	movhi	r16,1
    9884:	dc400115 	stw	r17,4(sp)
    9888:	840c3204 	addi	r16,r16,12488
    988c:	2023883a 	mov	r17,r4
    9890:	2809883a 	mov	r4,r5
    9894:	dfc00215 	stw	ra,8(sp)
    9898:	80000015 	stw	zero,0(r16)
    989c:	000d1f80 	call	d1f8 <isatty>
    98a0:	00ffffc4 	movi	r3,-1
    98a4:	10c00526 	beq	r2,r3,98bc <_isatty_r+0x44>
    98a8:	dfc00217 	ldw	ra,8(sp)
    98ac:	dc400117 	ldw	r17,4(sp)
    98b0:	dc000017 	ldw	r16,0(sp)
    98b4:	dec00304 	addi	sp,sp,12
    98b8:	f800283a 	ret
    98bc:	80c00017 	ldw	r3,0(r16)
    98c0:	183ff926 	beq	r3,zero,98a8 <__alt_data_end+0xfffe98a8>
    98c4:	88c00015 	stw	r3,0(r17)
    98c8:	003ff706 	br	98a8 <__alt_data_end+0xfffe98a8>

000098cc <_lseek_r>:
    98cc:	defffd04 	addi	sp,sp,-12
    98d0:	2805883a 	mov	r2,r5
    98d4:	dc000015 	stw	r16,0(sp)
    98d8:	04000074 	movhi	r16,1
    98dc:	dc400115 	stw	r17,4(sp)
    98e0:	300b883a 	mov	r5,r6
    98e4:	840c3204 	addi	r16,r16,12488
    98e8:	2023883a 	mov	r17,r4
    98ec:	380d883a 	mov	r6,r7
    98f0:	1009883a 	mov	r4,r2
    98f4:	dfc00215 	stw	ra,8(sp)
    98f8:	80000015 	stw	zero,0(r16)
    98fc:	000d3c40 	call	d3c4 <lseek>
    9900:	00ffffc4 	movi	r3,-1
    9904:	10c00526 	beq	r2,r3,991c <_lseek_r+0x50>
    9908:	dfc00217 	ldw	ra,8(sp)
    990c:	dc400117 	ldw	r17,4(sp)
    9910:	dc000017 	ldw	r16,0(sp)
    9914:	dec00304 	addi	sp,sp,12
    9918:	f800283a 	ret
    991c:	80c00017 	ldw	r3,0(r16)
    9920:	183ff926 	beq	r3,zero,9908 <__alt_data_end+0xfffe9908>
    9924:	88c00015 	stw	r3,0(r17)
    9928:	003ff706 	br	9908 <__alt_data_end+0xfffe9908>

0000992c <_read_r>:
    992c:	defffd04 	addi	sp,sp,-12
    9930:	2805883a 	mov	r2,r5
    9934:	dc000015 	stw	r16,0(sp)
    9938:	04000074 	movhi	r16,1
    993c:	dc400115 	stw	r17,4(sp)
    9940:	300b883a 	mov	r5,r6
    9944:	840c3204 	addi	r16,r16,12488
    9948:	2023883a 	mov	r17,r4
    994c:	380d883a 	mov	r6,r7
    9950:	1009883a 	mov	r4,r2
    9954:	dfc00215 	stw	ra,8(sp)
    9958:	80000015 	stw	zero,0(r16)
    995c:	000d5980 	call	d598 <read>
    9960:	00ffffc4 	movi	r3,-1
    9964:	10c00526 	beq	r2,r3,997c <_read_r+0x50>
    9968:	dfc00217 	ldw	ra,8(sp)
    996c:	dc400117 	ldw	r17,4(sp)
    9970:	dc000017 	ldw	r16,0(sp)
    9974:	dec00304 	addi	sp,sp,12
    9978:	f800283a 	ret
    997c:	80c00017 	ldw	r3,0(r16)
    9980:	183ff926 	beq	r3,zero,9968 <__alt_data_end+0xfffe9968>
    9984:	88c00015 	stw	r3,0(r17)
    9988:	003ff706 	br	9968 <__alt_data_end+0xfffe9968>

0000998c <__swbuf_r>:
    998c:	defffb04 	addi	sp,sp,-20
    9990:	dcc00315 	stw	r19,12(sp)
    9994:	dc800215 	stw	r18,8(sp)
    9998:	dc000015 	stw	r16,0(sp)
    999c:	dfc00415 	stw	ra,16(sp)
    99a0:	dc400115 	stw	r17,4(sp)
    99a4:	2025883a 	mov	r18,r4
    99a8:	2827883a 	mov	r19,r5
    99ac:	3021883a 	mov	r16,r6
    99b0:	20000226 	beq	r4,zero,99bc <__swbuf_r+0x30>
    99b4:	20800e17 	ldw	r2,56(r4)
    99b8:	10004226 	beq	r2,zero,9ac4 <__swbuf_r+0x138>
    99bc:	80800617 	ldw	r2,24(r16)
    99c0:	8100030b 	ldhu	r4,12(r16)
    99c4:	80800215 	stw	r2,8(r16)
    99c8:	2080020c 	andi	r2,r4,8
    99cc:	10003626 	beq	r2,zero,9aa8 <__swbuf_r+0x11c>
    99d0:	80c00417 	ldw	r3,16(r16)
    99d4:	18003426 	beq	r3,zero,9aa8 <__swbuf_r+0x11c>
    99d8:	2088000c 	andi	r2,r4,8192
    99dc:	9c403fcc 	andi	r17,r19,255
    99e0:	10001a26 	beq	r2,zero,9a4c <__swbuf_r+0xc0>
    99e4:	80800017 	ldw	r2,0(r16)
    99e8:	81000517 	ldw	r4,20(r16)
    99ec:	10c7c83a 	sub	r3,r2,r3
    99f0:	1900200e 	bge	r3,r4,9a74 <__swbuf_r+0xe8>
    99f4:	18c00044 	addi	r3,r3,1
    99f8:	81000217 	ldw	r4,8(r16)
    99fc:	11400044 	addi	r5,r2,1
    9a00:	81400015 	stw	r5,0(r16)
    9a04:	213fffc4 	addi	r4,r4,-1
    9a08:	81000215 	stw	r4,8(r16)
    9a0c:	14c00005 	stb	r19,0(r2)
    9a10:	80800517 	ldw	r2,20(r16)
    9a14:	10c01e26 	beq	r2,r3,9a90 <__swbuf_r+0x104>
    9a18:	8080030b 	ldhu	r2,12(r16)
    9a1c:	1080004c 	andi	r2,r2,1
    9a20:	10000226 	beq	r2,zero,9a2c <__swbuf_r+0xa0>
    9a24:	00800284 	movi	r2,10
    9a28:	88801926 	beq	r17,r2,9a90 <__swbuf_r+0x104>
    9a2c:	8805883a 	mov	r2,r17
    9a30:	dfc00417 	ldw	ra,16(sp)
    9a34:	dcc00317 	ldw	r19,12(sp)
    9a38:	dc800217 	ldw	r18,8(sp)
    9a3c:	dc400117 	ldw	r17,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00504 	addi	sp,sp,20
    9a48:	f800283a 	ret
    9a4c:	81401917 	ldw	r5,100(r16)
    9a50:	00b7ffc4 	movi	r2,-8193
    9a54:	21080014 	ori	r4,r4,8192
    9a58:	2884703a 	and	r2,r5,r2
    9a5c:	80801915 	stw	r2,100(r16)
    9a60:	80800017 	ldw	r2,0(r16)
    9a64:	8100030d 	sth	r4,12(r16)
    9a68:	81000517 	ldw	r4,20(r16)
    9a6c:	10c7c83a 	sub	r3,r2,r3
    9a70:	193fe016 	blt	r3,r4,99f4 <__alt_data_end+0xfffe99f4>
    9a74:	800b883a 	mov	r5,r16
    9a78:	9009883a 	mov	r4,r18
    9a7c:	00047180 	call	4718 <_fflush_r>
    9a80:	1000071e 	bne	r2,zero,9aa0 <__swbuf_r+0x114>
    9a84:	80800017 	ldw	r2,0(r16)
    9a88:	00c00044 	movi	r3,1
    9a8c:	003fda06 	br	99f8 <__alt_data_end+0xfffe99f8>
    9a90:	800b883a 	mov	r5,r16
    9a94:	9009883a 	mov	r4,r18
    9a98:	00047180 	call	4718 <_fflush_r>
    9a9c:	103fe326 	beq	r2,zero,9a2c <__alt_data_end+0xfffe9a2c>
    9aa0:	00bfffc4 	movi	r2,-1
    9aa4:	003fe206 	br	9a30 <__alt_data_end+0xfffe9a30>
    9aa8:	800b883a 	mov	r5,r16
    9aac:	9009883a 	mov	r4,r18
    9ab0:	0002b200 	call	2b20 <__swsetup_r>
    9ab4:	103ffa1e 	bne	r2,zero,9aa0 <__alt_data_end+0xfffe9aa0>
    9ab8:	8100030b 	ldhu	r4,12(r16)
    9abc:	80c00417 	ldw	r3,16(r16)
    9ac0:	003fc506 	br	99d8 <__alt_data_end+0xfffe99d8>
    9ac4:	0004af40 	call	4af4 <__sinit>
    9ac8:	003fbc06 	br	99bc <__alt_data_end+0xfffe99bc>

00009acc <__swbuf>:
    9acc:	00800074 	movhi	r2,1
    9ad0:	10856204 	addi	r2,r2,5512
    9ad4:	280d883a 	mov	r6,r5
    9ad8:	200b883a 	mov	r5,r4
    9adc:	11000017 	ldw	r4,0(r2)
    9ae0:	000998c1 	jmpi	998c <__swbuf_r>

00009ae4 <_wcrtomb_r>:
    9ae4:	defff604 	addi	sp,sp,-40
    9ae8:	00800074 	movhi	r2,1
    9aec:	dc800815 	stw	r18,32(sp)
    9af0:	dc400715 	stw	r17,28(sp)
    9af4:	dc000615 	stw	r16,24(sp)
    9af8:	10856604 	addi	r2,r2,5528
    9afc:	dfc00915 	stw	ra,36(sp)
    9b00:	2021883a 	mov	r16,r4
    9b04:	3823883a 	mov	r17,r7
    9b08:	14800017 	ldw	r18,0(r2)
    9b0c:	28001426 	beq	r5,zero,9b60 <_wcrtomb_r+0x7c>
    9b10:	d9400415 	stw	r5,16(sp)
    9b14:	d9800515 	stw	r6,20(sp)
    9b18:	00056380 	call	5638 <__locale_charset>
    9b1c:	d9800517 	ldw	r6,20(sp)
    9b20:	d9400417 	ldw	r5,16(sp)
    9b24:	100f883a 	mov	r7,r2
    9b28:	dc400015 	stw	r17,0(sp)
    9b2c:	8009883a 	mov	r4,r16
    9b30:	903ee83a 	callr	r18
    9b34:	00ffffc4 	movi	r3,-1
    9b38:	10c0031e 	bne	r2,r3,9b48 <_wcrtomb_r+0x64>
    9b3c:	88000015 	stw	zero,0(r17)
    9b40:	00c02284 	movi	r3,138
    9b44:	80c00015 	stw	r3,0(r16)
    9b48:	dfc00917 	ldw	ra,36(sp)
    9b4c:	dc800817 	ldw	r18,32(sp)
    9b50:	dc400717 	ldw	r17,28(sp)
    9b54:	dc000617 	ldw	r16,24(sp)
    9b58:	dec00a04 	addi	sp,sp,40
    9b5c:	f800283a 	ret
    9b60:	00056380 	call	5638 <__locale_charset>
    9b64:	100f883a 	mov	r7,r2
    9b68:	dc400015 	stw	r17,0(sp)
    9b6c:	000d883a 	mov	r6,zero
    9b70:	d9400104 	addi	r5,sp,4
    9b74:	8009883a 	mov	r4,r16
    9b78:	903ee83a 	callr	r18
    9b7c:	003fed06 	br	9b34 <__alt_data_end+0xfffe9b34>

00009b80 <wcrtomb>:
    9b80:	defff604 	addi	sp,sp,-40
    9b84:	00800074 	movhi	r2,1
    9b88:	dc800615 	stw	r18,24(sp)
    9b8c:	dc400515 	stw	r17,20(sp)
    9b90:	10856204 	addi	r2,r2,5512
    9b94:	dfc00915 	stw	ra,36(sp)
    9b98:	dd000815 	stw	r20,32(sp)
    9b9c:	dcc00715 	stw	r19,28(sp)
    9ba0:	dc000415 	stw	r16,16(sp)
    9ba4:	3025883a 	mov	r18,r6
    9ba8:	14400017 	ldw	r17,0(r2)
    9bac:	20001926 	beq	r4,zero,9c14 <wcrtomb+0x94>
    9bb0:	00800074 	movhi	r2,1
    9bb4:	10856604 	addi	r2,r2,5528
    9bb8:	15000017 	ldw	r20,0(r2)
    9bbc:	2021883a 	mov	r16,r4
    9bc0:	2827883a 	mov	r19,r5
    9bc4:	00056380 	call	5638 <__locale_charset>
    9bc8:	100f883a 	mov	r7,r2
    9bcc:	dc800015 	stw	r18,0(sp)
    9bd0:	980d883a 	mov	r6,r19
    9bd4:	800b883a 	mov	r5,r16
    9bd8:	8809883a 	mov	r4,r17
    9bdc:	a03ee83a 	callr	r20
    9be0:	00ffffc4 	movi	r3,-1
    9be4:	10c0031e 	bne	r2,r3,9bf4 <wcrtomb+0x74>
    9be8:	90000015 	stw	zero,0(r18)
    9bec:	00c02284 	movi	r3,138
    9bf0:	88c00015 	stw	r3,0(r17)
    9bf4:	dfc00917 	ldw	ra,36(sp)
    9bf8:	dd000817 	ldw	r20,32(sp)
    9bfc:	dcc00717 	ldw	r19,28(sp)
    9c00:	dc800617 	ldw	r18,24(sp)
    9c04:	dc400517 	ldw	r17,20(sp)
    9c08:	dc000417 	ldw	r16,16(sp)
    9c0c:	dec00a04 	addi	sp,sp,40
    9c10:	f800283a 	ret
    9c14:	00800074 	movhi	r2,1
    9c18:	10856604 	addi	r2,r2,5528
    9c1c:	14000017 	ldw	r16,0(r2)
    9c20:	00056380 	call	5638 <__locale_charset>
    9c24:	100f883a 	mov	r7,r2
    9c28:	dc800015 	stw	r18,0(sp)
    9c2c:	000d883a 	mov	r6,zero
    9c30:	d9400104 	addi	r5,sp,4
    9c34:	8809883a 	mov	r4,r17
    9c38:	803ee83a 	callr	r16
    9c3c:	003fe806 	br	9be0 <__alt_data_end+0xfffe9be0>

00009c40 <__ascii_wctomb>:
    9c40:	28000526 	beq	r5,zero,9c58 <__ascii_wctomb+0x18>
    9c44:	00803fc4 	movi	r2,255
    9c48:	11800536 	bltu	r2,r6,9c60 <__ascii_wctomb+0x20>
    9c4c:	29800005 	stb	r6,0(r5)
    9c50:	00800044 	movi	r2,1
    9c54:	f800283a 	ret
    9c58:	0005883a 	mov	r2,zero
    9c5c:	f800283a 	ret
    9c60:	00802284 	movi	r2,138
    9c64:	20800015 	stw	r2,0(r4)
    9c68:	00bfffc4 	movi	r2,-1
    9c6c:	f800283a 	ret

00009c70 <_wctomb_r>:
    9c70:	00800074 	movhi	r2,1
    9c74:	defff904 	addi	sp,sp,-28
    9c78:	10856604 	addi	r2,r2,5528
    9c7c:	dfc00615 	stw	ra,24(sp)
    9c80:	dc400515 	stw	r17,20(sp)
    9c84:	dc000415 	stw	r16,16(sp)
    9c88:	3823883a 	mov	r17,r7
    9c8c:	14000017 	ldw	r16,0(r2)
    9c90:	d9000115 	stw	r4,4(sp)
    9c94:	d9400215 	stw	r5,8(sp)
    9c98:	d9800315 	stw	r6,12(sp)
    9c9c:	00056380 	call	5638 <__locale_charset>
    9ca0:	d9800317 	ldw	r6,12(sp)
    9ca4:	d9400217 	ldw	r5,8(sp)
    9ca8:	d9000117 	ldw	r4,4(sp)
    9cac:	100f883a 	mov	r7,r2
    9cb0:	dc400015 	stw	r17,0(sp)
    9cb4:	803ee83a 	callr	r16
    9cb8:	dfc00617 	ldw	ra,24(sp)
    9cbc:	dc400517 	ldw	r17,20(sp)
    9cc0:	dc000417 	ldw	r16,16(sp)
    9cc4:	dec00704 	addi	sp,sp,28
    9cc8:	f800283a 	ret

00009ccc <__udivdi3>:
    9ccc:	defff504 	addi	sp,sp,-44
    9cd0:	dcc00415 	stw	r19,16(sp)
    9cd4:	dc000115 	stw	r16,4(sp)
    9cd8:	dfc00a15 	stw	ra,40(sp)
    9cdc:	df000915 	stw	fp,36(sp)
    9ce0:	ddc00815 	stw	r23,32(sp)
    9ce4:	dd800715 	stw	r22,28(sp)
    9ce8:	dd400615 	stw	r21,24(sp)
    9cec:	dd000515 	stw	r20,20(sp)
    9cf0:	dc800315 	stw	r18,12(sp)
    9cf4:	dc400215 	stw	r17,8(sp)
    9cf8:	2027883a 	mov	r19,r4
    9cfc:	2821883a 	mov	r16,r5
    9d00:	3800411e 	bne	r7,zero,9e08 <__udivdi3+0x13c>
    9d04:	3023883a 	mov	r17,r6
    9d08:	2025883a 	mov	r18,r4
    9d0c:	2980522e 	bgeu	r5,r6,9e58 <__udivdi3+0x18c>
    9d10:	00bfffd4 	movui	r2,65535
    9d14:	282d883a 	mov	r22,r5
    9d18:	1180a836 	bltu	r2,r6,9fbc <__udivdi3+0x2f0>
    9d1c:	00803fc4 	movi	r2,255
    9d20:	1185803a 	cmpltu	r2,r2,r6
    9d24:	100490fa 	slli	r2,r2,3
    9d28:	3086d83a 	srl	r3,r6,r2
    9d2c:	01000074 	movhi	r4,1
    9d30:	213e6904 	addi	r4,r4,-1628
    9d34:	20c7883a 	add	r3,r4,r3
    9d38:	18c00003 	ldbu	r3,0(r3)
    9d3c:	1885883a 	add	r2,r3,r2
    9d40:	00c00804 	movi	r3,32
    9d44:	1887c83a 	sub	r3,r3,r2
    9d48:	18000526 	beq	r3,zero,9d60 <__udivdi3+0x94>
    9d4c:	80e0983a 	sll	r16,r16,r3
    9d50:	9884d83a 	srl	r2,r19,r2
    9d54:	30e2983a 	sll	r17,r6,r3
    9d58:	98e4983a 	sll	r18,r19,r3
    9d5c:	142cb03a 	or	r22,r2,r16
    9d60:	882ad43a 	srli	r21,r17,16
    9d64:	b009883a 	mov	r4,r22
    9d68:	8d3fffcc 	andi	r20,r17,65535
    9d6c:	a80b883a 	mov	r5,r21
    9d70:	000a8d80 	call	a8d8 <__umodsi3>
    9d74:	b009883a 	mov	r4,r22
    9d78:	a80b883a 	mov	r5,r21
    9d7c:	1027883a 	mov	r19,r2
    9d80:	000a8740 	call	a874 <__udivsi3>
    9d84:	102d883a 	mov	r22,r2
    9d88:	9826943a 	slli	r19,r19,16
    9d8c:	9004d43a 	srli	r2,r18,16
    9d90:	a5a1383a 	mul	r16,r20,r22
    9d94:	14c4b03a 	or	r2,r2,r19
    9d98:	1400052e 	bgeu	r2,r16,9db0 <__udivdi3+0xe4>
    9d9c:	1445883a 	add	r2,r2,r17
    9da0:	b0ffffc4 	addi	r3,r22,-1
    9da4:	14400136 	bltu	r2,r17,9dac <__udivdi3+0xe0>
    9da8:	14012336 	bltu	r2,r16,a238 <__udivdi3+0x56c>
    9dac:	182d883a 	mov	r22,r3
    9db0:	1421c83a 	sub	r16,r2,r16
    9db4:	a80b883a 	mov	r5,r21
    9db8:	8009883a 	mov	r4,r16
    9dbc:	000a8d80 	call	a8d8 <__umodsi3>
    9dc0:	1027883a 	mov	r19,r2
    9dc4:	a80b883a 	mov	r5,r21
    9dc8:	8009883a 	mov	r4,r16
    9dcc:	000a8740 	call	a874 <__udivsi3>
    9dd0:	9826943a 	slli	r19,r19,16
    9dd4:	a0a9383a 	mul	r20,r20,r2
    9dd8:	94bfffcc 	andi	r18,r18,65535
    9ddc:	94e4b03a 	or	r18,r18,r19
    9de0:	9500052e 	bgeu	r18,r20,9df8 <__udivdi3+0x12c>
    9de4:	8ca5883a 	add	r18,r17,r18
    9de8:	10ffffc4 	addi	r3,r2,-1
    9dec:	9440f136 	bltu	r18,r17,a1b4 <__udivdi3+0x4e8>
    9df0:	9500f02e 	bgeu	r18,r20,a1b4 <__udivdi3+0x4e8>
    9df4:	10bfff84 	addi	r2,r2,-2
    9df8:	b00c943a 	slli	r6,r22,16
    9dfc:	0007883a 	mov	r3,zero
    9e00:	3084b03a 	or	r2,r6,r2
    9e04:	00005906 	br	9f6c <__udivdi3+0x2a0>
    9e08:	29c05636 	bltu	r5,r7,9f64 <__udivdi3+0x298>
    9e0c:	00bfffd4 	movui	r2,65535
    9e10:	11c0622e 	bgeu	r2,r7,9f9c <__udivdi3+0x2d0>
    9e14:	00804034 	movhi	r2,256
    9e18:	10bfffc4 	addi	r2,r2,-1
    9e1c:	11c0ee36 	bltu	r2,r7,a1d8 <__udivdi3+0x50c>
    9e20:	00800404 	movi	r2,16
    9e24:	3886d83a 	srl	r3,r7,r2
    9e28:	01000074 	movhi	r4,1
    9e2c:	213e6904 	addi	r4,r4,-1628
    9e30:	20c7883a 	add	r3,r4,r3
    9e34:	18c00003 	ldbu	r3,0(r3)
    9e38:	05400804 	movi	r21,32
    9e3c:	1885883a 	add	r2,r3,r2
    9e40:	a8abc83a 	sub	r21,r21,r2
    9e44:	a800621e 	bne	r21,zero,9fd0 <__udivdi3+0x304>
    9e48:	3c00e936 	bltu	r7,r16,a1f0 <__udivdi3+0x524>
    9e4c:	9985403a 	cmpgeu	r2,r19,r6
    9e50:	0007883a 	mov	r3,zero
    9e54:	00004506 	br	9f6c <__udivdi3+0x2a0>
    9e58:	3000041e 	bne	r6,zero,9e6c <__udivdi3+0x1a0>
    9e5c:	000b883a 	mov	r5,zero
    9e60:	01000044 	movi	r4,1
    9e64:	000a8740 	call	a874 <__udivsi3>
    9e68:	1023883a 	mov	r17,r2
    9e6c:	00bfffd4 	movui	r2,65535
    9e70:	14404e2e 	bgeu	r2,r17,9fac <__udivdi3+0x2e0>
    9e74:	00804034 	movhi	r2,256
    9e78:	10bfffc4 	addi	r2,r2,-1
    9e7c:	1440d836 	bltu	r2,r17,a1e0 <__udivdi3+0x514>
    9e80:	00800404 	movi	r2,16
    9e84:	8886d83a 	srl	r3,r17,r2
    9e88:	01000074 	movhi	r4,1
    9e8c:	213e6904 	addi	r4,r4,-1628
    9e90:	20c7883a 	add	r3,r4,r3
    9e94:	18c00003 	ldbu	r3,0(r3)
    9e98:	1885883a 	add	r2,r3,r2
    9e9c:	00c00804 	movi	r3,32
    9ea0:	1887c83a 	sub	r3,r3,r2
    9ea4:	18008f1e 	bne	r3,zero,a0e4 <__udivdi3+0x418>
    9ea8:	882ad43a 	srli	r21,r17,16
    9eac:	8461c83a 	sub	r16,r16,r17
    9eb0:	8d3fffcc 	andi	r20,r17,65535
    9eb4:	00c00044 	movi	r3,1
    9eb8:	8009883a 	mov	r4,r16
    9ebc:	a80b883a 	mov	r5,r21
    9ec0:	d8c00015 	stw	r3,0(sp)
    9ec4:	000a8d80 	call	a8d8 <__umodsi3>
    9ec8:	8009883a 	mov	r4,r16
    9ecc:	a80b883a 	mov	r5,r21
    9ed0:	1027883a 	mov	r19,r2
    9ed4:	000a8740 	call	a874 <__udivsi3>
    9ed8:	9826943a 	slli	r19,r19,16
    9edc:	9008d43a 	srli	r4,r18,16
    9ee0:	1521383a 	mul	r16,r2,r20
    9ee4:	102d883a 	mov	r22,r2
    9ee8:	24c8b03a 	or	r4,r4,r19
    9eec:	d8c00017 	ldw	r3,0(sp)
    9ef0:	2400052e 	bgeu	r4,r16,9f08 <__udivdi3+0x23c>
    9ef4:	2449883a 	add	r4,r4,r17
    9ef8:	b0bfffc4 	addi	r2,r22,-1
    9efc:	24400136 	bltu	r4,r17,9f04 <__udivdi3+0x238>
    9f00:	2400ca36 	bltu	r4,r16,a22c <__udivdi3+0x560>
    9f04:	102d883a 	mov	r22,r2
    9f08:	2421c83a 	sub	r16,r4,r16
    9f0c:	a80b883a 	mov	r5,r21
    9f10:	8009883a 	mov	r4,r16
    9f14:	d8c00015 	stw	r3,0(sp)
    9f18:	000a8d80 	call	a8d8 <__umodsi3>
    9f1c:	1027883a 	mov	r19,r2
    9f20:	a80b883a 	mov	r5,r21
    9f24:	8009883a 	mov	r4,r16
    9f28:	000a8740 	call	a874 <__udivsi3>
    9f2c:	9826943a 	slli	r19,r19,16
    9f30:	1529383a 	mul	r20,r2,r20
    9f34:	94bfffcc 	andi	r18,r18,65535
    9f38:	94e4b03a 	or	r18,r18,r19
    9f3c:	d8c00017 	ldw	r3,0(sp)
    9f40:	9500052e 	bgeu	r18,r20,9f58 <__udivdi3+0x28c>
    9f44:	8ca5883a 	add	r18,r17,r18
    9f48:	113fffc4 	addi	r4,r2,-1
    9f4c:	94409736 	bltu	r18,r17,a1ac <__udivdi3+0x4e0>
    9f50:	9500962e 	bgeu	r18,r20,a1ac <__udivdi3+0x4e0>
    9f54:	10bfff84 	addi	r2,r2,-2
    9f58:	b00c943a 	slli	r6,r22,16
    9f5c:	3084b03a 	or	r2,r6,r2
    9f60:	00000206 	br	9f6c <__udivdi3+0x2a0>
    9f64:	0007883a 	mov	r3,zero
    9f68:	0005883a 	mov	r2,zero
    9f6c:	dfc00a17 	ldw	ra,40(sp)
    9f70:	df000917 	ldw	fp,36(sp)
    9f74:	ddc00817 	ldw	r23,32(sp)
    9f78:	dd800717 	ldw	r22,28(sp)
    9f7c:	dd400617 	ldw	r21,24(sp)
    9f80:	dd000517 	ldw	r20,20(sp)
    9f84:	dcc00417 	ldw	r19,16(sp)
    9f88:	dc800317 	ldw	r18,12(sp)
    9f8c:	dc400217 	ldw	r17,8(sp)
    9f90:	dc000117 	ldw	r16,4(sp)
    9f94:	dec00b04 	addi	sp,sp,44
    9f98:	f800283a 	ret
    9f9c:	00803fc4 	movi	r2,255
    9fa0:	11c5803a 	cmpltu	r2,r2,r7
    9fa4:	100490fa 	slli	r2,r2,3
    9fa8:	003f9e06 	br	9e24 <__alt_data_end+0xfffe9e24>
    9fac:	00803fc4 	movi	r2,255
    9fb0:	1445803a 	cmpltu	r2,r2,r17
    9fb4:	100490fa 	slli	r2,r2,3
    9fb8:	003fb206 	br	9e84 <__alt_data_end+0xfffe9e84>
    9fbc:	00804034 	movhi	r2,256
    9fc0:	10bfffc4 	addi	r2,r2,-1
    9fc4:	11808836 	bltu	r2,r6,a1e8 <__udivdi3+0x51c>
    9fc8:	00800404 	movi	r2,16
    9fcc:	003f5606 	br	9d28 <__alt_data_end+0xfffe9d28>
    9fd0:	30aed83a 	srl	r23,r6,r2
    9fd4:	3d4e983a 	sll	r7,r7,r21
    9fd8:	80acd83a 	srl	r22,r16,r2
    9fdc:	9884d83a 	srl	r2,r19,r2
    9fe0:	3deeb03a 	or	r23,r7,r23
    9fe4:	b824d43a 	srli	r18,r23,16
    9fe8:	8560983a 	sll	r16,r16,r21
    9fec:	b009883a 	mov	r4,r22
    9ff0:	900b883a 	mov	r5,r18
    9ff4:	3568983a 	sll	r20,r6,r21
    9ff8:	1420b03a 	or	r16,r2,r16
    9ffc:	000a8d80 	call	a8d8 <__umodsi3>
    a000:	b009883a 	mov	r4,r22
    a004:	900b883a 	mov	r5,r18
    a008:	1023883a 	mov	r17,r2
    a00c:	000a8740 	call	a874 <__udivsi3>
    a010:	8808943a 	slli	r4,r17,16
    a014:	bf3fffcc 	andi	fp,r23,65535
    a018:	8006d43a 	srli	r3,r16,16
    a01c:	e0a3383a 	mul	r17,fp,r2
    a020:	100d883a 	mov	r6,r2
    a024:	1906b03a 	or	r3,r3,r4
    a028:	1c40042e 	bgeu	r3,r17,a03c <__udivdi3+0x370>
    a02c:	1dc7883a 	add	r3,r3,r23
    a030:	10bfffc4 	addi	r2,r2,-1
    a034:	1dc0752e 	bgeu	r3,r23,a20c <__udivdi3+0x540>
    a038:	100d883a 	mov	r6,r2
    a03c:	1c63c83a 	sub	r17,r3,r17
    a040:	900b883a 	mov	r5,r18
    a044:	8809883a 	mov	r4,r17
    a048:	d9800015 	stw	r6,0(sp)
    a04c:	000a8d80 	call	a8d8 <__umodsi3>
    a050:	102d883a 	mov	r22,r2
    a054:	8809883a 	mov	r4,r17
    a058:	900b883a 	mov	r5,r18
    a05c:	000a8740 	call	a874 <__udivsi3>
    a060:	b02c943a 	slli	r22,r22,16
    a064:	e089383a 	mul	r4,fp,r2
    a068:	843fffcc 	andi	r16,r16,65535
    a06c:	85a0b03a 	or	r16,r16,r22
    a070:	d9800017 	ldw	r6,0(sp)
    a074:	8100042e 	bgeu	r16,r4,a088 <__udivdi3+0x3bc>
    a078:	85e1883a 	add	r16,r16,r23
    a07c:	10ffffc4 	addi	r3,r2,-1
    a080:	85c05e2e 	bgeu	r16,r23,a1fc <__udivdi3+0x530>
    a084:	1805883a 	mov	r2,r3
    a088:	300c943a 	slli	r6,r6,16
    a08c:	a17fffcc 	andi	r5,r20,65535
    a090:	a028d43a 	srli	r20,r20,16
    a094:	3084b03a 	or	r2,r6,r2
    a098:	10ffffcc 	andi	r3,r2,65535
    a09c:	100cd43a 	srli	r6,r2,16
    a0a0:	194f383a 	mul	r7,r3,r5
    a0a4:	1d07383a 	mul	r3,r3,r20
    a0a8:	314b383a 	mul	r5,r6,r5
    a0ac:	3810d43a 	srli	r8,r7,16
    a0b0:	8121c83a 	sub	r16,r16,r4
    a0b4:	1947883a 	add	r3,r3,r5
    a0b8:	40c7883a 	add	r3,r8,r3
    a0bc:	350d383a 	mul	r6,r6,r20
    a0c0:	1940022e 	bgeu	r3,r5,a0cc <__udivdi3+0x400>
    a0c4:	01000074 	movhi	r4,1
    a0c8:	310d883a 	add	r6,r6,r4
    a0cc:	1828d43a 	srli	r20,r3,16
    a0d0:	a18d883a 	add	r6,r20,r6
    a0d4:	81803e36 	bltu	r16,r6,a1d0 <__udivdi3+0x504>
    a0d8:	81803826 	beq	r16,r6,a1bc <__udivdi3+0x4f0>
    a0dc:	0007883a 	mov	r3,zero
    a0e0:	003fa206 	br	9f6c <__alt_data_end+0xfffe9f6c>
    a0e4:	88e2983a 	sll	r17,r17,r3
    a0e8:	80a8d83a 	srl	r20,r16,r2
    a0ec:	80e0983a 	sll	r16,r16,r3
    a0f0:	882ad43a 	srli	r21,r17,16
    a0f4:	9884d83a 	srl	r2,r19,r2
    a0f8:	a009883a 	mov	r4,r20
    a0fc:	a80b883a 	mov	r5,r21
    a100:	142eb03a 	or	r23,r2,r16
    a104:	98e4983a 	sll	r18,r19,r3
    a108:	000a8d80 	call	a8d8 <__umodsi3>
    a10c:	a009883a 	mov	r4,r20
    a110:	a80b883a 	mov	r5,r21
    a114:	1021883a 	mov	r16,r2
    a118:	000a8740 	call	a874 <__udivsi3>
    a11c:	1039883a 	mov	fp,r2
    a120:	8d3fffcc 	andi	r20,r17,65535
    a124:	8020943a 	slli	r16,r16,16
    a128:	b804d43a 	srli	r2,r23,16
    a12c:	a72d383a 	mul	r22,r20,fp
    a130:	1404b03a 	or	r2,r2,r16
    a134:	1580062e 	bgeu	r2,r22,a150 <__udivdi3+0x484>
    a138:	1445883a 	add	r2,r2,r17
    a13c:	e0ffffc4 	addi	r3,fp,-1
    a140:	14403836 	bltu	r2,r17,a224 <__udivdi3+0x558>
    a144:	1580372e 	bgeu	r2,r22,a224 <__udivdi3+0x558>
    a148:	e73fff84 	addi	fp,fp,-2
    a14c:	1445883a 	add	r2,r2,r17
    a150:	15adc83a 	sub	r22,r2,r22
    a154:	a80b883a 	mov	r5,r21
    a158:	b009883a 	mov	r4,r22
    a15c:	000a8d80 	call	a8d8 <__umodsi3>
    a160:	1027883a 	mov	r19,r2
    a164:	b009883a 	mov	r4,r22
    a168:	a80b883a 	mov	r5,r21
    a16c:	000a8740 	call	a874 <__udivsi3>
    a170:	9826943a 	slli	r19,r19,16
    a174:	a0a1383a 	mul	r16,r20,r2
    a178:	b93fffcc 	andi	r4,r23,65535
    a17c:	24c8b03a 	or	r4,r4,r19
    a180:	2400062e 	bgeu	r4,r16,a19c <__udivdi3+0x4d0>
    a184:	2449883a 	add	r4,r4,r17
    a188:	10ffffc4 	addi	r3,r2,-1
    a18c:	24402336 	bltu	r4,r17,a21c <__udivdi3+0x550>
    a190:	2400222e 	bgeu	r4,r16,a21c <__udivdi3+0x550>
    a194:	10bfff84 	addi	r2,r2,-2
    a198:	2449883a 	add	r4,r4,r17
    a19c:	e038943a 	slli	fp,fp,16
    a1a0:	2421c83a 	sub	r16,r4,r16
    a1a4:	e086b03a 	or	r3,fp,r2
    a1a8:	003f4306 	br	9eb8 <__alt_data_end+0xfffe9eb8>
    a1ac:	2005883a 	mov	r2,r4
    a1b0:	003f6906 	br	9f58 <__alt_data_end+0xfffe9f58>
    a1b4:	1805883a 	mov	r2,r3
    a1b8:	003f0f06 	br	9df8 <__alt_data_end+0xfffe9df8>
    a1bc:	1806943a 	slli	r3,r3,16
    a1c0:	9d66983a 	sll	r19,r19,r21
    a1c4:	39ffffcc 	andi	r7,r7,65535
    a1c8:	19c7883a 	add	r3,r3,r7
    a1cc:	98ffc32e 	bgeu	r19,r3,a0dc <__alt_data_end+0xfffea0dc>
    a1d0:	10bfffc4 	addi	r2,r2,-1
    a1d4:	003fc106 	br	a0dc <__alt_data_end+0xfffea0dc>
    a1d8:	00800604 	movi	r2,24
    a1dc:	003f1106 	br	9e24 <__alt_data_end+0xfffe9e24>
    a1e0:	00800604 	movi	r2,24
    a1e4:	003f2706 	br	9e84 <__alt_data_end+0xfffe9e84>
    a1e8:	00800604 	movi	r2,24
    a1ec:	003ece06 	br	9d28 <__alt_data_end+0xfffe9d28>
    a1f0:	0007883a 	mov	r3,zero
    a1f4:	00800044 	movi	r2,1
    a1f8:	003f5c06 	br	9f6c <__alt_data_end+0xfffe9f6c>
    a1fc:	813fa12e 	bgeu	r16,r4,a084 <__alt_data_end+0xfffea084>
    a200:	10bfff84 	addi	r2,r2,-2
    a204:	85e1883a 	add	r16,r16,r23
    a208:	003f9f06 	br	a088 <__alt_data_end+0xfffea088>
    a20c:	1c7f8a2e 	bgeu	r3,r17,a038 <__alt_data_end+0xfffea038>
    a210:	31bfff84 	addi	r6,r6,-2
    a214:	1dc7883a 	add	r3,r3,r23
    a218:	003f8806 	br	a03c <__alt_data_end+0xfffea03c>
    a21c:	1805883a 	mov	r2,r3
    a220:	003fde06 	br	a19c <__alt_data_end+0xfffea19c>
    a224:	1839883a 	mov	fp,r3
    a228:	003fc906 	br	a150 <__alt_data_end+0xfffea150>
    a22c:	b5bfff84 	addi	r22,r22,-2
    a230:	2449883a 	add	r4,r4,r17
    a234:	003f3406 	br	9f08 <__alt_data_end+0xfffe9f08>
    a238:	b5bfff84 	addi	r22,r22,-2
    a23c:	1445883a 	add	r2,r2,r17
    a240:	003edb06 	br	9db0 <__alt_data_end+0xfffe9db0>

0000a244 <__umoddi3>:
    a244:	defff404 	addi	sp,sp,-48
    a248:	df000a15 	stw	fp,40(sp)
    a24c:	dc400315 	stw	r17,12(sp)
    a250:	dc000215 	stw	r16,8(sp)
    a254:	dfc00b15 	stw	ra,44(sp)
    a258:	ddc00915 	stw	r23,36(sp)
    a25c:	dd800815 	stw	r22,32(sp)
    a260:	dd400715 	stw	r21,28(sp)
    a264:	dd000615 	stw	r20,24(sp)
    a268:	dcc00515 	stw	r19,20(sp)
    a26c:	dc800415 	stw	r18,16(sp)
    a270:	2021883a 	mov	r16,r4
    a274:	2823883a 	mov	r17,r5
    a278:	2839883a 	mov	fp,r5
    a27c:	38003c1e 	bne	r7,zero,a370 <__umoddi3+0x12c>
    a280:	3027883a 	mov	r19,r6
    a284:	2029883a 	mov	r20,r4
    a288:	2980512e 	bgeu	r5,r6,a3d0 <__umoddi3+0x18c>
    a28c:	00bfffd4 	movui	r2,65535
    a290:	11809a36 	bltu	r2,r6,a4fc <__umoddi3+0x2b8>
    a294:	01003fc4 	movi	r4,255
    a298:	2189803a 	cmpltu	r4,r4,r6
    a29c:	200890fa 	slli	r4,r4,3
    a2a0:	3104d83a 	srl	r2,r6,r4
    a2a4:	00c00074 	movhi	r3,1
    a2a8:	18fe6904 	addi	r3,r3,-1628
    a2ac:	1885883a 	add	r2,r3,r2
    a2b0:	10c00003 	ldbu	r3,0(r2)
    a2b4:	00800804 	movi	r2,32
    a2b8:	1909883a 	add	r4,r3,r4
    a2bc:	1125c83a 	sub	r18,r2,r4
    a2c0:	90000526 	beq	r18,zero,a2d8 <__umoddi3+0x94>
    a2c4:	8ca2983a 	sll	r17,r17,r18
    a2c8:	8108d83a 	srl	r4,r16,r4
    a2cc:	34a6983a 	sll	r19,r6,r18
    a2d0:	84a8983a 	sll	r20,r16,r18
    a2d4:	2478b03a 	or	fp,r4,r17
    a2d8:	982ed43a 	srli	r23,r19,16
    a2dc:	e009883a 	mov	r4,fp
    a2e0:	9dbfffcc 	andi	r22,r19,65535
    a2e4:	b80b883a 	mov	r5,r23
    a2e8:	000a8d80 	call	a8d8 <__umodsi3>
    a2ec:	e009883a 	mov	r4,fp
    a2f0:	b80b883a 	mov	r5,r23
    a2f4:	102b883a 	mov	r21,r2
    a2f8:	000a8740 	call	a874 <__udivsi3>
    a2fc:	a806943a 	slli	r3,r21,16
    a300:	a008d43a 	srli	r4,r20,16
    a304:	b085383a 	mul	r2,r22,r2
    a308:	20c8b03a 	or	r4,r4,r3
    a30c:	2080032e 	bgeu	r4,r2,a31c <__umoddi3+0xd8>
    a310:	24c9883a 	add	r4,r4,r19
    a314:	24c00136 	bltu	r4,r19,a31c <__umoddi3+0xd8>
    a318:	20811036 	bltu	r4,r2,a75c <__umoddi3+0x518>
    a31c:	20abc83a 	sub	r21,r4,r2
    a320:	b80b883a 	mov	r5,r23
    a324:	a809883a 	mov	r4,r21
    a328:	000a8d80 	call	a8d8 <__umodsi3>
    a32c:	1023883a 	mov	r17,r2
    a330:	b80b883a 	mov	r5,r23
    a334:	a809883a 	mov	r4,r21
    a338:	000a8740 	call	a874 <__udivsi3>
    a33c:	8822943a 	slli	r17,r17,16
    a340:	b085383a 	mul	r2,r22,r2
    a344:	a0ffffcc 	andi	r3,r20,65535
    a348:	1c46b03a 	or	r3,r3,r17
    a34c:	1880042e 	bgeu	r3,r2,a360 <__umoddi3+0x11c>
    a350:	1cc7883a 	add	r3,r3,r19
    a354:	1cc00236 	bltu	r3,r19,a360 <__umoddi3+0x11c>
    a358:	1880012e 	bgeu	r3,r2,a360 <__umoddi3+0x11c>
    a35c:	1cc7883a 	add	r3,r3,r19
    a360:	1885c83a 	sub	r2,r3,r2
    a364:	1484d83a 	srl	r2,r2,r18
    a368:	0007883a 	mov	r3,zero
    a36c:	00004f06 	br	a4ac <__umoddi3+0x268>
    a370:	29c04c36 	bltu	r5,r7,a4a4 <__umoddi3+0x260>
    a374:	00bfffd4 	movui	r2,65535
    a378:	11c0582e 	bgeu	r2,r7,a4dc <__umoddi3+0x298>
    a37c:	00804034 	movhi	r2,256
    a380:	10bfffc4 	addi	r2,r2,-1
    a384:	11c0e736 	bltu	r2,r7,a724 <__umoddi3+0x4e0>
    a388:	01000404 	movi	r4,16
    a38c:	3904d83a 	srl	r2,r7,r4
    a390:	00c00074 	movhi	r3,1
    a394:	18fe6904 	addi	r3,r3,-1628
    a398:	1885883a 	add	r2,r3,r2
    a39c:	14c00003 	ldbu	r19,0(r2)
    a3a0:	00c00804 	movi	r3,32
    a3a4:	9927883a 	add	r19,r19,r4
    a3a8:	1ce9c83a 	sub	r20,r3,r19
    a3ac:	a000581e 	bne	r20,zero,a510 <__umoddi3+0x2cc>
    a3b0:	3c400136 	bltu	r7,r17,a3b8 <__umoddi3+0x174>
    a3b4:	8180eb36 	bltu	r16,r6,a764 <__umoddi3+0x520>
    a3b8:	8185c83a 	sub	r2,r16,r6
    a3bc:	89e3c83a 	sub	r17,r17,r7
    a3c0:	8089803a 	cmpltu	r4,r16,r2
    a3c4:	8939c83a 	sub	fp,r17,r4
    a3c8:	e007883a 	mov	r3,fp
    a3cc:	00003706 	br	a4ac <__umoddi3+0x268>
    a3d0:	3000041e 	bne	r6,zero,a3e4 <__umoddi3+0x1a0>
    a3d4:	000b883a 	mov	r5,zero
    a3d8:	01000044 	movi	r4,1
    a3dc:	000a8740 	call	a874 <__udivsi3>
    a3e0:	1027883a 	mov	r19,r2
    a3e4:	00bfffd4 	movui	r2,65535
    a3e8:	14c0402e 	bgeu	r2,r19,a4ec <__umoddi3+0x2a8>
    a3ec:	00804034 	movhi	r2,256
    a3f0:	10bfffc4 	addi	r2,r2,-1
    a3f4:	14c0cd36 	bltu	r2,r19,a72c <__umoddi3+0x4e8>
    a3f8:	00800404 	movi	r2,16
    a3fc:	9886d83a 	srl	r3,r19,r2
    a400:	01000074 	movhi	r4,1
    a404:	213e6904 	addi	r4,r4,-1628
    a408:	20c7883a 	add	r3,r4,r3
    a40c:	18c00003 	ldbu	r3,0(r3)
    a410:	1887883a 	add	r3,r3,r2
    a414:	00800804 	movi	r2,32
    a418:	10e5c83a 	sub	r18,r2,r3
    a41c:	9000901e 	bne	r18,zero,a660 <__umoddi3+0x41c>
    a420:	982cd43a 	srli	r22,r19,16
    a424:	8ce3c83a 	sub	r17,r17,r19
    a428:	9d7fffcc 	andi	r21,r19,65535
    a42c:	b00b883a 	mov	r5,r22
    a430:	8809883a 	mov	r4,r17
    a434:	000a8d80 	call	a8d8 <__umodsi3>
    a438:	8809883a 	mov	r4,r17
    a43c:	b00b883a 	mov	r5,r22
    a440:	1021883a 	mov	r16,r2
    a444:	000a8740 	call	a874 <__udivsi3>
    a448:	8006943a 	slli	r3,r16,16
    a44c:	a008d43a 	srli	r4,r20,16
    a450:	1545383a 	mul	r2,r2,r21
    a454:	20c8b03a 	or	r4,r4,r3
    a458:	2080042e 	bgeu	r4,r2,a46c <__umoddi3+0x228>
    a45c:	24c9883a 	add	r4,r4,r19
    a460:	24c00236 	bltu	r4,r19,a46c <__umoddi3+0x228>
    a464:	2080012e 	bgeu	r4,r2,a46c <__umoddi3+0x228>
    a468:	24c9883a 	add	r4,r4,r19
    a46c:	20a1c83a 	sub	r16,r4,r2
    a470:	b00b883a 	mov	r5,r22
    a474:	8009883a 	mov	r4,r16
    a478:	000a8d80 	call	a8d8 <__umodsi3>
    a47c:	1023883a 	mov	r17,r2
    a480:	b00b883a 	mov	r5,r22
    a484:	8009883a 	mov	r4,r16
    a488:	000a8740 	call	a874 <__udivsi3>
    a48c:	8822943a 	slli	r17,r17,16
    a490:	1545383a 	mul	r2,r2,r21
    a494:	a53fffcc 	andi	r20,r20,65535
    a498:	a446b03a 	or	r3,r20,r17
    a49c:	18bfb02e 	bgeu	r3,r2,a360 <__alt_data_end+0xfffea360>
    a4a0:	003fab06 	br	a350 <__alt_data_end+0xfffea350>
    a4a4:	2005883a 	mov	r2,r4
    a4a8:	2807883a 	mov	r3,r5
    a4ac:	dfc00b17 	ldw	ra,44(sp)
    a4b0:	df000a17 	ldw	fp,40(sp)
    a4b4:	ddc00917 	ldw	r23,36(sp)
    a4b8:	dd800817 	ldw	r22,32(sp)
    a4bc:	dd400717 	ldw	r21,28(sp)
    a4c0:	dd000617 	ldw	r20,24(sp)
    a4c4:	dcc00517 	ldw	r19,20(sp)
    a4c8:	dc800417 	ldw	r18,16(sp)
    a4cc:	dc400317 	ldw	r17,12(sp)
    a4d0:	dc000217 	ldw	r16,8(sp)
    a4d4:	dec00c04 	addi	sp,sp,48
    a4d8:	f800283a 	ret
    a4dc:	04c03fc4 	movi	r19,255
    a4e0:	99c9803a 	cmpltu	r4,r19,r7
    a4e4:	200890fa 	slli	r4,r4,3
    a4e8:	003fa806 	br	a38c <__alt_data_end+0xfffea38c>
    a4ec:	00803fc4 	movi	r2,255
    a4f0:	14c5803a 	cmpltu	r2,r2,r19
    a4f4:	100490fa 	slli	r2,r2,3
    a4f8:	003fc006 	br	a3fc <__alt_data_end+0xfffea3fc>
    a4fc:	00804034 	movhi	r2,256
    a500:	10bfffc4 	addi	r2,r2,-1
    a504:	11808b36 	bltu	r2,r6,a734 <__umoddi3+0x4f0>
    a508:	01000404 	movi	r4,16
    a50c:	003f6406 	br	a2a0 <__alt_data_end+0xfffea2a0>
    a510:	34c4d83a 	srl	r2,r6,r19
    a514:	3d0e983a 	sll	r7,r7,r20
    a518:	8cf8d83a 	srl	fp,r17,r19
    a51c:	8d10983a 	sll	r8,r17,r20
    a520:	38aab03a 	or	r21,r7,r2
    a524:	a82cd43a 	srli	r22,r21,16
    a528:	84e2d83a 	srl	r17,r16,r19
    a52c:	e009883a 	mov	r4,fp
    a530:	b00b883a 	mov	r5,r22
    a534:	8a22b03a 	or	r17,r17,r8
    a538:	3524983a 	sll	r18,r6,r20
    a53c:	000a8d80 	call	a8d8 <__umodsi3>
    a540:	e009883a 	mov	r4,fp
    a544:	b00b883a 	mov	r5,r22
    a548:	102f883a 	mov	r23,r2
    a54c:	000a8740 	call	a874 <__udivsi3>
    a550:	100d883a 	mov	r6,r2
    a554:	b808943a 	slli	r4,r23,16
    a558:	aa3fffcc 	andi	r8,r21,65535
    a55c:	8804d43a 	srli	r2,r17,16
    a560:	41af383a 	mul	r23,r8,r6
    a564:	8520983a 	sll	r16,r16,r20
    a568:	1104b03a 	or	r2,r2,r4
    a56c:	15c0042e 	bgeu	r2,r23,a580 <__umoddi3+0x33c>
    a570:	1545883a 	add	r2,r2,r21
    a574:	30ffffc4 	addi	r3,r6,-1
    a578:	1540742e 	bgeu	r2,r21,a74c <__umoddi3+0x508>
    a57c:	180d883a 	mov	r6,r3
    a580:	15efc83a 	sub	r23,r2,r23
    a584:	b00b883a 	mov	r5,r22
    a588:	b809883a 	mov	r4,r23
    a58c:	d9800115 	stw	r6,4(sp)
    a590:	da000015 	stw	r8,0(sp)
    a594:	000a8d80 	call	a8d8 <__umodsi3>
    a598:	b00b883a 	mov	r5,r22
    a59c:	b809883a 	mov	r4,r23
    a5a0:	1039883a 	mov	fp,r2
    a5a4:	000a8740 	call	a874 <__udivsi3>
    a5a8:	da000017 	ldw	r8,0(sp)
    a5ac:	e038943a 	slli	fp,fp,16
    a5b0:	100b883a 	mov	r5,r2
    a5b4:	4089383a 	mul	r4,r8,r2
    a5b8:	8a3fffcc 	andi	r8,r17,65535
    a5bc:	4710b03a 	or	r8,r8,fp
    a5c0:	d9800117 	ldw	r6,4(sp)
    a5c4:	4100042e 	bgeu	r8,r4,a5d8 <__umoddi3+0x394>
    a5c8:	4551883a 	add	r8,r8,r21
    a5cc:	10bfffc4 	addi	r2,r2,-1
    a5d0:	45405a2e 	bgeu	r8,r21,a73c <__umoddi3+0x4f8>
    a5d4:	100b883a 	mov	r5,r2
    a5d8:	300c943a 	slli	r6,r6,16
    a5dc:	91ffffcc 	andi	r7,r18,65535
    a5e0:	9004d43a 	srli	r2,r18,16
    a5e4:	314cb03a 	or	r6,r6,r5
    a5e8:	317fffcc 	andi	r5,r6,65535
    a5ec:	300cd43a 	srli	r6,r6,16
    a5f0:	29d3383a 	mul	r9,r5,r7
    a5f4:	288b383a 	mul	r5,r5,r2
    a5f8:	31cf383a 	mul	r7,r6,r7
    a5fc:	4806d43a 	srli	r3,r9,16
    a600:	4111c83a 	sub	r8,r8,r4
    a604:	29cb883a 	add	r5,r5,r7
    a608:	194b883a 	add	r5,r3,r5
    a60c:	3085383a 	mul	r2,r6,r2
    a610:	29c0022e 	bgeu	r5,r7,a61c <__umoddi3+0x3d8>
    a614:	00c00074 	movhi	r3,1
    a618:	10c5883a 	add	r2,r2,r3
    a61c:	2808d43a 	srli	r4,r5,16
    a620:	280a943a 	slli	r5,r5,16
    a624:	4a7fffcc 	andi	r9,r9,65535
    a628:	2085883a 	add	r2,r4,r2
    a62c:	2a4b883a 	add	r5,r5,r9
    a630:	40803636 	bltu	r8,r2,a70c <__umoddi3+0x4c8>
    a634:	40804d26 	beq	r8,r2,a76c <__umoddi3+0x528>
    a638:	4089c83a 	sub	r4,r8,r2
    a63c:	280f883a 	mov	r7,r5
    a640:	81cfc83a 	sub	r7,r16,r7
    a644:	81c7803a 	cmpltu	r3,r16,r7
    a648:	20c7c83a 	sub	r3,r4,r3
    a64c:	1cc4983a 	sll	r2,r3,r19
    a650:	3d0ed83a 	srl	r7,r7,r20
    a654:	1d06d83a 	srl	r3,r3,r20
    a658:	11c4b03a 	or	r2,r2,r7
    a65c:	003f9306 	br	a4ac <__alt_data_end+0xfffea4ac>
    a660:	9ca6983a 	sll	r19,r19,r18
    a664:	88e8d83a 	srl	r20,r17,r3
    a668:	80c4d83a 	srl	r2,r16,r3
    a66c:	982cd43a 	srli	r22,r19,16
    a670:	8ca2983a 	sll	r17,r17,r18
    a674:	a009883a 	mov	r4,r20
    a678:	b00b883a 	mov	r5,r22
    a67c:	1478b03a 	or	fp,r2,r17
    a680:	000a8d80 	call	a8d8 <__umodsi3>
    a684:	a009883a 	mov	r4,r20
    a688:	b00b883a 	mov	r5,r22
    a68c:	1023883a 	mov	r17,r2
    a690:	000a8740 	call	a874 <__udivsi3>
    a694:	9d7fffcc 	andi	r21,r19,65535
    a698:	880a943a 	slli	r5,r17,16
    a69c:	e008d43a 	srli	r4,fp,16
    a6a0:	a885383a 	mul	r2,r21,r2
    a6a4:	84a8983a 	sll	r20,r16,r18
    a6a8:	2148b03a 	or	r4,r4,r5
    a6ac:	2080042e 	bgeu	r4,r2,a6c0 <__umoddi3+0x47c>
    a6b0:	24c9883a 	add	r4,r4,r19
    a6b4:	24c00236 	bltu	r4,r19,a6c0 <__umoddi3+0x47c>
    a6b8:	2080012e 	bgeu	r4,r2,a6c0 <__umoddi3+0x47c>
    a6bc:	24c9883a 	add	r4,r4,r19
    a6c0:	20a3c83a 	sub	r17,r4,r2
    a6c4:	b00b883a 	mov	r5,r22
    a6c8:	8809883a 	mov	r4,r17
    a6cc:	000a8d80 	call	a8d8 <__umodsi3>
    a6d0:	102f883a 	mov	r23,r2
    a6d4:	8809883a 	mov	r4,r17
    a6d8:	b00b883a 	mov	r5,r22
    a6dc:	000a8740 	call	a874 <__udivsi3>
    a6e0:	b82e943a 	slli	r23,r23,16
    a6e4:	a885383a 	mul	r2,r21,r2
    a6e8:	e13fffcc 	andi	r4,fp,65535
    a6ec:	25c8b03a 	or	r4,r4,r23
    a6f0:	2080042e 	bgeu	r4,r2,a704 <__umoddi3+0x4c0>
    a6f4:	24c9883a 	add	r4,r4,r19
    a6f8:	24c00236 	bltu	r4,r19,a704 <__umoddi3+0x4c0>
    a6fc:	2080012e 	bgeu	r4,r2,a704 <__umoddi3+0x4c0>
    a700:	24c9883a 	add	r4,r4,r19
    a704:	20a3c83a 	sub	r17,r4,r2
    a708:	003f4806 	br	a42c <__alt_data_end+0xfffea42c>
    a70c:	2c8fc83a 	sub	r7,r5,r18
    a710:	1545c83a 	sub	r2,r2,r21
    a714:	29cb803a 	cmpltu	r5,r5,r7
    a718:	1145c83a 	sub	r2,r2,r5
    a71c:	4089c83a 	sub	r4,r8,r2
    a720:	003fc706 	br	a640 <__alt_data_end+0xfffea640>
    a724:	01000604 	movi	r4,24
    a728:	003f1806 	br	a38c <__alt_data_end+0xfffea38c>
    a72c:	00800604 	movi	r2,24
    a730:	003f3206 	br	a3fc <__alt_data_end+0xfffea3fc>
    a734:	01000604 	movi	r4,24
    a738:	003ed906 	br	a2a0 <__alt_data_end+0xfffea2a0>
    a73c:	413fa52e 	bgeu	r8,r4,a5d4 <__alt_data_end+0xfffea5d4>
    a740:	297fff84 	addi	r5,r5,-2
    a744:	4551883a 	add	r8,r8,r21
    a748:	003fa306 	br	a5d8 <__alt_data_end+0xfffea5d8>
    a74c:	15ff8b2e 	bgeu	r2,r23,a57c <__alt_data_end+0xfffea57c>
    a750:	31bfff84 	addi	r6,r6,-2
    a754:	1545883a 	add	r2,r2,r21
    a758:	003f8906 	br	a580 <__alt_data_end+0xfffea580>
    a75c:	24c9883a 	add	r4,r4,r19
    a760:	003eee06 	br	a31c <__alt_data_end+0xfffea31c>
    a764:	8005883a 	mov	r2,r16
    a768:	003f1706 	br	a3c8 <__alt_data_end+0xfffea3c8>
    a76c:	817fe736 	bltu	r16,r5,a70c <__alt_data_end+0xfffea70c>
    a770:	280f883a 	mov	r7,r5
    a774:	0009883a 	mov	r4,zero
    a778:	003fb106 	br	a640 <__alt_data_end+0xfffea640>

0000a77c <__divsi3>:
    a77c:	20001b16 	blt	r4,zero,a7ec <__divsi3+0x70>
    a780:	000f883a 	mov	r7,zero
    a784:	28001616 	blt	r5,zero,a7e0 <__divsi3+0x64>
    a788:	200d883a 	mov	r6,r4
    a78c:	29001a2e 	bgeu	r5,r4,a7f8 <__divsi3+0x7c>
    a790:	00800804 	movi	r2,32
    a794:	00c00044 	movi	r3,1
    a798:	00000106 	br	a7a0 <__divsi3+0x24>
    a79c:	10000d26 	beq	r2,zero,a7d4 <__divsi3+0x58>
    a7a0:	294b883a 	add	r5,r5,r5
    a7a4:	10bfffc4 	addi	r2,r2,-1
    a7a8:	18c7883a 	add	r3,r3,r3
    a7ac:	293ffb36 	bltu	r5,r4,a79c <__alt_data_end+0xfffea79c>
    a7b0:	0005883a 	mov	r2,zero
    a7b4:	18000726 	beq	r3,zero,a7d4 <__divsi3+0x58>
    a7b8:	0005883a 	mov	r2,zero
    a7bc:	31400236 	bltu	r6,r5,a7c8 <__divsi3+0x4c>
    a7c0:	314dc83a 	sub	r6,r6,r5
    a7c4:	10c4b03a 	or	r2,r2,r3
    a7c8:	1806d07a 	srli	r3,r3,1
    a7cc:	280ad07a 	srli	r5,r5,1
    a7d0:	183ffa1e 	bne	r3,zero,a7bc <__alt_data_end+0xfffea7bc>
    a7d4:	38000126 	beq	r7,zero,a7dc <__divsi3+0x60>
    a7d8:	0085c83a 	sub	r2,zero,r2
    a7dc:	f800283a 	ret
    a7e0:	014bc83a 	sub	r5,zero,r5
    a7e4:	39c0005c 	xori	r7,r7,1
    a7e8:	003fe706 	br	a788 <__alt_data_end+0xfffea788>
    a7ec:	0109c83a 	sub	r4,zero,r4
    a7f0:	01c00044 	movi	r7,1
    a7f4:	003fe306 	br	a784 <__alt_data_end+0xfffea784>
    a7f8:	00c00044 	movi	r3,1
    a7fc:	003fee06 	br	a7b8 <__alt_data_end+0xfffea7b8>

0000a800 <__modsi3>:
    a800:	20001716 	blt	r4,zero,a860 <__modsi3+0x60>
    a804:	000f883a 	mov	r7,zero
    a808:	2005883a 	mov	r2,r4
    a80c:	28001216 	blt	r5,zero,a858 <__modsi3+0x58>
    a810:	2900162e 	bgeu	r5,r4,a86c <__modsi3+0x6c>
    a814:	01800804 	movi	r6,32
    a818:	00c00044 	movi	r3,1
    a81c:	00000106 	br	a824 <__modsi3+0x24>
    a820:	30000a26 	beq	r6,zero,a84c <__modsi3+0x4c>
    a824:	294b883a 	add	r5,r5,r5
    a828:	31bfffc4 	addi	r6,r6,-1
    a82c:	18c7883a 	add	r3,r3,r3
    a830:	293ffb36 	bltu	r5,r4,a820 <__alt_data_end+0xfffea820>
    a834:	18000526 	beq	r3,zero,a84c <__modsi3+0x4c>
    a838:	1806d07a 	srli	r3,r3,1
    a83c:	11400136 	bltu	r2,r5,a844 <__modsi3+0x44>
    a840:	1145c83a 	sub	r2,r2,r5
    a844:	280ad07a 	srli	r5,r5,1
    a848:	183ffb1e 	bne	r3,zero,a838 <__alt_data_end+0xfffea838>
    a84c:	38000126 	beq	r7,zero,a854 <__modsi3+0x54>
    a850:	0085c83a 	sub	r2,zero,r2
    a854:	f800283a 	ret
    a858:	014bc83a 	sub	r5,zero,r5
    a85c:	003fec06 	br	a810 <__alt_data_end+0xfffea810>
    a860:	0109c83a 	sub	r4,zero,r4
    a864:	01c00044 	movi	r7,1
    a868:	003fe706 	br	a808 <__alt_data_end+0xfffea808>
    a86c:	00c00044 	movi	r3,1
    a870:	003ff106 	br	a838 <__alt_data_end+0xfffea838>

0000a874 <__udivsi3>:
    a874:	200d883a 	mov	r6,r4
    a878:	2900152e 	bgeu	r5,r4,a8d0 <__udivsi3+0x5c>
    a87c:	28001416 	blt	r5,zero,a8d0 <__udivsi3+0x5c>
    a880:	00800804 	movi	r2,32
    a884:	00c00044 	movi	r3,1
    a888:	00000206 	br	a894 <__udivsi3+0x20>
    a88c:	10000e26 	beq	r2,zero,a8c8 <__udivsi3+0x54>
    a890:	28000516 	blt	r5,zero,a8a8 <__udivsi3+0x34>
    a894:	294b883a 	add	r5,r5,r5
    a898:	10bfffc4 	addi	r2,r2,-1
    a89c:	18c7883a 	add	r3,r3,r3
    a8a0:	293ffa36 	bltu	r5,r4,a88c <__alt_data_end+0xfffea88c>
    a8a4:	18000826 	beq	r3,zero,a8c8 <__udivsi3+0x54>
    a8a8:	0005883a 	mov	r2,zero
    a8ac:	31400236 	bltu	r6,r5,a8b8 <__udivsi3+0x44>
    a8b0:	314dc83a 	sub	r6,r6,r5
    a8b4:	10c4b03a 	or	r2,r2,r3
    a8b8:	1806d07a 	srli	r3,r3,1
    a8bc:	280ad07a 	srli	r5,r5,1
    a8c0:	183ffa1e 	bne	r3,zero,a8ac <__alt_data_end+0xfffea8ac>
    a8c4:	f800283a 	ret
    a8c8:	0005883a 	mov	r2,zero
    a8cc:	f800283a 	ret
    a8d0:	00c00044 	movi	r3,1
    a8d4:	003ff406 	br	a8a8 <__alt_data_end+0xfffea8a8>

0000a8d8 <__umodsi3>:
    a8d8:	2005883a 	mov	r2,r4
    a8dc:	2900122e 	bgeu	r5,r4,a928 <__umodsi3+0x50>
    a8e0:	28001116 	blt	r5,zero,a928 <__umodsi3+0x50>
    a8e4:	01800804 	movi	r6,32
    a8e8:	00c00044 	movi	r3,1
    a8ec:	00000206 	br	a8f8 <__umodsi3+0x20>
    a8f0:	30000c26 	beq	r6,zero,a924 <__umodsi3+0x4c>
    a8f4:	28000516 	blt	r5,zero,a90c <__umodsi3+0x34>
    a8f8:	294b883a 	add	r5,r5,r5
    a8fc:	31bfffc4 	addi	r6,r6,-1
    a900:	18c7883a 	add	r3,r3,r3
    a904:	293ffa36 	bltu	r5,r4,a8f0 <__alt_data_end+0xfffea8f0>
    a908:	18000626 	beq	r3,zero,a924 <__umodsi3+0x4c>
    a90c:	1806d07a 	srli	r3,r3,1
    a910:	11400136 	bltu	r2,r5,a918 <__umodsi3+0x40>
    a914:	1145c83a 	sub	r2,r2,r5
    a918:	280ad07a 	srli	r5,r5,1
    a91c:	183ffb1e 	bne	r3,zero,a90c <__alt_data_end+0xfffea90c>
    a920:	f800283a 	ret
    a924:	f800283a 	ret
    a928:	00c00044 	movi	r3,1
    a92c:	003ff706 	br	a90c <__alt_data_end+0xfffea90c>

0000a930 <__adddf3>:
    a930:	02c00434 	movhi	r11,16
    a934:	5affffc4 	addi	r11,r11,-1
    a938:	2806d7fa 	srli	r3,r5,31
    a93c:	2ad4703a 	and	r10,r5,r11
    a940:	3ad2703a 	and	r9,r7,r11
    a944:	3804d53a 	srli	r2,r7,20
    a948:	3018d77a 	srli	r12,r6,29
    a94c:	280ad53a 	srli	r5,r5,20
    a950:	501490fa 	slli	r10,r10,3
    a954:	2010d77a 	srli	r8,r4,29
    a958:	481290fa 	slli	r9,r9,3
    a95c:	380ed7fa 	srli	r7,r7,31
    a960:	defffb04 	addi	sp,sp,-20
    a964:	dc800215 	stw	r18,8(sp)
    a968:	dc400115 	stw	r17,4(sp)
    a96c:	dc000015 	stw	r16,0(sp)
    a970:	dfc00415 	stw	ra,16(sp)
    a974:	dcc00315 	stw	r19,12(sp)
    a978:	1c803fcc 	andi	r18,r3,255
    a97c:	2c01ffcc 	andi	r16,r5,2047
    a980:	5210b03a 	or	r8,r10,r8
    a984:	202290fa 	slli	r17,r4,3
    a988:	1081ffcc 	andi	r2,r2,2047
    a98c:	4b12b03a 	or	r9,r9,r12
    a990:	300c90fa 	slli	r6,r6,3
    a994:	91c07526 	beq	r18,r7,ab6c <__adddf3+0x23c>
    a998:	8087c83a 	sub	r3,r16,r2
    a99c:	00c0ab0e 	bge	zero,r3,ac4c <__adddf3+0x31c>
    a9a0:	10002a1e 	bne	r2,zero,aa4c <__adddf3+0x11c>
    a9a4:	4984b03a 	or	r2,r9,r6
    a9a8:	1000961e 	bne	r2,zero,ac04 <__adddf3+0x2d4>
    a9ac:	888001cc 	andi	r2,r17,7
    a9b0:	10000726 	beq	r2,zero,a9d0 <__adddf3+0xa0>
    a9b4:	888003cc 	andi	r2,r17,15
    a9b8:	00c00104 	movi	r3,4
    a9bc:	10c00426 	beq	r2,r3,a9d0 <__adddf3+0xa0>
    a9c0:	88c7883a 	add	r3,r17,r3
    a9c4:	1c63803a 	cmpltu	r17,r3,r17
    a9c8:	4451883a 	add	r8,r8,r17
    a9cc:	1823883a 	mov	r17,r3
    a9d0:	4080202c 	andhi	r2,r8,128
    a9d4:	10005926 	beq	r2,zero,ab3c <__adddf3+0x20c>
    a9d8:	84000044 	addi	r16,r16,1
    a9dc:	0081ffc4 	movi	r2,2047
    a9e0:	8080ba26 	beq	r16,r2,accc <__adddf3+0x39c>
    a9e4:	00bfe034 	movhi	r2,65408
    a9e8:	10bfffc4 	addi	r2,r2,-1
    a9ec:	4090703a 	and	r8,r8,r2
    a9f0:	4004977a 	slli	r2,r8,29
    a9f4:	4010927a 	slli	r8,r8,9
    a9f8:	8822d0fa 	srli	r17,r17,3
    a9fc:	8401ffcc 	andi	r16,r16,2047
    aa00:	4010d33a 	srli	r8,r8,12
    aa04:	9007883a 	mov	r3,r18
    aa08:	1444b03a 	or	r2,r2,r17
    aa0c:	8401ffcc 	andi	r16,r16,2047
    aa10:	8020953a 	slli	r16,r16,20
    aa14:	18c03fcc 	andi	r3,r3,255
    aa18:	01000434 	movhi	r4,16
    aa1c:	213fffc4 	addi	r4,r4,-1
    aa20:	180697fa 	slli	r3,r3,31
    aa24:	4110703a 	and	r8,r8,r4
    aa28:	4410b03a 	or	r8,r8,r16
    aa2c:	40c6b03a 	or	r3,r8,r3
    aa30:	dfc00417 	ldw	ra,16(sp)
    aa34:	dcc00317 	ldw	r19,12(sp)
    aa38:	dc800217 	ldw	r18,8(sp)
    aa3c:	dc400117 	ldw	r17,4(sp)
    aa40:	dc000017 	ldw	r16,0(sp)
    aa44:	dec00504 	addi	sp,sp,20
    aa48:	f800283a 	ret
    aa4c:	0081ffc4 	movi	r2,2047
    aa50:	80bfd626 	beq	r16,r2,a9ac <__alt_data_end+0xfffea9ac>
    aa54:	4a402034 	orhi	r9,r9,128
    aa58:	00800e04 	movi	r2,56
    aa5c:	10c09f16 	blt	r2,r3,acdc <__adddf3+0x3ac>
    aa60:	008007c4 	movi	r2,31
    aa64:	10c0c216 	blt	r2,r3,ad70 <__adddf3+0x440>
    aa68:	00800804 	movi	r2,32
    aa6c:	10c5c83a 	sub	r2,r2,r3
    aa70:	488a983a 	sll	r5,r9,r2
    aa74:	30c8d83a 	srl	r4,r6,r3
    aa78:	3084983a 	sll	r2,r6,r2
    aa7c:	48c6d83a 	srl	r3,r9,r3
    aa80:	290cb03a 	or	r6,r5,r4
    aa84:	1004c03a 	cmpne	r2,r2,zero
    aa88:	308cb03a 	or	r6,r6,r2
    aa8c:	898dc83a 	sub	r6,r17,r6
    aa90:	89a3803a 	cmpltu	r17,r17,r6
    aa94:	40d1c83a 	sub	r8,r8,r3
    aa98:	4451c83a 	sub	r8,r8,r17
    aa9c:	3023883a 	mov	r17,r6
    aaa0:	4080202c 	andhi	r2,r8,128
    aaa4:	10002326 	beq	r2,zero,ab34 <__adddf3+0x204>
    aaa8:	04c02034 	movhi	r19,128
    aaac:	9cffffc4 	addi	r19,r19,-1
    aab0:	44e6703a 	and	r19,r8,r19
    aab4:	98007626 	beq	r19,zero,ac90 <__adddf3+0x360>
    aab8:	9809883a 	mov	r4,r19
    aabc:	000cf340 	call	cf34 <__clzsi2>
    aac0:	10fffe04 	addi	r3,r2,-8
    aac4:	010007c4 	movi	r4,31
    aac8:	20c07716 	blt	r4,r3,aca8 <__adddf3+0x378>
    aacc:	00800804 	movi	r2,32
    aad0:	10c5c83a 	sub	r2,r2,r3
    aad4:	8884d83a 	srl	r2,r17,r2
    aad8:	98d0983a 	sll	r8,r19,r3
    aadc:	88e2983a 	sll	r17,r17,r3
    aae0:	1204b03a 	or	r2,r2,r8
    aae4:	1c007416 	blt	r3,r16,acb8 <__adddf3+0x388>
    aae8:	1c21c83a 	sub	r16,r3,r16
    aaec:	82000044 	addi	r8,r16,1
    aaf0:	00c007c4 	movi	r3,31
    aaf4:	1a009116 	blt	r3,r8,ad3c <__adddf3+0x40c>
    aaf8:	00c00804 	movi	r3,32
    aafc:	1a07c83a 	sub	r3,r3,r8
    ab00:	8a08d83a 	srl	r4,r17,r8
    ab04:	88e2983a 	sll	r17,r17,r3
    ab08:	10c6983a 	sll	r3,r2,r3
    ab0c:	1210d83a 	srl	r8,r2,r8
    ab10:	8804c03a 	cmpne	r2,r17,zero
    ab14:	1906b03a 	or	r3,r3,r4
    ab18:	18a2b03a 	or	r17,r3,r2
    ab1c:	0021883a 	mov	r16,zero
    ab20:	003fa206 	br	a9ac <__alt_data_end+0xfffea9ac>
    ab24:	1890b03a 	or	r8,r3,r2
    ab28:	40017d26 	beq	r8,zero,b120 <__adddf3+0x7f0>
    ab2c:	1011883a 	mov	r8,r2
    ab30:	1823883a 	mov	r17,r3
    ab34:	888001cc 	andi	r2,r17,7
    ab38:	103f9e1e 	bne	r2,zero,a9b4 <__alt_data_end+0xfffea9b4>
    ab3c:	4004977a 	slli	r2,r8,29
    ab40:	8822d0fa 	srli	r17,r17,3
    ab44:	4010d0fa 	srli	r8,r8,3
    ab48:	9007883a 	mov	r3,r18
    ab4c:	1444b03a 	or	r2,r2,r17
    ab50:	0101ffc4 	movi	r4,2047
    ab54:	81002426 	beq	r16,r4,abe8 <__adddf3+0x2b8>
    ab58:	8120703a 	and	r16,r16,r4
    ab5c:	01000434 	movhi	r4,16
    ab60:	213fffc4 	addi	r4,r4,-1
    ab64:	4110703a 	and	r8,r8,r4
    ab68:	003fa806 	br	aa0c <__alt_data_end+0xfffeaa0c>
    ab6c:	8089c83a 	sub	r4,r16,r2
    ab70:	01005e0e 	bge	zero,r4,acec <__adddf3+0x3bc>
    ab74:	10002b26 	beq	r2,zero,ac24 <__adddf3+0x2f4>
    ab78:	0081ffc4 	movi	r2,2047
    ab7c:	80bf8b26 	beq	r16,r2,a9ac <__alt_data_end+0xfffea9ac>
    ab80:	4a402034 	orhi	r9,r9,128
    ab84:	00800e04 	movi	r2,56
    ab88:	1100a40e 	bge	r2,r4,ae1c <__adddf3+0x4ec>
    ab8c:	498cb03a 	or	r6,r9,r6
    ab90:	300ac03a 	cmpne	r5,r6,zero
    ab94:	0013883a 	mov	r9,zero
    ab98:	2c4b883a 	add	r5,r5,r17
    ab9c:	2c63803a 	cmpltu	r17,r5,r17
    aba0:	4a11883a 	add	r8,r9,r8
    aba4:	8a11883a 	add	r8,r17,r8
    aba8:	2823883a 	mov	r17,r5
    abac:	4080202c 	andhi	r2,r8,128
    abb0:	103fe026 	beq	r2,zero,ab34 <__alt_data_end+0xfffeab34>
    abb4:	84000044 	addi	r16,r16,1
    abb8:	0081ffc4 	movi	r2,2047
    abbc:	8080d226 	beq	r16,r2,af08 <__adddf3+0x5d8>
    abc0:	00bfe034 	movhi	r2,65408
    abc4:	10bfffc4 	addi	r2,r2,-1
    abc8:	4090703a 	and	r8,r8,r2
    abcc:	880ad07a 	srli	r5,r17,1
    abd0:	400897fa 	slli	r4,r8,31
    abd4:	88c0004c 	andi	r3,r17,1
    abd8:	28e2b03a 	or	r17,r5,r3
    abdc:	4010d07a 	srli	r8,r8,1
    abe0:	2462b03a 	or	r17,r4,r17
    abe4:	003f7106 	br	a9ac <__alt_data_end+0xfffea9ac>
    abe8:	4088b03a 	or	r4,r8,r2
    abec:	20014526 	beq	r4,zero,b104 <__adddf3+0x7d4>
    abf0:	01000434 	movhi	r4,16
    abf4:	42000234 	orhi	r8,r8,8
    abf8:	213fffc4 	addi	r4,r4,-1
    abfc:	4110703a 	and	r8,r8,r4
    ac00:	003f8206 	br	aa0c <__alt_data_end+0xfffeaa0c>
    ac04:	18ffffc4 	addi	r3,r3,-1
    ac08:	1800491e 	bne	r3,zero,ad30 <__adddf3+0x400>
    ac0c:	898bc83a 	sub	r5,r17,r6
    ac10:	8963803a 	cmpltu	r17,r17,r5
    ac14:	4251c83a 	sub	r8,r8,r9
    ac18:	4451c83a 	sub	r8,r8,r17
    ac1c:	2823883a 	mov	r17,r5
    ac20:	003f9f06 	br	aaa0 <__alt_data_end+0xfffeaaa0>
    ac24:	4984b03a 	or	r2,r9,r6
    ac28:	103f6026 	beq	r2,zero,a9ac <__alt_data_end+0xfffea9ac>
    ac2c:	213fffc4 	addi	r4,r4,-1
    ac30:	2000931e 	bne	r4,zero,ae80 <__adddf3+0x550>
    ac34:	898d883a 	add	r6,r17,r6
    ac38:	3463803a 	cmpltu	r17,r6,r17
    ac3c:	4251883a 	add	r8,r8,r9
    ac40:	8a11883a 	add	r8,r17,r8
    ac44:	3023883a 	mov	r17,r6
    ac48:	003fd806 	br	abac <__alt_data_end+0xfffeabac>
    ac4c:	1800541e 	bne	r3,zero,ada0 <__adddf3+0x470>
    ac50:	80800044 	addi	r2,r16,1
    ac54:	1081ffcc 	andi	r2,r2,2047
    ac58:	00c00044 	movi	r3,1
    ac5c:	1880a00e 	bge	r3,r2,aee0 <__adddf3+0x5b0>
    ac60:	8989c83a 	sub	r4,r17,r6
    ac64:	8905803a 	cmpltu	r2,r17,r4
    ac68:	4267c83a 	sub	r19,r8,r9
    ac6c:	98a7c83a 	sub	r19,r19,r2
    ac70:	9880202c 	andhi	r2,r19,128
    ac74:	10006326 	beq	r2,zero,ae04 <__adddf3+0x4d4>
    ac78:	3463c83a 	sub	r17,r6,r17
    ac7c:	4a07c83a 	sub	r3,r9,r8
    ac80:	344d803a 	cmpltu	r6,r6,r17
    ac84:	19a7c83a 	sub	r19,r3,r6
    ac88:	3825883a 	mov	r18,r7
    ac8c:	983f8a1e 	bne	r19,zero,aab8 <__alt_data_end+0xfffeaab8>
    ac90:	8809883a 	mov	r4,r17
    ac94:	000cf340 	call	cf34 <__clzsi2>
    ac98:	10800804 	addi	r2,r2,32
    ac9c:	10fffe04 	addi	r3,r2,-8
    aca0:	010007c4 	movi	r4,31
    aca4:	20ff890e 	bge	r4,r3,aacc <__alt_data_end+0xfffeaacc>
    aca8:	10bff604 	addi	r2,r2,-40
    acac:	8884983a 	sll	r2,r17,r2
    acb0:	0023883a 	mov	r17,zero
    acb4:	1c3f8c0e 	bge	r3,r16,aae8 <__alt_data_end+0xfffeaae8>
    acb8:	023fe034 	movhi	r8,65408
    acbc:	423fffc4 	addi	r8,r8,-1
    acc0:	80e1c83a 	sub	r16,r16,r3
    acc4:	1210703a 	and	r8,r2,r8
    acc8:	003f3806 	br	a9ac <__alt_data_end+0xfffea9ac>
    accc:	9007883a 	mov	r3,r18
    acd0:	0011883a 	mov	r8,zero
    acd4:	0005883a 	mov	r2,zero
    acd8:	003f4c06 	br	aa0c <__alt_data_end+0xfffeaa0c>
    acdc:	498cb03a 	or	r6,r9,r6
    ace0:	300cc03a 	cmpne	r6,r6,zero
    ace4:	0007883a 	mov	r3,zero
    ace8:	003f6806 	br	aa8c <__alt_data_end+0xfffeaa8c>
    acec:	20009c1e 	bne	r4,zero,af60 <__adddf3+0x630>
    acf0:	80800044 	addi	r2,r16,1
    acf4:	1141ffcc 	andi	r5,r2,2047
    acf8:	01000044 	movi	r4,1
    acfc:	2140670e 	bge	r4,r5,ae9c <__adddf3+0x56c>
    ad00:	0101ffc4 	movi	r4,2047
    ad04:	11007f26 	beq	r2,r4,af04 <__adddf3+0x5d4>
    ad08:	898d883a 	add	r6,r17,r6
    ad0c:	4247883a 	add	r3,r8,r9
    ad10:	3451803a 	cmpltu	r8,r6,r17
    ad14:	40d1883a 	add	r8,r8,r3
    ad18:	402297fa 	slli	r17,r8,31
    ad1c:	300cd07a 	srli	r6,r6,1
    ad20:	4010d07a 	srli	r8,r8,1
    ad24:	1021883a 	mov	r16,r2
    ad28:	89a2b03a 	or	r17,r17,r6
    ad2c:	003f1f06 	br	a9ac <__alt_data_end+0xfffea9ac>
    ad30:	0081ffc4 	movi	r2,2047
    ad34:	80bf481e 	bne	r16,r2,aa58 <__alt_data_end+0xfffeaa58>
    ad38:	003f1c06 	br	a9ac <__alt_data_end+0xfffea9ac>
    ad3c:	843ff844 	addi	r16,r16,-31
    ad40:	01000804 	movi	r4,32
    ad44:	1406d83a 	srl	r3,r2,r16
    ad48:	41005026 	beq	r8,r4,ae8c <__adddf3+0x55c>
    ad4c:	01001004 	movi	r4,64
    ad50:	2211c83a 	sub	r8,r4,r8
    ad54:	1204983a 	sll	r2,r2,r8
    ad58:	88a2b03a 	or	r17,r17,r2
    ad5c:	8822c03a 	cmpne	r17,r17,zero
    ad60:	1c62b03a 	or	r17,r3,r17
    ad64:	0011883a 	mov	r8,zero
    ad68:	0021883a 	mov	r16,zero
    ad6c:	003f7106 	br	ab34 <__alt_data_end+0xfffeab34>
    ad70:	193ff804 	addi	r4,r3,-32
    ad74:	00800804 	movi	r2,32
    ad78:	4908d83a 	srl	r4,r9,r4
    ad7c:	18804526 	beq	r3,r2,ae94 <__adddf3+0x564>
    ad80:	00801004 	movi	r2,64
    ad84:	10c5c83a 	sub	r2,r2,r3
    ad88:	4886983a 	sll	r3,r9,r2
    ad8c:	198cb03a 	or	r6,r3,r6
    ad90:	300cc03a 	cmpne	r6,r6,zero
    ad94:	218cb03a 	or	r6,r4,r6
    ad98:	0007883a 	mov	r3,zero
    ad9c:	003f3b06 	br	aa8c <__alt_data_end+0xfffeaa8c>
    ada0:	80002a26 	beq	r16,zero,ae4c <__adddf3+0x51c>
    ada4:	0101ffc4 	movi	r4,2047
    ada8:	11006826 	beq	r2,r4,af4c <__adddf3+0x61c>
    adac:	00c7c83a 	sub	r3,zero,r3
    adb0:	42002034 	orhi	r8,r8,128
    adb4:	01000e04 	movi	r4,56
    adb8:	20c07c16 	blt	r4,r3,afac <__adddf3+0x67c>
    adbc:	010007c4 	movi	r4,31
    adc0:	20c0da16 	blt	r4,r3,b12c <__adddf3+0x7fc>
    adc4:	01000804 	movi	r4,32
    adc8:	20c9c83a 	sub	r4,r4,r3
    adcc:	4114983a 	sll	r10,r8,r4
    add0:	88cad83a 	srl	r5,r17,r3
    add4:	8908983a 	sll	r4,r17,r4
    add8:	40c6d83a 	srl	r3,r8,r3
    addc:	5162b03a 	or	r17,r10,r5
    ade0:	2008c03a 	cmpne	r4,r4,zero
    ade4:	8922b03a 	or	r17,r17,r4
    ade8:	3463c83a 	sub	r17,r6,r17
    adec:	48c7c83a 	sub	r3,r9,r3
    adf0:	344d803a 	cmpltu	r6,r6,r17
    adf4:	1991c83a 	sub	r8,r3,r6
    adf8:	1021883a 	mov	r16,r2
    adfc:	3825883a 	mov	r18,r7
    ae00:	003f2706 	br	aaa0 <__alt_data_end+0xfffeaaa0>
    ae04:	24d0b03a 	or	r8,r4,r19
    ae08:	40001b1e 	bne	r8,zero,ae78 <__adddf3+0x548>
    ae0c:	0005883a 	mov	r2,zero
    ae10:	0007883a 	mov	r3,zero
    ae14:	0021883a 	mov	r16,zero
    ae18:	003f4d06 	br	ab50 <__alt_data_end+0xfffeab50>
    ae1c:	008007c4 	movi	r2,31
    ae20:	11003c16 	blt	r2,r4,af14 <__adddf3+0x5e4>
    ae24:	00800804 	movi	r2,32
    ae28:	1105c83a 	sub	r2,r2,r4
    ae2c:	488e983a 	sll	r7,r9,r2
    ae30:	310ad83a 	srl	r5,r6,r4
    ae34:	3084983a 	sll	r2,r6,r2
    ae38:	4912d83a 	srl	r9,r9,r4
    ae3c:	394ab03a 	or	r5,r7,r5
    ae40:	1004c03a 	cmpne	r2,r2,zero
    ae44:	288ab03a 	or	r5,r5,r2
    ae48:	003f5306 	br	ab98 <__alt_data_end+0xfffeab98>
    ae4c:	4448b03a 	or	r4,r8,r17
    ae50:	20003e26 	beq	r4,zero,af4c <__adddf3+0x61c>
    ae54:	00c6303a 	nor	r3,zero,r3
    ae58:	18003a1e 	bne	r3,zero,af44 <__adddf3+0x614>
    ae5c:	3463c83a 	sub	r17,r6,r17
    ae60:	4a07c83a 	sub	r3,r9,r8
    ae64:	344d803a 	cmpltu	r6,r6,r17
    ae68:	1991c83a 	sub	r8,r3,r6
    ae6c:	1021883a 	mov	r16,r2
    ae70:	3825883a 	mov	r18,r7
    ae74:	003f0a06 	br	aaa0 <__alt_data_end+0xfffeaaa0>
    ae78:	2023883a 	mov	r17,r4
    ae7c:	003f0d06 	br	aab4 <__alt_data_end+0xfffeaab4>
    ae80:	0081ffc4 	movi	r2,2047
    ae84:	80bf3f1e 	bne	r16,r2,ab84 <__alt_data_end+0xfffeab84>
    ae88:	003ec806 	br	a9ac <__alt_data_end+0xfffea9ac>
    ae8c:	0005883a 	mov	r2,zero
    ae90:	003fb106 	br	ad58 <__alt_data_end+0xfffead58>
    ae94:	0007883a 	mov	r3,zero
    ae98:	003fbc06 	br	ad8c <__alt_data_end+0xfffead8c>
    ae9c:	4444b03a 	or	r2,r8,r17
    aea0:	8000871e 	bne	r16,zero,b0c0 <__adddf3+0x790>
    aea4:	1000ba26 	beq	r2,zero,b190 <__adddf3+0x860>
    aea8:	4984b03a 	or	r2,r9,r6
    aeac:	103ebf26 	beq	r2,zero,a9ac <__alt_data_end+0xfffea9ac>
    aeb0:	8985883a 	add	r2,r17,r6
    aeb4:	4247883a 	add	r3,r8,r9
    aeb8:	1451803a 	cmpltu	r8,r2,r17
    aebc:	40d1883a 	add	r8,r8,r3
    aec0:	40c0202c 	andhi	r3,r8,128
    aec4:	1023883a 	mov	r17,r2
    aec8:	183f1a26 	beq	r3,zero,ab34 <__alt_data_end+0xfffeab34>
    aecc:	00bfe034 	movhi	r2,65408
    aed0:	10bfffc4 	addi	r2,r2,-1
    aed4:	2021883a 	mov	r16,r4
    aed8:	4090703a 	and	r8,r8,r2
    aedc:	003eb306 	br	a9ac <__alt_data_end+0xfffea9ac>
    aee0:	4444b03a 	or	r2,r8,r17
    aee4:	8000291e 	bne	r16,zero,af8c <__adddf3+0x65c>
    aee8:	10004b1e 	bne	r2,zero,b018 <__adddf3+0x6e8>
    aeec:	4990b03a 	or	r8,r9,r6
    aef0:	40008b26 	beq	r8,zero,b120 <__adddf3+0x7f0>
    aef4:	4811883a 	mov	r8,r9
    aef8:	3023883a 	mov	r17,r6
    aefc:	3825883a 	mov	r18,r7
    af00:	003eaa06 	br	a9ac <__alt_data_end+0xfffea9ac>
    af04:	1021883a 	mov	r16,r2
    af08:	0011883a 	mov	r8,zero
    af0c:	0005883a 	mov	r2,zero
    af10:	003f0f06 	br	ab50 <__alt_data_end+0xfffeab50>
    af14:	217ff804 	addi	r5,r4,-32
    af18:	00800804 	movi	r2,32
    af1c:	494ad83a 	srl	r5,r9,r5
    af20:	20807d26 	beq	r4,r2,b118 <__adddf3+0x7e8>
    af24:	00801004 	movi	r2,64
    af28:	1109c83a 	sub	r4,r2,r4
    af2c:	4912983a 	sll	r9,r9,r4
    af30:	498cb03a 	or	r6,r9,r6
    af34:	300cc03a 	cmpne	r6,r6,zero
    af38:	298ab03a 	or	r5,r5,r6
    af3c:	0013883a 	mov	r9,zero
    af40:	003f1506 	br	ab98 <__alt_data_end+0xfffeab98>
    af44:	0101ffc4 	movi	r4,2047
    af48:	113f9a1e 	bne	r2,r4,adb4 <__alt_data_end+0xfffeadb4>
    af4c:	4811883a 	mov	r8,r9
    af50:	3023883a 	mov	r17,r6
    af54:	1021883a 	mov	r16,r2
    af58:	3825883a 	mov	r18,r7
    af5c:	003e9306 	br	a9ac <__alt_data_end+0xfffea9ac>
    af60:	8000161e 	bne	r16,zero,afbc <__adddf3+0x68c>
    af64:	444ab03a 	or	r5,r8,r17
    af68:	28005126 	beq	r5,zero,b0b0 <__adddf3+0x780>
    af6c:	0108303a 	nor	r4,zero,r4
    af70:	20004d1e 	bne	r4,zero,b0a8 <__adddf3+0x778>
    af74:	89a3883a 	add	r17,r17,r6
    af78:	4253883a 	add	r9,r8,r9
    af7c:	898d803a 	cmpltu	r6,r17,r6
    af80:	3251883a 	add	r8,r6,r9
    af84:	1021883a 	mov	r16,r2
    af88:	003f0806 	br	abac <__alt_data_end+0xfffeabac>
    af8c:	1000301e 	bne	r2,zero,b050 <__adddf3+0x720>
    af90:	4984b03a 	or	r2,r9,r6
    af94:	10007126 	beq	r2,zero,b15c <__adddf3+0x82c>
    af98:	4811883a 	mov	r8,r9
    af9c:	3023883a 	mov	r17,r6
    afa0:	3825883a 	mov	r18,r7
    afa4:	0401ffc4 	movi	r16,2047
    afa8:	003e8006 	br	a9ac <__alt_data_end+0xfffea9ac>
    afac:	4462b03a 	or	r17,r8,r17
    afb0:	8822c03a 	cmpne	r17,r17,zero
    afb4:	0007883a 	mov	r3,zero
    afb8:	003f8b06 	br	ade8 <__alt_data_end+0xfffeade8>
    afbc:	0141ffc4 	movi	r5,2047
    afc0:	11403b26 	beq	r2,r5,b0b0 <__adddf3+0x780>
    afc4:	0109c83a 	sub	r4,zero,r4
    afc8:	42002034 	orhi	r8,r8,128
    afcc:	01400e04 	movi	r5,56
    afd0:	29006716 	blt	r5,r4,b170 <__adddf3+0x840>
    afd4:	014007c4 	movi	r5,31
    afd8:	29007016 	blt	r5,r4,b19c <__adddf3+0x86c>
    afdc:	01400804 	movi	r5,32
    afe0:	290bc83a 	sub	r5,r5,r4
    afe4:	4154983a 	sll	r10,r8,r5
    afe8:	890ed83a 	srl	r7,r17,r4
    afec:	894a983a 	sll	r5,r17,r5
    aff0:	4108d83a 	srl	r4,r8,r4
    aff4:	51e2b03a 	or	r17,r10,r7
    aff8:	280ac03a 	cmpne	r5,r5,zero
    affc:	8962b03a 	or	r17,r17,r5
    b000:	89a3883a 	add	r17,r17,r6
    b004:	2253883a 	add	r9,r4,r9
    b008:	898d803a 	cmpltu	r6,r17,r6
    b00c:	3251883a 	add	r8,r6,r9
    b010:	1021883a 	mov	r16,r2
    b014:	003ee506 	br	abac <__alt_data_end+0xfffeabac>
    b018:	4984b03a 	or	r2,r9,r6
    b01c:	103e6326 	beq	r2,zero,a9ac <__alt_data_end+0xfffea9ac>
    b020:	8987c83a 	sub	r3,r17,r6
    b024:	88c9803a 	cmpltu	r4,r17,r3
    b028:	4245c83a 	sub	r2,r8,r9
    b02c:	1105c83a 	sub	r2,r2,r4
    b030:	1100202c 	andhi	r4,r2,128
    b034:	203ebb26 	beq	r4,zero,ab24 <__alt_data_end+0xfffeab24>
    b038:	3463c83a 	sub	r17,r6,r17
    b03c:	4a07c83a 	sub	r3,r9,r8
    b040:	344d803a 	cmpltu	r6,r6,r17
    b044:	1991c83a 	sub	r8,r3,r6
    b048:	3825883a 	mov	r18,r7
    b04c:	003e5706 	br	a9ac <__alt_data_end+0xfffea9ac>
    b050:	4984b03a 	or	r2,r9,r6
    b054:	10002e26 	beq	r2,zero,b110 <__adddf3+0x7e0>
    b058:	4004d0fa 	srli	r2,r8,3
    b05c:	8822d0fa 	srli	r17,r17,3
    b060:	4010977a 	slli	r8,r8,29
    b064:	10c0022c 	andhi	r3,r2,8
    b068:	4462b03a 	or	r17,r8,r17
    b06c:	18000826 	beq	r3,zero,b090 <__adddf3+0x760>
    b070:	4808d0fa 	srli	r4,r9,3
    b074:	20c0022c 	andhi	r3,r4,8
    b078:	1800051e 	bne	r3,zero,b090 <__adddf3+0x760>
    b07c:	300cd0fa 	srli	r6,r6,3
    b080:	4806977a 	slli	r3,r9,29
    b084:	2005883a 	mov	r2,r4
    b088:	3825883a 	mov	r18,r7
    b08c:	19a2b03a 	or	r17,r3,r6
    b090:	8810d77a 	srli	r8,r17,29
    b094:	100490fa 	slli	r2,r2,3
    b098:	882290fa 	slli	r17,r17,3
    b09c:	0401ffc4 	movi	r16,2047
    b0a0:	4090b03a 	or	r8,r8,r2
    b0a4:	003e4106 	br	a9ac <__alt_data_end+0xfffea9ac>
    b0a8:	0141ffc4 	movi	r5,2047
    b0ac:	117fc71e 	bne	r2,r5,afcc <__alt_data_end+0xfffeafcc>
    b0b0:	4811883a 	mov	r8,r9
    b0b4:	3023883a 	mov	r17,r6
    b0b8:	1021883a 	mov	r16,r2
    b0bc:	003e3b06 	br	a9ac <__alt_data_end+0xfffea9ac>
    b0c0:	10002f26 	beq	r2,zero,b180 <__adddf3+0x850>
    b0c4:	4984b03a 	or	r2,r9,r6
    b0c8:	10001126 	beq	r2,zero,b110 <__adddf3+0x7e0>
    b0cc:	4004d0fa 	srli	r2,r8,3
    b0d0:	8822d0fa 	srli	r17,r17,3
    b0d4:	4010977a 	slli	r8,r8,29
    b0d8:	10c0022c 	andhi	r3,r2,8
    b0dc:	4462b03a 	or	r17,r8,r17
    b0e0:	183feb26 	beq	r3,zero,b090 <__alt_data_end+0xfffeb090>
    b0e4:	4808d0fa 	srli	r4,r9,3
    b0e8:	20c0022c 	andhi	r3,r4,8
    b0ec:	183fe81e 	bne	r3,zero,b090 <__alt_data_end+0xfffeb090>
    b0f0:	300cd0fa 	srli	r6,r6,3
    b0f4:	4806977a 	slli	r3,r9,29
    b0f8:	2005883a 	mov	r2,r4
    b0fc:	19a2b03a 	or	r17,r3,r6
    b100:	003fe306 	br	b090 <__alt_data_end+0xfffeb090>
    b104:	0011883a 	mov	r8,zero
    b108:	0005883a 	mov	r2,zero
    b10c:	003e3f06 	br	aa0c <__alt_data_end+0xfffeaa0c>
    b110:	0401ffc4 	movi	r16,2047
    b114:	003e2506 	br	a9ac <__alt_data_end+0xfffea9ac>
    b118:	0013883a 	mov	r9,zero
    b11c:	003f8406 	br	af30 <__alt_data_end+0xfffeaf30>
    b120:	0005883a 	mov	r2,zero
    b124:	0007883a 	mov	r3,zero
    b128:	003e8906 	br	ab50 <__alt_data_end+0xfffeab50>
    b12c:	197ff804 	addi	r5,r3,-32
    b130:	01000804 	movi	r4,32
    b134:	414ad83a 	srl	r5,r8,r5
    b138:	19002426 	beq	r3,r4,b1cc <__adddf3+0x89c>
    b13c:	01001004 	movi	r4,64
    b140:	20c7c83a 	sub	r3,r4,r3
    b144:	40c6983a 	sll	r3,r8,r3
    b148:	1c46b03a 	or	r3,r3,r17
    b14c:	1806c03a 	cmpne	r3,r3,zero
    b150:	28e2b03a 	or	r17,r5,r3
    b154:	0007883a 	mov	r3,zero
    b158:	003f2306 	br	ade8 <__alt_data_end+0xfffeade8>
    b15c:	0007883a 	mov	r3,zero
    b160:	5811883a 	mov	r8,r11
    b164:	00bfffc4 	movi	r2,-1
    b168:	0401ffc4 	movi	r16,2047
    b16c:	003e7806 	br	ab50 <__alt_data_end+0xfffeab50>
    b170:	4462b03a 	or	r17,r8,r17
    b174:	8822c03a 	cmpne	r17,r17,zero
    b178:	0009883a 	mov	r4,zero
    b17c:	003fa006 	br	b000 <__alt_data_end+0xfffeb000>
    b180:	4811883a 	mov	r8,r9
    b184:	3023883a 	mov	r17,r6
    b188:	0401ffc4 	movi	r16,2047
    b18c:	003e0706 	br	a9ac <__alt_data_end+0xfffea9ac>
    b190:	4811883a 	mov	r8,r9
    b194:	3023883a 	mov	r17,r6
    b198:	003e0406 	br	a9ac <__alt_data_end+0xfffea9ac>
    b19c:	21fff804 	addi	r7,r4,-32
    b1a0:	01400804 	movi	r5,32
    b1a4:	41ced83a 	srl	r7,r8,r7
    b1a8:	21400a26 	beq	r4,r5,b1d4 <__adddf3+0x8a4>
    b1ac:	01401004 	movi	r5,64
    b1b0:	2909c83a 	sub	r4,r5,r4
    b1b4:	4108983a 	sll	r4,r8,r4
    b1b8:	2448b03a 	or	r4,r4,r17
    b1bc:	2008c03a 	cmpne	r4,r4,zero
    b1c0:	3922b03a 	or	r17,r7,r4
    b1c4:	0009883a 	mov	r4,zero
    b1c8:	003f8d06 	br	b000 <__alt_data_end+0xfffeb000>
    b1cc:	0007883a 	mov	r3,zero
    b1d0:	003fdd06 	br	b148 <__alt_data_end+0xfffeb148>
    b1d4:	0009883a 	mov	r4,zero
    b1d8:	003ff706 	br	b1b8 <__alt_data_end+0xfffeb1b8>

0000b1dc <__divdf3>:
    b1dc:	defff204 	addi	sp,sp,-56
    b1e0:	dd400915 	stw	r21,36(sp)
    b1e4:	282ad53a 	srli	r21,r5,20
    b1e8:	dd000815 	stw	r20,32(sp)
    b1ec:	2828d7fa 	srli	r20,r5,31
    b1f0:	dc000415 	stw	r16,16(sp)
    b1f4:	04000434 	movhi	r16,16
    b1f8:	df000c15 	stw	fp,48(sp)
    b1fc:	843fffc4 	addi	r16,r16,-1
    b200:	dfc00d15 	stw	ra,52(sp)
    b204:	ddc00b15 	stw	r23,44(sp)
    b208:	dd800a15 	stw	r22,40(sp)
    b20c:	dcc00715 	stw	r19,28(sp)
    b210:	dc800615 	stw	r18,24(sp)
    b214:	dc400515 	stw	r17,20(sp)
    b218:	ad41ffcc 	andi	r21,r21,2047
    b21c:	2c20703a 	and	r16,r5,r16
    b220:	a7003fcc 	andi	fp,r20,255
    b224:	a8006126 	beq	r21,zero,b3ac <__divdf3+0x1d0>
    b228:	0081ffc4 	movi	r2,2047
    b22c:	2025883a 	mov	r18,r4
    b230:	a8803726 	beq	r21,r2,b310 <__divdf3+0x134>
    b234:	80800434 	orhi	r2,r16,16
    b238:	100490fa 	slli	r2,r2,3
    b23c:	2020d77a 	srli	r16,r4,29
    b240:	202490fa 	slli	r18,r4,3
    b244:	ad7f0044 	addi	r21,r21,-1023
    b248:	80a0b03a 	or	r16,r16,r2
    b24c:	0027883a 	mov	r19,zero
    b250:	0013883a 	mov	r9,zero
    b254:	3804d53a 	srli	r2,r7,20
    b258:	382cd7fa 	srli	r22,r7,31
    b25c:	04400434 	movhi	r17,16
    b260:	8c7fffc4 	addi	r17,r17,-1
    b264:	1081ffcc 	andi	r2,r2,2047
    b268:	3011883a 	mov	r8,r6
    b26c:	3c62703a 	and	r17,r7,r17
    b270:	b5c03fcc 	andi	r23,r22,255
    b274:	10006c26 	beq	r2,zero,b428 <__divdf3+0x24c>
    b278:	00c1ffc4 	movi	r3,2047
    b27c:	10c06426 	beq	r2,r3,b410 <__divdf3+0x234>
    b280:	88c00434 	orhi	r3,r17,16
    b284:	180690fa 	slli	r3,r3,3
    b288:	3022d77a 	srli	r17,r6,29
    b28c:	301090fa 	slli	r8,r6,3
    b290:	10bf0044 	addi	r2,r2,-1023
    b294:	88e2b03a 	or	r17,r17,r3
    b298:	000f883a 	mov	r7,zero
    b29c:	a58cf03a 	xor	r6,r20,r22
    b2a0:	3cc8b03a 	or	r4,r7,r19
    b2a4:	a8abc83a 	sub	r21,r21,r2
    b2a8:	008003c4 	movi	r2,15
    b2ac:	3007883a 	mov	r3,r6
    b2b0:	34c03fcc 	andi	r19,r6,255
    b2b4:	11009036 	bltu	r2,r4,b4f8 <__divdf3+0x31c>
    b2b8:	200890ba 	slli	r4,r4,2
    b2bc:	00800074 	movhi	r2,1
    b2c0:	10acb404 	addi	r2,r2,-19760
    b2c4:	2089883a 	add	r4,r4,r2
    b2c8:	20800017 	ldw	r2,0(r4)
    b2cc:	1000683a 	jmp	r2
    b2d0:	0000b4f8 	rdprs	zero,zero,723
    b2d4:	0000b348 	cmpgei	zero,zero,717
    b2d8:	0000b4e8 	cmpgeui	zero,zero,723
    b2dc:	0000b33c 	xorhi	zero,zero,716
    b2e0:	0000b4e8 	cmpgeui	zero,zero,723
    b2e4:	0000b4bc 	xorhi	zero,zero,722
    b2e8:	0000b4e8 	cmpgeui	zero,zero,723
    b2ec:	0000b33c 	xorhi	zero,zero,716
    b2f0:	0000b348 	cmpgei	zero,zero,717
    b2f4:	0000b348 	cmpgei	zero,zero,717
    b2f8:	0000b4bc 	xorhi	zero,zero,722
    b2fc:	0000b33c 	xorhi	zero,zero,716
    b300:	0000b32c 	andhi	zero,zero,716
    b304:	0000b32c 	andhi	zero,zero,716
    b308:	0000b32c 	andhi	zero,zero,716
    b30c:	0000b7dc 	xori	zero,zero,735
    b310:	2404b03a 	or	r2,r4,r16
    b314:	1000661e 	bne	r2,zero,b4b0 <__divdf3+0x2d4>
    b318:	04c00204 	movi	r19,8
    b31c:	0021883a 	mov	r16,zero
    b320:	0025883a 	mov	r18,zero
    b324:	02400084 	movi	r9,2
    b328:	003fca06 	br	b254 <__alt_data_end+0xfffeb254>
    b32c:	8023883a 	mov	r17,r16
    b330:	9011883a 	mov	r8,r18
    b334:	e02f883a 	mov	r23,fp
    b338:	480f883a 	mov	r7,r9
    b33c:	00800084 	movi	r2,2
    b340:	3881311e 	bne	r7,r2,b808 <__divdf3+0x62c>
    b344:	b827883a 	mov	r19,r23
    b348:	98c0004c 	andi	r3,r19,1
    b34c:	0081ffc4 	movi	r2,2047
    b350:	000b883a 	mov	r5,zero
    b354:	0025883a 	mov	r18,zero
    b358:	1004953a 	slli	r2,r2,20
    b35c:	18c03fcc 	andi	r3,r3,255
    b360:	04400434 	movhi	r17,16
    b364:	8c7fffc4 	addi	r17,r17,-1
    b368:	180697fa 	slli	r3,r3,31
    b36c:	2c4a703a 	and	r5,r5,r17
    b370:	288ab03a 	or	r5,r5,r2
    b374:	28c6b03a 	or	r3,r5,r3
    b378:	9005883a 	mov	r2,r18
    b37c:	dfc00d17 	ldw	ra,52(sp)
    b380:	df000c17 	ldw	fp,48(sp)
    b384:	ddc00b17 	ldw	r23,44(sp)
    b388:	dd800a17 	ldw	r22,40(sp)
    b38c:	dd400917 	ldw	r21,36(sp)
    b390:	dd000817 	ldw	r20,32(sp)
    b394:	dcc00717 	ldw	r19,28(sp)
    b398:	dc800617 	ldw	r18,24(sp)
    b39c:	dc400517 	ldw	r17,20(sp)
    b3a0:	dc000417 	ldw	r16,16(sp)
    b3a4:	dec00e04 	addi	sp,sp,56
    b3a8:	f800283a 	ret
    b3ac:	2404b03a 	or	r2,r4,r16
    b3b0:	2027883a 	mov	r19,r4
    b3b4:	10003926 	beq	r2,zero,b49c <__divdf3+0x2c0>
    b3b8:	80012e26 	beq	r16,zero,b874 <__divdf3+0x698>
    b3bc:	8009883a 	mov	r4,r16
    b3c0:	d9800315 	stw	r6,12(sp)
    b3c4:	d9c00215 	stw	r7,8(sp)
    b3c8:	000cf340 	call	cf34 <__clzsi2>
    b3cc:	d9800317 	ldw	r6,12(sp)
    b3d0:	d9c00217 	ldw	r7,8(sp)
    b3d4:	113ffd44 	addi	r4,r2,-11
    b3d8:	00c00704 	movi	r3,28
    b3dc:	19012116 	blt	r3,r4,b864 <__divdf3+0x688>
    b3e0:	00c00744 	movi	r3,29
    b3e4:	147ffe04 	addi	r17,r2,-8
    b3e8:	1907c83a 	sub	r3,r3,r4
    b3ec:	8460983a 	sll	r16,r16,r17
    b3f0:	98c6d83a 	srl	r3,r19,r3
    b3f4:	9c64983a 	sll	r18,r19,r17
    b3f8:	1c20b03a 	or	r16,r3,r16
    b3fc:	1080fcc4 	addi	r2,r2,1011
    b400:	00abc83a 	sub	r21,zero,r2
    b404:	0027883a 	mov	r19,zero
    b408:	0013883a 	mov	r9,zero
    b40c:	003f9106 	br	b254 <__alt_data_end+0xfffeb254>
    b410:	3446b03a 	or	r3,r6,r17
    b414:	18001f1e 	bne	r3,zero,b494 <__divdf3+0x2b8>
    b418:	0023883a 	mov	r17,zero
    b41c:	0011883a 	mov	r8,zero
    b420:	01c00084 	movi	r7,2
    b424:	003f9d06 	br	b29c <__alt_data_end+0xfffeb29c>
    b428:	3446b03a 	or	r3,r6,r17
    b42c:	18001526 	beq	r3,zero,b484 <__divdf3+0x2a8>
    b430:	88011b26 	beq	r17,zero,b8a0 <__divdf3+0x6c4>
    b434:	8809883a 	mov	r4,r17
    b438:	d9800315 	stw	r6,12(sp)
    b43c:	da400115 	stw	r9,4(sp)
    b440:	000cf340 	call	cf34 <__clzsi2>
    b444:	d9800317 	ldw	r6,12(sp)
    b448:	da400117 	ldw	r9,4(sp)
    b44c:	113ffd44 	addi	r4,r2,-11
    b450:	00c00704 	movi	r3,28
    b454:	19010e16 	blt	r3,r4,b890 <__divdf3+0x6b4>
    b458:	00c00744 	movi	r3,29
    b45c:	123ffe04 	addi	r8,r2,-8
    b460:	1907c83a 	sub	r3,r3,r4
    b464:	8a22983a 	sll	r17,r17,r8
    b468:	30c6d83a 	srl	r3,r6,r3
    b46c:	3210983a 	sll	r8,r6,r8
    b470:	1c62b03a 	or	r17,r3,r17
    b474:	1080fcc4 	addi	r2,r2,1011
    b478:	0085c83a 	sub	r2,zero,r2
    b47c:	000f883a 	mov	r7,zero
    b480:	003f8606 	br	b29c <__alt_data_end+0xfffeb29c>
    b484:	0023883a 	mov	r17,zero
    b488:	0011883a 	mov	r8,zero
    b48c:	01c00044 	movi	r7,1
    b490:	003f8206 	br	b29c <__alt_data_end+0xfffeb29c>
    b494:	01c000c4 	movi	r7,3
    b498:	003f8006 	br	b29c <__alt_data_end+0xfffeb29c>
    b49c:	04c00104 	movi	r19,4
    b4a0:	0021883a 	mov	r16,zero
    b4a4:	0025883a 	mov	r18,zero
    b4a8:	02400044 	movi	r9,1
    b4ac:	003f6906 	br	b254 <__alt_data_end+0xfffeb254>
    b4b0:	04c00304 	movi	r19,12
    b4b4:	024000c4 	movi	r9,3
    b4b8:	003f6606 	br	b254 <__alt_data_end+0xfffeb254>
    b4bc:	01400434 	movhi	r5,16
    b4c0:	0007883a 	mov	r3,zero
    b4c4:	297fffc4 	addi	r5,r5,-1
    b4c8:	04bfffc4 	movi	r18,-1
    b4cc:	0081ffc4 	movi	r2,2047
    b4d0:	003fa106 	br	b358 <__alt_data_end+0xfffeb358>
    b4d4:	00c00044 	movi	r3,1
    b4d8:	1887c83a 	sub	r3,r3,r2
    b4dc:	01000e04 	movi	r4,56
    b4e0:	20c1210e 	bge	r4,r3,b968 <__divdf3+0x78c>
    b4e4:	98c0004c 	andi	r3,r19,1
    b4e8:	0005883a 	mov	r2,zero
    b4ec:	000b883a 	mov	r5,zero
    b4f0:	0025883a 	mov	r18,zero
    b4f4:	003f9806 	br	b358 <__alt_data_end+0xfffeb358>
    b4f8:	8c00fd36 	bltu	r17,r16,b8f0 <__divdf3+0x714>
    b4fc:	8440fb26 	beq	r16,r17,b8ec <__divdf3+0x710>
    b500:	8007883a 	mov	r3,r16
    b504:	ad7fffc4 	addi	r21,r21,-1
    b508:	0021883a 	mov	r16,zero
    b50c:	4004d63a 	srli	r2,r8,24
    b510:	8822923a 	slli	r17,r17,8
    b514:	1809883a 	mov	r4,r3
    b518:	402c923a 	slli	r22,r8,8
    b51c:	88b8b03a 	or	fp,r17,r2
    b520:	e028d43a 	srli	r20,fp,16
    b524:	d8c00015 	stw	r3,0(sp)
    b528:	e5ffffcc 	andi	r23,fp,65535
    b52c:	a00b883a 	mov	r5,r20
    b530:	000a8740 	call	a874 <__udivsi3>
    b534:	d8c00017 	ldw	r3,0(sp)
    b538:	a00b883a 	mov	r5,r20
    b53c:	d8800315 	stw	r2,12(sp)
    b540:	1809883a 	mov	r4,r3
    b544:	000a8d80 	call	a8d8 <__umodsi3>
    b548:	d9800317 	ldw	r6,12(sp)
    b54c:	1006943a 	slli	r3,r2,16
    b550:	9004d43a 	srli	r2,r18,16
    b554:	b9a3383a 	mul	r17,r23,r6
    b558:	10c4b03a 	or	r2,r2,r3
    b55c:	1440062e 	bgeu	r2,r17,b578 <__divdf3+0x39c>
    b560:	1705883a 	add	r2,r2,fp
    b564:	30ffffc4 	addi	r3,r6,-1
    b568:	1700ee36 	bltu	r2,fp,b924 <__divdf3+0x748>
    b56c:	1440ed2e 	bgeu	r2,r17,b924 <__divdf3+0x748>
    b570:	31bfff84 	addi	r6,r6,-2
    b574:	1705883a 	add	r2,r2,fp
    b578:	1463c83a 	sub	r17,r2,r17
    b57c:	a00b883a 	mov	r5,r20
    b580:	8809883a 	mov	r4,r17
    b584:	d9800315 	stw	r6,12(sp)
    b588:	000a8740 	call	a874 <__udivsi3>
    b58c:	a00b883a 	mov	r5,r20
    b590:	8809883a 	mov	r4,r17
    b594:	d8800215 	stw	r2,8(sp)
    b598:	000a8d80 	call	a8d8 <__umodsi3>
    b59c:	d9c00217 	ldw	r7,8(sp)
    b5a0:	1004943a 	slli	r2,r2,16
    b5a4:	94bfffcc 	andi	r18,r18,65535
    b5a8:	b9d1383a 	mul	r8,r23,r7
    b5ac:	90a4b03a 	or	r18,r18,r2
    b5b0:	d9800317 	ldw	r6,12(sp)
    b5b4:	9200062e 	bgeu	r18,r8,b5d0 <__divdf3+0x3f4>
    b5b8:	9725883a 	add	r18,r18,fp
    b5bc:	38bfffc4 	addi	r2,r7,-1
    b5c0:	9700d636 	bltu	r18,fp,b91c <__divdf3+0x740>
    b5c4:	9200d52e 	bgeu	r18,r8,b91c <__divdf3+0x740>
    b5c8:	39ffff84 	addi	r7,r7,-2
    b5cc:	9725883a 	add	r18,r18,fp
    b5d0:	3004943a 	slli	r2,r6,16
    b5d4:	b012d43a 	srli	r9,r22,16
    b5d8:	b1bfffcc 	andi	r6,r22,65535
    b5dc:	11e2b03a 	or	r17,r2,r7
    b5e0:	8806d43a 	srli	r3,r17,16
    b5e4:	893fffcc 	andi	r4,r17,65535
    b5e8:	218b383a 	mul	r5,r4,r6
    b5ec:	30c5383a 	mul	r2,r6,r3
    b5f0:	2249383a 	mul	r4,r4,r9
    b5f4:	280ed43a 	srli	r7,r5,16
    b5f8:	9225c83a 	sub	r18,r18,r8
    b5fc:	2089883a 	add	r4,r4,r2
    b600:	3909883a 	add	r4,r7,r4
    b604:	1a47383a 	mul	r3,r3,r9
    b608:	2080022e 	bgeu	r4,r2,b614 <__divdf3+0x438>
    b60c:	00800074 	movhi	r2,1
    b610:	1887883a 	add	r3,r3,r2
    b614:	2004d43a 	srli	r2,r4,16
    b618:	2008943a 	slli	r4,r4,16
    b61c:	297fffcc 	andi	r5,r5,65535
    b620:	10c7883a 	add	r3,r2,r3
    b624:	2149883a 	add	r4,r4,r5
    b628:	90c0a536 	bltu	r18,r3,b8c0 <__divdf3+0x6e4>
    b62c:	90c0bf26 	beq	r18,r3,b92c <__divdf3+0x750>
    b630:	90c7c83a 	sub	r3,r18,r3
    b634:	810fc83a 	sub	r7,r16,r4
    b638:	81e5803a 	cmpltu	r18,r16,r7
    b63c:	1ca5c83a 	sub	r18,r3,r18
    b640:	e480c126 	beq	fp,r18,b948 <__divdf3+0x76c>
    b644:	a00b883a 	mov	r5,r20
    b648:	9009883a 	mov	r4,r18
    b64c:	d9800315 	stw	r6,12(sp)
    b650:	d9c00215 	stw	r7,8(sp)
    b654:	da400115 	stw	r9,4(sp)
    b658:	000a8740 	call	a874 <__udivsi3>
    b65c:	a00b883a 	mov	r5,r20
    b660:	9009883a 	mov	r4,r18
    b664:	d8800015 	stw	r2,0(sp)
    b668:	000a8d80 	call	a8d8 <__umodsi3>
    b66c:	d9c00217 	ldw	r7,8(sp)
    b670:	da000017 	ldw	r8,0(sp)
    b674:	1006943a 	slli	r3,r2,16
    b678:	3804d43a 	srli	r2,r7,16
    b67c:	ba21383a 	mul	r16,r23,r8
    b680:	d9800317 	ldw	r6,12(sp)
    b684:	10c4b03a 	or	r2,r2,r3
    b688:	da400117 	ldw	r9,4(sp)
    b68c:	1400062e 	bgeu	r2,r16,b6a8 <__divdf3+0x4cc>
    b690:	1705883a 	add	r2,r2,fp
    b694:	40ffffc4 	addi	r3,r8,-1
    b698:	1700ad36 	bltu	r2,fp,b950 <__divdf3+0x774>
    b69c:	1400ac2e 	bgeu	r2,r16,b950 <__divdf3+0x774>
    b6a0:	423fff84 	addi	r8,r8,-2
    b6a4:	1705883a 	add	r2,r2,fp
    b6a8:	1421c83a 	sub	r16,r2,r16
    b6ac:	a00b883a 	mov	r5,r20
    b6b0:	8009883a 	mov	r4,r16
    b6b4:	d9800315 	stw	r6,12(sp)
    b6b8:	d9c00215 	stw	r7,8(sp)
    b6bc:	da000015 	stw	r8,0(sp)
    b6c0:	da400115 	stw	r9,4(sp)
    b6c4:	000a8740 	call	a874 <__udivsi3>
    b6c8:	8009883a 	mov	r4,r16
    b6cc:	a00b883a 	mov	r5,r20
    b6d0:	1025883a 	mov	r18,r2
    b6d4:	000a8d80 	call	a8d8 <__umodsi3>
    b6d8:	d9c00217 	ldw	r7,8(sp)
    b6dc:	1004943a 	slli	r2,r2,16
    b6e0:	bcaf383a 	mul	r23,r23,r18
    b6e4:	393fffcc 	andi	r4,r7,65535
    b6e8:	2088b03a 	or	r4,r4,r2
    b6ec:	d9800317 	ldw	r6,12(sp)
    b6f0:	da000017 	ldw	r8,0(sp)
    b6f4:	da400117 	ldw	r9,4(sp)
    b6f8:	25c0062e 	bgeu	r4,r23,b714 <__divdf3+0x538>
    b6fc:	2709883a 	add	r4,r4,fp
    b700:	90bfffc4 	addi	r2,r18,-1
    b704:	27009436 	bltu	r4,fp,b958 <__divdf3+0x77c>
    b708:	25c0932e 	bgeu	r4,r23,b958 <__divdf3+0x77c>
    b70c:	94bfff84 	addi	r18,r18,-2
    b710:	2709883a 	add	r4,r4,fp
    b714:	4004943a 	slli	r2,r8,16
    b718:	25efc83a 	sub	r23,r4,r23
    b71c:	1490b03a 	or	r8,r2,r18
    b720:	4008d43a 	srli	r4,r8,16
    b724:	40ffffcc 	andi	r3,r8,65535
    b728:	30c5383a 	mul	r2,r6,r3
    b72c:	1a47383a 	mul	r3,r3,r9
    b730:	310d383a 	mul	r6,r6,r4
    b734:	100ad43a 	srli	r5,r2,16
    b738:	4913383a 	mul	r9,r9,r4
    b73c:	1987883a 	add	r3,r3,r6
    b740:	28c7883a 	add	r3,r5,r3
    b744:	1980022e 	bgeu	r3,r6,b750 <__divdf3+0x574>
    b748:	01000074 	movhi	r4,1
    b74c:	4913883a 	add	r9,r9,r4
    b750:	1808d43a 	srli	r4,r3,16
    b754:	1806943a 	slli	r3,r3,16
    b758:	10bfffcc 	andi	r2,r2,65535
    b75c:	2253883a 	add	r9,r4,r9
    b760:	1887883a 	add	r3,r3,r2
    b764:	ba403836 	bltu	r23,r9,b848 <__divdf3+0x66c>
    b768:	ba403626 	beq	r23,r9,b844 <__divdf3+0x668>
    b76c:	42000054 	ori	r8,r8,1
    b770:	a880ffc4 	addi	r2,r21,1023
    b774:	00bf570e 	bge	zero,r2,b4d4 <__alt_data_end+0xfffeb4d4>
    b778:	40c001cc 	andi	r3,r8,7
    b77c:	18000726 	beq	r3,zero,b79c <__divdf3+0x5c0>
    b780:	40c003cc 	andi	r3,r8,15
    b784:	01000104 	movi	r4,4
    b788:	19000426 	beq	r3,r4,b79c <__divdf3+0x5c0>
    b78c:	4107883a 	add	r3,r8,r4
    b790:	1a11803a 	cmpltu	r8,r3,r8
    b794:	8a23883a 	add	r17,r17,r8
    b798:	1811883a 	mov	r8,r3
    b79c:	88c0402c 	andhi	r3,r17,256
    b7a0:	18000426 	beq	r3,zero,b7b4 <__divdf3+0x5d8>
    b7a4:	00ffc034 	movhi	r3,65280
    b7a8:	18ffffc4 	addi	r3,r3,-1
    b7ac:	a8810004 	addi	r2,r21,1024
    b7b0:	88e2703a 	and	r17,r17,r3
    b7b4:	00c1ff84 	movi	r3,2046
    b7b8:	18bee316 	blt	r3,r2,b348 <__alt_data_end+0xfffeb348>
    b7bc:	8824977a 	slli	r18,r17,29
    b7c0:	4010d0fa 	srli	r8,r8,3
    b7c4:	8822927a 	slli	r17,r17,9
    b7c8:	1081ffcc 	andi	r2,r2,2047
    b7cc:	9224b03a 	or	r18,r18,r8
    b7d0:	880ad33a 	srli	r5,r17,12
    b7d4:	98c0004c 	andi	r3,r19,1
    b7d8:	003edf06 	br	b358 <__alt_data_end+0xfffeb358>
    b7dc:	8080022c 	andhi	r2,r16,8
    b7e0:	10001226 	beq	r2,zero,b82c <__divdf3+0x650>
    b7e4:	8880022c 	andhi	r2,r17,8
    b7e8:	1000101e 	bne	r2,zero,b82c <__divdf3+0x650>
    b7ec:	00800434 	movhi	r2,16
    b7f0:	89400234 	orhi	r5,r17,8
    b7f4:	10bfffc4 	addi	r2,r2,-1
    b7f8:	b007883a 	mov	r3,r22
    b7fc:	288a703a 	and	r5,r5,r2
    b800:	4025883a 	mov	r18,r8
    b804:	003f3106 	br	b4cc <__alt_data_end+0xfffeb4cc>
    b808:	008000c4 	movi	r2,3
    b80c:	3880a626 	beq	r7,r2,baa8 <__divdf3+0x8cc>
    b810:	00800044 	movi	r2,1
    b814:	3880521e 	bne	r7,r2,b960 <__divdf3+0x784>
    b818:	b807883a 	mov	r3,r23
    b81c:	0005883a 	mov	r2,zero
    b820:	000b883a 	mov	r5,zero
    b824:	0025883a 	mov	r18,zero
    b828:	003ecb06 	br	b358 <__alt_data_end+0xfffeb358>
    b82c:	00800434 	movhi	r2,16
    b830:	81400234 	orhi	r5,r16,8
    b834:	10bfffc4 	addi	r2,r2,-1
    b838:	a007883a 	mov	r3,r20
    b83c:	288a703a 	and	r5,r5,r2
    b840:	003f2206 	br	b4cc <__alt_data_end+0xfffeb4cc>
    b844:	183fca26 	beq	r3,zero,b770 <__alt_data_end+0xfffeb770>
    b848:	e5ef883a 	add	r23,fp,r23
    b84c:	40bfffc4 	addi	r2,r8,-1
    b850:	bf00392e 	bgeu	r23,fp,b938 <__divdf3+0x75c>
    b854:	1011883a 	mov	r8,r2
    b858:	ba7fc41e 	bne	r23,r9,b76c <__alt_data_end+0xfffeb76c>
    b85c:	b0ffc31e 	bne	r22,r3,b76c <__alt_data_end+0xfffeb76c>
    b860:	003fc306 	br	b770 <__alt_data_end+0xfffeb770>
    b864:	143ff604 	addi	r16,r2,-40
    b868:	9c20983a 	sll	r16,r19,r16
    b86c:	0025883a 	mov	r18,zero
    b870:	003ee206 	br	b3fc <__alt_data_end+0xfffeb3fc>
    b874:	d9800315 	stw	r6,12(sp)
    b878:	d9c00215 	stw	r7,8(sp)
    b87c:	000cf340 	call	cf34 <__clzsi2>
    b880:	10800804 	addi	r2,r2,32
    b884:	d9c00217 	ldw	r7,8(sp)
    b888:	d9800317 	ldw	r6,12(sp)
    b88c:	003ed106 	br	b3d4 <__alt_data_end+0xfffeb3d4>
    b890:	147ff604 	addi	r17,r2,-40
    b894:	3462983a 	sll	r17,r6,r17
    b898:	0011883a 	mov	r8,zero
    b89c:	003ef506 	br	b474 <__alt_data_end+0xfffeb474>
    b8a0:	3009883a 	mov	r4,r6
    b8a4:	d9800315 	stw	r6,12(sp)
    b8a8:	da400115 	stw	r9,4(sp)
    b8ac:	000cf340 	call	cf34 <__clzsi2>
    b8b0:	10800804 	addi	r2,r2,32
    b8b4:	da400117 	ldw	r9,4(sp)
    b8b8:	d9800317 	ldw	r6,12(sp)
    b8bc:	003ee306 	br	b44c <__alt_data_end+0xfffeb44c>
    b8c0:	85a1883a 	add	r16,r16,r22
    b8c4:	8585803a 	cmpltu	r2,r16,r22
    b8c8:	1705883a 	add	r2,r2,fp
    b8cc:	14a5883a 	add	r18,r2,r18
    b8d0:	88bfffc4 	addi	r2,r17,-1
    b8d4:	e4800c2e 	bgeu	fp,r18,b908 <__divdf3+0x72c>
    b8d8:	90c03e36 	bltu	r18,r3,b9d4 <__divdf3+0x7f8>
    b8dc:	1c806926 	beq	r3,r18,ba84 <__divdf3+0x8a8>
    b8e0:	90c7c83a 	sub	r3,r18,r3
    b8e4:	1023883a 	mov	r17,r2
    b8e8:	003f5206 	br	b634 <__alt_data_end+0xfffeb634>
    b8ec:	923f0436 	bltu	r18,r8,b500 <__alt_data_end+0xfffeb500>
    b8f0:	800897fa 	slli	r4,r16,31
    b8f4:	9004d07a 	srli	r2,r18,1
    b8f8:	8006d07a 	srli	r3,r16,1
    b8fc:	902097fa 	slli	r16,r18,31
    b900:	20a4b03a 	or	r18,r4,r2
    b904:	003f0106 	br	b50c <__alt_data_end+0xfffeb50c>
    b908:	e4bff51e 	bne	fp,r18,b8e0 <__alt_data_end+0xfffeb8e0>
    b90c:	85bff22e 	bgeu	r16,r22,b8d8 <__alt_data_end+0xfffeb8d8>
    b910:	e0c7c83a 	sub	r3,fp,r3
    b914:	1023883a 	mov	r17,r2
    b918:	003f4606 	br	b634 <__alt_data_end+0xfffeb634>
    b91c:	100f883a 	mov	r7,r2
    b920:	003f2b06 	br	b5d0 <__alt_data_end+0xfffeb5d0>
    b924:	180d883a 	mov	r6,r3
    b928:	003f1306 	br	b578 <__alt_data_end+0xfffeb578>
    b92c:	813fe436 	bltu	r16,r4,b8c0 <__alt_data_end+0xfffeb8c0>
    b930:	0007883a 	mov	r3,zero
    b934:	003f3f06 	br	b634 <__alt_data_end+0xfffeb634>
    b938:	ba402c36 	bltu	r23,r9,b9ec <__divdf3+0x810>
    b93c:	4dc05426 	beq	r9,r23,ba90 <__divdf3+0x8b4>
    b940:	1011883a 	mov	r8,r2
    b944:	003f8906 	br	b76c <__alt_data_end+0xfffeb76c>
    b948:	023fffc4 	movi	r8,-1
    b94c:	003f8806 	br	b770 <__alt_data_end+0xfffeb770>
    b950:	1811883a 	mov	r8,r3
    b954:	003f5406 	br	b6a8 <__alt_data_end+0xfffeb6a8>
    b958:	1025883a 	mov	r18,r2
    b95c:	003f6d06 	br	b714 <__alt_data_end+0xfffeb714>
    b960:	b827883a 	mov	r19,r23
    b964:	003f8206 	br	b770 <__alt_data_end+0xfffeb770>
    b968:	010007c4 	movi	r4,31
    b96c:	20c02616 	blt	r4,r3,ba08 <__divdf3+0x82c>
    b970:	00800804 	movi	r2,32
    b974:	10c5c83a 	sub	r2,r2,r3
    b978:	888a983a 	sll	r5,r17,r2
    b97c:	40c8d83a 	srl	r4,r8,r3
    b980:	4084983a 	sll	r2,r8,r2
    b984:	88e2d83a 	srl	r17,r17,r3
    b988:	2906b03a 	or	r3,r5,r4
    b98c:	1004c03a 	cmpne	r2,r2,zero
    b990:	1886b03a 	or	r3,r3,r2
    b994:	188001cc 	andi	r2,r3,7
    b998:	10000726 	beq	r2,zero,b9b8 <__divdf3+0x7dc>
    b99c:	188003cc 	andi	r2,r3,15
    b9a0:	01000104 	movi	r4,4
    b9a4:	11000426 	beq	r2,r4,b9b8 <__divdf3+0x7dc>
    b9a8:	1805883a 	mov	r2,r3
    b9ac:	10c00104 	addi	r3,r2,4
    b9b0:	1885803a 	cmpltu	r2,r3,r2
    b9b4:	88a3883a 	add	r17,r17,r2
    b9b8:	8880202c 	andhi	r2,r17,128
    b9bc:	10002726 	beq	r2,zero,ba5c <__divdf3+0x880>
    b9c0:	98c0004c 	andi	r3,r19,1
    b9c4:	00800044 	movi	r2,1
    b9c8:	000b883a 	mov	r5,zero
    b9cc:	0025883a 	mov	r18,zero
    b9d0:	003e6106 	br	b358 <__alt_data_end+0xfffeb358>
    b9d4:	85a1883a 	add	r16,r16,r22
    b9d8:	8585803a 	cmpltu	r2,r16,r22
    b9dc:	1705883a 	add	r2,r2,fp
    b9e0:	14a5883a 	add	r18,r2,r18
    b9e4:	8c7fff84 	addi	r17,r17,-2
    b9e8:	003f1106 	br	b630 <__alt_data_end+0xfffeb630>
    b9ec:	b589883a 	add	r4,r22,r22
    b9f0:	25ad803a 	cmpltu	r22,r4,r22
    b9f4:	b739883a 	add	fp,r22,fp
    b9f8:	40bfff84 	addi	r2,r8,-2
    b9fc:	bf2f883a 	add	r23,r23,fp
    ba00:	202d883a 	mov	r22,r4
    ba04:	003f9306 	br	b854 <__alt_data_end+0xfffeb854>
    ba08:	013ff844 	movi	r4,-31
    ba0c:	2085c83a 	sub	r2,r4,r2
    ba10:	8888d83a 	srl	r4,r17,r2
    ba14:	00800804 	movi	r2,32
    ba18:	18802126 	beq	r3,r2,baa0 <__divdf3+0x8c4>
    ba1c:	00801004 	movi	r2,64
    ba20:	10c5c83a 	sub	r2,r2,r3
    ba24:	8884983a 	sll	r2,r17,r2
    ba28:	1204b03a 	or	r2,r2,r8
    ba2c:	1004c03a 	cmpne	r2,r2,zero
    ba30:	2084b03a 	or	r2,r4,r2
    ba34:	144001cc 	andi	r17,r2,7
    ba38:	88000d1e 	bne	r17,zero,ba70 <__divdf3+0x894>
    ba3c:	000b883a 	mov	r5,zero
    ba40:	1024d0fa 	srli	r18,r2,3
    ba44:	98c0004c 	andi	r3,r19,1
    ba48:	0005883a 	mov	r2,zero
    ba4c:	9464b03a 	or	r18,r18,r17
    ba50:	003e4106 	br	b358 <__alt_data_end+0xfffeb358>
    ba54:	1007883a 	mov	r3,r2
    ba58:	0023883a 	mov	r17,zero
    ba5c:	880a927a 	slli	r5,r17,9
    ba60:	1805883a 	mov	r2,r3
    ba64:	8822977a 	slli	r17,r17,29
    ba68:	280ad33a 	srli	r5,r5,12
    ba6c:	003ff406 	br	ba40 <__alt_data_end+0xfffeba40>
    ba70:	10c003cc 	andi	r3,r2,15
    ba74:	01000104 	movi	r4,4
    ba78:	193ff626 	beq	r3,r4,ba54 <__alt_data_end+0xfffeba54>
    ba7c:	0023883a 	mov	r17,zero
    ba80:	003fca06 	br	b9ac <__alt_data_end+0xfffeb9ac>
    ba84:	813fd336 	bltu	r16,r4,b9d4 <__alt_data_end+0xfffeb9d4>
    ba88:	1023883a 	mov	r17,r2
    ba8c:	003fa806 	br	b930 <__alt_data_end+0xfffeb930>
    ba90:	b0ffd636 	bltu	r22,r3,b9ec <__alt_data_end+0xfffeb9ec>
    ba94:	1011883a 	mov	r8,r2
    ba98:	b0ff341e 	bne	r22,r3,b76c <__alt_data_end+0xfffeb76c>
    ba9c:	003f3406 	br	b770 <__alt_data_end+0xfffeb770>
    baa0:	0005883a 	mov	r2,zero
    baa4:	003fe006 	br	ba28 <__alt_data_end+0xfffeba28>
    baa8:	00800434 	movhi	r2,16
    baac:	89400234 	orhi	r5,r17,8
    bab0:	10bfffc4 	addi	r2,r2,-1
    bab4:	b807883a 	mov	r3,r23
    bab8:	288a703a 	and	r5,r5,r2
    babc:	4025883a 	mov	r18,r8
    bac0:	003e8206 	br	b4cc <__alt_data_end+0xfffeb4cc>

0000bac4 <__eqdf2>:
    bac4:	2804d53a 	srli	r2,r5,20
    bac8:	3806d53a 	srli	r3,r7,20
    bacc:	02000434 	movhi	r8,16
    bad0:	423fffc4 	addi	r8,r8,-1
    bad4:	1081ffcc 	andi	r2,r2,2047
    bad8:	0281ffc4 	movi	r10,2047
    badc:	2a12703a 	and	r9,r5,r8
    bae0:	18c1ffcc 	andi	r3,r3,2047
    bae4:	3a10703a 	and	r8,r7,r8
    bae8:	280ad7fa 	srli	r5,r5,31
    baec:	380ed7fa 	srli	r7,r7,31
    baf0:	12801026 	beq	r2,r10,bb34 <__eqdf2+0x70>
    baf4:	0281ffc4 	movi	r10,2047
    baf8:	1a800a26 	beq	r3,r10,bb24 <__eqdf2+0x60>
    bafc:	10c00226 	beq	r2,r3,bb08 <__eqdf2+0x44>
    bb00:	00800044 	movi	r2,1
    bb04:	f800283a 	ret
    bb08:	4a3ffd1e 	bne	r9,r8,bb00 <__alt_data_end+0xfffebb00>
    bb0c:	21bffc1e 	bne	r4,r6,bb00 <__alt_data_end+0xfffebb00>
    bb10:	29c00c26 	beq	r5,r7,bb44 <__eqdf2+0x80>
    bb14:	103ffa1e 	bne	r2,zero,bb00 <__alt_data_end+0xfffebb00>
    bb18:	2244b03a 	or	r2,r4,r9
    bb1c:	1004c03a 	cmpne	r2,r2,zero
    bb20:	f800283a 	ret
    bb24:	3214b03a 	or	r10,r6,r8
    bb28:	503ff426 	beq	r10,zero,bafc <__alt_data_end+0xfffebafc>
    bb2c:	00800044 	movi	r2,1
    bb30:	f800283a 	ret
    bb34:	2254b03a 	or	r10,r4,r9
    bb38:	503fee26 	beq	r10,zero,baf4 <__alt_data_end+0xfffebaf4>
    bb3c:	00800044 	movi	r2,1
    bb40:	f800283a 	ret
    bb44:	0005883a 	mov	r2,zero
    bb48:	f800283a 	ret

0000bb4c <__gedf2>:
    bb4c:	2804d53a 	srli	r2,r5,20
    bb50:	3806d53a 	srli	r3,r7,20
    bb54:	02000434 	movhi	r8,16
    bb58:	423fffc4 	addi	r8,r8,-1
    bb5c:	1081ffcc 	andi	r2,r2,2047
    bb60:	0241ffc4 	movi	r9,2047
    bb64:	2a14703a 	and	r10,r5,r8
    bb68:	18c1ffcc 	andi	r3,r3,2047
    bb6c:	3a10703a 	and	r8,r7,r8
    bb70:	280ad7fa 	srli	r5,r5,31
    bb74:	380ed7fa 	srli	r7,r7,31
    bb78:	12401d26 	beq	r2,r9,bbf0 <__gedf2+0xa4>
    bb7c:	0241ffc4 	movi	r9,2047
    bb80:	1a401226 	beq	r3,r9,bbcc <__gedf2+0x80>
    bb84:	1000081e 	bne	r2,zero,bba8 <__gedf2+0x5c>
    bb88:	2296b03a 	or	r11,r4,r10
    bb8c:	5813003a 	cmpeq	r9,r11,zero
    bb90:	1800091e 	bne	r3,zero,bbb8 <__gedf2+0x6c>
    bb94:	3218b03a 	or	r12,r6,r8
    bb98:	6000071e 	bne	r12,zero,bbb8 <__gedf2+0x6c>
    bb9c:	0005883a 	mov	r2,zero
    bba0:	5800101e 	bne	r11,zero,bbe4 <__gedf2+0x98>
    bba4:	f800283a 	ret
    bba8:	18000c1e 	bne	r3,zero,bbdc <__gedf2+0x90>
    bbac:	3212b03a 	or	r9,r6,r8
    bbb0:	48000c26 	beq	r9,zero,bbe4 <__gedf2+0x98>
    bbb4:	0013883a 	mov	r9,zero
    bbb8:	39c03fcc 	andi	r7,r7,255
    bbbc:	48000826 	beq	r9,zero,bbe0 <__gedf2+0x94>
    bbc0:	38000926 	beq	r7,zero,bbe8 <__gedf2+0x9c>
    bbc4:	00800044 	movi	r2,1
    bbc8:	f800283a 	ret
    bbcc:	3212b03a 	or	r9,r6,r8
    bbd0:	483fec26 	beq	r9,zero,bb84 <__alt_data_end+0xfffebb84>
    bbd4:	00bfff84 	movi	r2,-2
    bbd8:	f800283a 	ret
    bbdc:	39c03fcc 	andi	r7,r7,255
    bbe0:	29c00626 	beq	r5,r7,bbfc <__gedf2+0xb0>
    bbe4:	283ff726 	beq	r5,zero,bbc4 <__alt_data_end+0xfffebbc4>
    bbe8:	00bfffc4 	movi	r2,-1
    bbec:	f800283a 	ret
    bbf0:	2292b03a 	or	r9,r4,r10
    bbf4:	483fe126 	beq	r9,zero,bb7c <__alt_data_end+0xfffebb7c>
    bbf8:	003ff606 	br	bbd4 <__alt_data_end+0xfffebbd4>
    bbfc:	18bff916 	blt	r3,r2,bbe4 <__alt_data_end+0xfffebbe4>
    bc00:	10c00316 	blt	r2,r3,bc10 <__gedf2+0xc4>
    bc04:	42bff736 	bltu	r8,r10,bbe4 <__alt_data_end+0xfffebbe4>
    bc08:	52000326 	beq	r10,r8,bc18 <__gedf2+0xcc>
    bc0c:	5200042e 	bgeu	r10,r8,bc20 <__gedf2+0xd4>
    bc10:	283fec1e 	bne	r5,zero,bbc4 <__alt_data_end+0xfffebbc4>
    bc14:	003ff406 	br	bbe8 <__alt_data_end+0xfffebbe8>
    bc18:	313ff236 	bltu	r6,r4,bbe4 <__alt_data_end+0xfffebbe4>
    bc1c:	21bffc36 	bltu	r4,r6,bc10 <__alt_data_end+0xfffebc10>
    bc20:	0005883a 	mov	r2,zero
    bc24:	f800283a 	ret

0000bc28 <__ledf2>:
    bc28:	2804d53a 	srli	r2,r5,20
    bc2c:	3810d53a 	srli	r8,r7,20
    bc30:	00c00434 	movhi	r3,16
    bc34:	18ffffc4 	addi	r3,r3,-1
    bc38:	1081ffcc 	andi	r2,r2,2047
    bc3c:	0241ffc4 	movi	r9,2047
    bc40:	28d4703a 	and	r10,r5,r3
    bc44:	4201ffcc 	andi	r8,r8,2047
    bc48:	38c6703a 	and	r3,r7,r3
    bc4c:	280ad7fa 	srli	r5,r5,31
    bc50:	380ed7fa 	srli	r7,r7,31
    bc54:	12401f26 	beq	r2,r9,bcd4 <__ledf2+0xac>
    bc58:	0241ffc4 	movi	r9,2047
    bc5c:	42401426 	beq	r8,r9,bcb0 <__ledf2+0x88>
    bc60:	1000091e 	bne	r2,zero,bc88 <__ledf2+0x60>
    bc64:	2296b03a 	or	r11,r4,r10
    bc68:	5813003a 	cmpeq	r9,r11,zero
    bc6c:	29403fcc 	andi	r5,r5,255
    bc70:	40000a1e 	bne	r8,zero,bc9c <__ledf2+0x74>
    bc74:	30d8b03a 	or	r12,r6,r3
    bc78:	6000081e 	bne	r12,zero,bc9c <__ledf2+0x74>
    bc7c:	0005883a 	mov	r2,zero
    bc80:	5800111e 	bne	r11,zero,bcc8 <__ledf2+0xa0>
    bc84:	f800283a 	ret
    bc88:	29403fcc 	andi	r5,r5,255
    bc8c:	40000c1e 	bne	r8,zero,bcc0 <__ledf2+0x98>
    bc90:	30d2b03a 	or	r9,r6,r3
    bc94:	48000c26 	beq	r9,zero,bcc8 <__ledf2+0xa0>
    bc98:	0013883a 	mov	r9,zero
    bc9c:	39c03fcc 	andi	r7,r7,255
    bca0:	48000826 	beq	r9,zero,bcc4 <__ledf2+0x9c>
    bca4:	38001126 	beq	r7,zero,bcec <__ledf2+0xc4>
    bca8:	00800044 	movi	r2,1
    bcac:	f800283a 	ret
    bcb0:	30d2b03a 	or	r9,r6,r3
    bcb4:	483fea26 	beq	r9,zero,bc60 <__alt_data_end+0xfffebc60>
    bcb8:	00800084 	movi	r2,2
    bcbc:	f800283a 	ret
    bcc0:	39c03fcc 	andi	r7,r7,255
    bcc4:	39400726 	beq	r7,r5,bce4 <__ledf2+0xbc>
    bcc8:	2800081e 	bne	r5,zero,bcec <__ledf2+0xc4>
    bccc:	00800044 	movi	r2,1
    bcd0:	f800283a 	ret
    bcd4:	2292b03a 	or	r9,r4,r10
    bcd8:	483fdf26 	beq	r9,zero,bc58 <__alt_data_end+0xfffebc58>
    bcdc:	00800084 	movi	r2,2
    bce0:	f800283a 	ret
    bce4:	4080030e 	bge	r8,r2,bcf4 <__ledf2+0xcc>
    bce8:	383fef26 	beq	r7,zero,bca8 <__alt_data_end+0xfffebca8>
    bcec:	00bfffc4 	movi	r2,-1
    bcf0:	f800283a 	ret
    bcf4:	123feb16 	blt	r2,r8,bca4 <__alt_data_end+0xfffebca4>
    bcf8:	1abff336 	bltu	r3,r10,bcc8 <__alt_data_end+0xfffebcc8>
    bcfc:	50c00326 	beq	r10,r3,bd0c <__ledf2+0xe4>
    bd00:	50c0042e 	bgeu	r10,r3,bd14 <__ledf2+0xec>
    bd04:	283fe81e 	bne	r5,zero,bca8 <__alt_data_end+0xfffebca8>
    bd08:	003ff806 	br	bcec <__alt_data_end+0xfffebcec>
    bd0c:	313fee36 	bltu	r6,r4,bcc8 <__alt_data_end+0xfffebcc8>
    bd10:	21bffc36 	bltu	r4,r6,bd04 <__alt_data_end+0xfffebd04>
    bd14:	0005883a 	mov	r2,zero
    bd18:	f800283a 	ret

0000bd1c <__muldf3>:
    bd1c:	defff304 	addi	sp,sp,-52
    bd20:	2804d53a 	srli	r2,r5,20
    bd24:	dd800915 	stw	r22,36(sp)
    bd28:	282cd7fa 	srli	r22,r5,31
    bd2c:	dc000315 	stw	r16,12(sp)
    bd30:	04000434 	movhi	r16,16
    bd34:	dd400815 	stw	r21,32(sp)
    bd38:	dc800515 	stw	r18,20(sp)
    bd3c:	843fffc4 	addi	r16,r16,-1
    bd40:	dfc00c15 	stw	ra,48(sp)
    bd44:	df000b15 	stw	fp,44(sp)
    bd48:	ddc00a15 	stw	r23,40(sp)
    bd4c:	dd000715 	stw	r20,28(sp)
    bd50:	dcc00615 	stw	r19,24(sp)
    bd54:	dc400415 	stw	r17,16(sp)
    bd58:	1481ffcc 	andi	r18,r2,2047
    bd5c:	2c20703a 	and	r16,r5,r16
    bd60:	b02b883a 	mov	r21,r22
    bd64:	b2403fcc 	andi	r9,r22,255
    bd68:	90006026 	beq	r18,zero,beec <__muldf3+0x1d0>
    bd6c:	0081ffc4 	movi	r2,2047
    bd70:	2029883a 	mov	r20,r4
    bd74:	90803626 	beq	r18,r2,be50 <__muldf3+0x134>
    bd78:	80800434 	orhi	r2,r16,16
    bd7c:	100490fa 	slli	r2,r2,3
    bd80:	2020d77a 	srli	r16,r4,29
    bd84:	202890fa 	slli	r20,r4,3
    bd88:	94bf0044 	addi	r18,r18,-1023
    bd8c:	80a0b03a 	or	r16,r16,r2
    bd90:	0027883a 	mov	r19,zero
    bd94:	0039883a 	mov	fp,zero
    bd98:	3804d53a 	srli	r2,r7,20
    bd9c:	382ed7fa 	srli	r23,r7,31
    bda0:	04400434 	movhi	r17,16
    bda4:	8c7fffc4 	addi	r17,r17,-1
    bda8:	1081ffcc 	andi	r2,r2,2047
    bdac:	3011883a 	mov	r8,r6
    bdb0:	3c62703a 	and	r17,r7,r17
    bdb4:	ba803fcc 	andi	r10,r23,255
    bdb8:	10006d26 	beq	r2,zero,bf70 <__muldf3+0x254>
    bdbc:	00c1ffc4 	movi	r3,2047
    bdc0:	10c06526 	beq	r2,r3,bf58 <__muldf3+0x23c>
    bdc4:	88c00434 	orhi	r3,r17,16
    bdc8:	180690fa 	slli	r3,r3,3
    bdcc:	3022d77a 	srli	r17,r6,29
    bdd0:	301090fa 	slli	r8,r6,3
    bdd4:	10bf0044 	addi	r2,r2,-1023
    bdd8:	88e2b03a 	or	r17,r17,r3
    bddc:	000b883a 	mov	r5,zero
    bde0:	9085883a 	add	r2,r18,r2
    bde4:	2cc8b03a 	or	r4,r5,r19
    bde8:	00c003c4 	movi	r3,15
    bdec:	bdacf03a 	xor	r22,r23,r22
    bdf0:	12c00044 	addi	r11,r2,1
    bdf4:	19009936 	bltu	r3,r4,c05c <__muldf3+0x340>
    bdf8:	200890ba 	slli	r4,r4,2
    bdfc:	00c00074 	movhi	r3,1
    be00:	18ef8404 	addi	r3,r3,-16880
    be04:	20c9883a 	add	r4,r4,r3
    be08:	20c00017 	ldw	r3,0(r4)
    be0c:	1800683a 	jmp	r3
    be10:	0000c05c 	xori	zero,zero,769
    be14:	0000be70 	cmpltui	zero,zero,761
    be18:	0000be70 	cmpltui	zero,zero,761
    be1c:	0000be6c 	andhi	zero,zero,761
    be20:	0000c038 	rdprs	zero,zero,768
    be24:	0000c038 	rdprs	zero,zero,768
    be28:	0000c020 	cmpeqi	zero,zero,768
    be2c:	0000be6c 	andhi	zero,zero,761
    be30:	0000c038 	rdprs	zero,zero,768
    be34:	0000c020 	cmpeqi	zero,zero,768
    be38:	0000c038 	rdprs	zero,zero,768
    be3c:	0000be6c 	andhi	zero,zero,761
    be40:	0000c048 	cmpgei	zero,zero,769
    be44:	0000c048 	cmpgei	zero,zero,769
    be48:	0000c048 	cmpgei	zero,zero,769
    be4c:	0000c264 	muli	zero,zero,777
    be50:	2404b03a 	or	r2,r4,r16
    be54:	10006f1e 	bne	r2,zero,c014 <__muldf3+0x2f8>
    be58:	04c00204 	movi	r19,8
    be5c:	0021883a 	mov	r16,zero
    be60:	0029883a 	mov	r20,zero
    be64:	07000084 	movi	fp,2
    be68:	003fcb06 	br	bd98 <__alt_data_end+0xfffebd98>
    be6c:	502d883a 	mov	r22,r10
    be70:	00800084 	movi	r2,2
    be74:	28805726 	beq	r5,r2,bfd4 <__muldf3+0x2b8>
    be78:	008000c4 	movi	r2,3
    be7c:	28816626 	beq	r5,r2,c418 <__muldf3+0x6fc>
    be80:	00800044 	movi	r2,1
    be84:	2881411e 	bne	r5,r2,c38c <__muldf3+0x670>
    be88:	b02b883a 	mov	r21,r22
    be8c:	0005883a 	mov	r2,zero
    be90:	000b883a 	mov	r5,zero
    be94:	0029883a 	mov	r20,zero
    be98:	1004953a 	slli	r2,r2,20
    be9c:	a8c03fcc 	andi	r3,r21,255
    bea0:	04400434 	movhi	r17,16
    bea4:	8c7fffc4 	addi	r17,r17,-1
    bea8:	180697fa 	slli	r3,r3,31
    beac:	2c4a703a 	and	r5,r5,r17
    beb0:	288ab03a 	or	r5,r5,r2
    beb4:	28c6b03a 	or	r3,r5,r3
    beb8:	a005883a 	mov	r2,r20
    bebc:	dfc00c17 	ldw	ra,48(sp)
    bec0:	df000b17 	ldw	fp,44(sp)
    bec4:	ddc00a17 	ldw	r23,40(sp)
    bec8:	dd800917 	ldw	r22,36(sp)
    becc:	dd400817 	ldw	r21,32(sp)
    bed0:	dd000717 	ldw	r20,28(sp)
    bed4:	dcc00617 	ldw	r19,24(sp)
    bed8:	dc800517 	ldw	r18,20(sp)
    bedc:	dc400417 	ldw	r17,16(sp)
    bee0:	dc000317 	ldw	r16,12(sp)
    bee4:	dec00d04 	addi	sp,sp,52
    bee8:	f800283a 	ret
    beec:	2404b03a 	or	r2,r4,r16
    bef0:	2027883a 	mov	r19,r4
    bef4:	10004226 	beq	r2,zero,c000 <__muldf3+0x2e4>
    bef8:	8000fc26 	beq	r16,zero,c2ec <__muldf3+0x5d0>
    befc:	8009883a 	mov	r4,r16
    bf00:	d9800215 	stw	r6,8(sp)
    bf04:	d9c00015 	stw	r7,0(sp)
    bf08:	da400115 	stw	r9,4(sp)
    bf0c:	000cf340 	call	cf34 <__clzsi2>
    bf10:	d9800217 	ldw	r6,8(sp)
    bf14:	d9c00017 	ldw	r7,0(sp)
    bf18:	da400117 	ldw	r9,4(sp)
    bf1c:	113ffd44 	addi	r4,r2,-11
    bf20:	00c00704 	movi	r3,28
    bf24:	1900ed16 	blt	r3,r4,c2dc <__muldf3+0x5c0>
    bf28:	00c00744 	movi	r3,29
    bf2c:	147ffe04 	addi	r17,r2,-8
    bf30:	1907c83a 	sub	r3,r3,r4
    bf34:	8460983a 	sll	r16,r16,r17
    bf38:	98c6d83a 	srl	r3,r19,r3
    bf3c:	9c68983a 	sll	r20,r19,r17
    bf40:	1c20b03a 	or	r16,r3,r16
    bf44:	1080fcc4 	addi	r2,r2,1011
    bf48:	00a5c83a 	sub	r18,zero,r2
    bf4c:	0027883a 	mov	r19,zero
    bf50:	0039883a 	mov	fp,zero
    bf54:	003f9006 	br	bd98 <__alt_data_end+0xfffebd98>
    bf58:	3446b03a 	or	r3,r6,r17
    bf5c:	1800261e 	bne	r3,zero,bff8 <__muldf3+0x2dc>
    bf60:	0023883a 	mov	r17,zero
    bf64:	0011883a 	mov	r8,zero
    bf68:	01400084 	movi	r5,2
    bf6c:	003f9c06 	br	bde0 <__alt_data_end+0xfffebde0>
    bf70:	3446b03a 	or	r3,r6,r17
    bf74:	18001c26 	beq	r3,zero,bfe8 <__muldf3+0x2cc>
    bf78:	8800ce26 	beq	r17,zero,c2b4 <__muldf3+0x598>
    bf7c:	8809883a 	mov	r4,r17
    bf80:	d9800215 	stw	r6,8(sp)
    bf84:	da400115 	stw	r9,4(sp)
    bf88:	da800015 	stw	r10,0(sp)
    bf8c:	000cf340 	call	cf34 <__clzsi2>
    bf90:	d9800217 	ldw	r6,8(sp)
    bf94:	da400117 	ldw	r9,4(sp)
    bf98:	da800017 	ldw	r10,0(sp)
    bf9c:	113ffd44 	addi	r4,r2,-11
    bfa0:	00c00704 	movi	r3,28
    bfa4:	1900bf16 	blt	r3,r4,c2a4 <__muldf3+0x588>
    bfa8:	00c00744 	movi	r3,29
    bfac:	123ffe04 	addi	r8,r2,-8
    bfb0:	1907c83a 	sub	r3,r3,r4
    bfb4:	8a22983a 	sll	r17,r17,r8
    bfb8:	30c6d83a 	srl	r3,r6,r3
    bfbc:	3210983a 	sll	r8,r6,r8
    bfc0:	1c62b03a 	or	r17,r3,r17
    bfc4:	1080fcc4 	addi	r2,r2,1011
    bfc8:	0085c83a 	sub	r2,zero,r2
    bfcc:	000b883a 	mov	r5,zero
    bfd0:	003f8306 	br	bde0 <__alt_data_end+0xfffebde0>
    bfd4:	b02b883a 	mov	r21,r22
    bfd8:	0081ffc4 	movi	r2,2047
    bfdc:	000b883a 	mov	r5,zero
    bfe0:	0029883a 	mov	r20,zero
    bfe4:	003fac06 	br	be98 <__alt_data_end+0xfffebe98>
    bfe8:	0023883a 	mov	r17,zero
    bfec:	0011883a 	mov	r8,zero
    bff0:	01400044 	movi	r5,1
    bff4:	003f7a06 	br	bde0 <__alt_data_end+0xfffebde0>
    bff8:	014000c4 	movi	r5,3
    bffc:	003f7806 	br	bde0 <__alt_data_end+0xfffebde0>
    c000:	04c00104 	movi	r19,4
    c004:	0021883a 	mov	r16,zero
    c008:	0029883a 	mov	r20,zero
    c00c:	07000044 	movi	fp,1
    c010:	003f6106 	br	bd98 <__alt_data_end+0xfffebd98>
    c014:	04c00304 	movi	r19,12
    c018:	070000c4 	movi	fp,3
    c01c:	003f5e06 	br	bd98 <__alt_data_end+0xfffebd98>
    c020:	01400434 	movhi	r5,16
    c024:	002b883a 	mov	r21,zero
    c028:	297fffc4 	addi	r5,r5,-1
    c02c:	053fffc4 	movi	r20,-1
    c030:	0081ffc4 	movi	r2,2047
    c034:	003f9806 	br	be98 <__alt_data_end+0xfffebe98>
    c038:	8023883a 	mov	r17,r16
    c03c:	a011883a 	mov	r8,r20
    c040:	e00b883a 	mov	r5,fp
    c044:	003f8a06 	br	be70 <__alt_data_end+0xfffebe70>
    c048:	8023883a 	mov	r17,r16
    c04c:	a011883a 	mov	r8,r20
    c050:	482d883a 	mov	r22,r9
    c054:	e00b883a 	mov	r5,fp
    c058:	003f8506 	br	be70 <__alt_data_end+0xfffebe70>
    c05c:	a00ad43a 	srli	r5,r20,16
    c060:	401ad43a 	srli	r13,r8,16
    c064:	a53fffcc 	andi	r20,r20,65535
    c068:	423fffcc 	andi	r8,r8,65535
    c06c:	4519383a 	mul	r12,r8,r20
    c070:	4147383a 	mul	r3,r8,r5
    c074:	6d09383a 	mul	r4,r13,r20
    c078:	600cd43a 	srli	r6,r12,16
    c07c:	2b5d383a 	mul	r14,r5,r13
    c080:	20c9883a 	add	r4,r4,r3
    c084:	310d883a 	add	r6,r6,r4
    c088:	30c0022e 	bgeu	r6,r3,c094 <__muldf3+0x378>
    c08c:	00c00074 	movhi	r3,1
    c090:	70dd883a 	add	r14,r14,r3
    c094:	8826d43a 	srli	r19,r17,16
    c098:	8bffffcc 	andi	r15,r17,65535
    c09c:	7d23383a 	mul	r17,r15,r20
    c0a0:	7949383a 	mul	r4,r15,r5
    c0a4:	9d29383a 	mul	r20,r19,r20
    c0a8:	8814d43a 	srli	r10,r17,16
    c0ac:	3012943a 	slli	r9,r6,16
    c0b0:	a129883a 	add	r20,r20,r4
    c0b4:	633fffcc 	andi	r12,r12,65535
    c0b8:	5515883a 	add	r10,r10,r20
    c0bc:	3006d43a 	srli	r3,r6,16
    c0c0:	4b13883a 	add	r9,r9,r12
    c0c4:	2ccb383a 	mul	r5,r5,r19
    c0c8:	5100022e 	bgeu	r10,r4,c0d4 <__muldf3+0x3b8>
    c0cc:	01000074 	movhi	r4,1
    c0d0:	290b883a 	add	r5,r5,r4
    c0d4:	802ad43a 	srli	r21,r16,16
    c0d8:	843fffcc 	andi	r16,r16,65535
    c0dc:	440d383a 	mul	r6,r8,r16
    c0e0:	4565383a 	mul	r18,r8,r21
    c0e4:	8349383a 	mul	r4,r16,r13
    c0e8:	500e943a 	slli	r7,r10,16
    c0ec:	3010d43a 	srli	r8,r6,16
    c0f0:	5028d43a 	srli	r20,r10,16
    c0f4:	2489883a 	add	r4,r4,r18
    c0f8:	8abfffcc 	andi	r10,r17,65535
    c0fc:	3a95883a 	add	r10,r7,r10
    c100:	4119883a 	add	r12,r8,r4
    c104:	a169883a 	add	r20,r20,r5
    c108:	1a87883a 	add	r3,r3,r10
    c10c:	6d5b383a 	mul	r13,r13,r21
    c110:	6480022e 	bgeu	r12,r18,c11c <__muldf3+0x400>
    c114:	01000074 	movhi	r4,1
    c118:	691b883a 	add	r13,r13,r4
    c11c:	7c25383a 	mul	r18,r15,r16
    c120:	7d4b383a 	mul	r5,r15,r21
    c124:	84cf383a 	mul	r7,r16,r19
    c128:	901ed43a 	srli	r15,r18,16
    c12c:	6008d43a 	srli	r4,r12,16
    c130:	6010943a 	slli	r8,r12,16
    c134:	394f883a 	add	r7,r7,r5
    c138:	333fffcc 	andi	r12,r6,65535
    c13c:	79df883a 	add	r15,r15,r7
    c140:	235b883a 	add	r13,r4,r13
    c144:	9d63383a 	mul	r17,r19,r21
    c148:	4309883a 	add	r4,r8,r12
    c14c:	7940022e 	bgeu	r15,r5,c158 <__muldf3+0x43c>
    c150:	01400074 	movhi	r5,1
    c154:	8963883a 	add	r17,r17,r5
    c158:	780a943a 	slli	r5,r15,16
    c15c:	91bfffcc 	andi	r6,r18,65535
    c160:	70c7883a 	add	r3,r14,r3
    c164:	298d883a 	add	r6,r5,r6
    c168:	1a8f803a 	cmpltu	r7,r3,r10
    c16c:	350b883a 	add	r5,r6,r20
    c170:	20c7883a 	add	r3,r4,r3
    c174:	3955883a 	add	r10,r7,r5
    c178:	1909803a 	cmpltu	r4,r3,r4
    c17c:	6a91883a 	add	r8,r13,r10
    c180:	780cd43a 	srli	r6,r15,16
    c184:	2219883a 	add	r12,r4,r8
    c188:	2d0b803a 	cmpltu	r5,r5,r20
    c18c:	51cf803a 	cmpltu	r7,r10,r7
    c190:	29ceb03a 	or	r7,r5,r7
    c194:	4351803a 	cmpltu	r8,r8,r13
    c198:	610b803a 	cmpltu	r5,r12,r4
    c19c:	4148b03a 	or	r4,r8,r5
    c1a0:	398f883a 	add	r7,r7,r6
    c1a4:	3909883a 	add	r4,r7,r4
    c1a8:	1810927a 	slli	r8,r3,9
    c1ac:	2449883a 	add	r4,r4,r17
    c1b0:	2008927a 	slli	r4,r4,9
    c1b4:	6022d5fa 	srli	r17,r12,23
    c1b8:	1806d5fa 	srli	r3,r3,23
    c1bc:	4252b03a 	or	r9,r8,r9
    c1c0:	600a927a 	slli	r5,r12,9
    c1c4:	4810c03a 	cmpne	r8,r9,zero
    c1c8:	2462b03a 	or	r17,r4,r17
    c1cc:	40c6b03a 	or	r3,r8,r3
    c1d0:	8900402c 	andhi	r4,r17,256
    c1d4:	1950b03a 	or	r8,r3,r5
    c1d8:	20000726 	beq	r4,zero,c1f8 <__muldf3+0x4dc>
    c1dc:	4006d07a 	srli	r3,r8,1
    c1e0:	880497fa 	slli	r2,r17,31
    c1e4:	4200004c 	andi	r8,r8,1
    c1e8:	8822d07a 	srli	r17,r17,1
    c1ec:	1a10b03a 	or	r8,r3,r8
    c1f0:	1210b03a 	or	r8,r2,r8
    c1f4:	5805883a 	mov	r2,r11
    c1f8:	1140ffc4 	addi	r5,r2,1023
    c1fc:	0140440e 	bge	zero,r5,c310 <__muldf3+0x5f4>
    c200:	40c001cc 	andi	r3,r8,7
    c204:	18000726 	beq	r3,zero,c224 <__muldf3+0x508>
    c208:	40c003cc 	andi	r3,r8,15
    c20c:	01000104 	movi	r4,4
    c210:	19000426 	beq	r3,r4,c224 <__muldf3+0x508>
    c214:	4107883a 	add	r3,r8,r4
    c218:	1a11803a 	cmpltu	r8,r3,r8
    c21c:	8a23883a 	add	r17,r17,r8
    c220:	1811883a 	mov	r8,r3
    c224:	88c0402c 	andhi	r3,r17,256
    c228:	18000426 	beq	r3,zero,c23c <__muldf3+0x520>
    c22c:	11410004 	addi	r5,r2,1024
    c230:	00bfc034 	movhi	r2,65280
    c234:	10bfffc4 	addi	r2,r2,-1
    c238:	88a2703a 	and	r17,r17,r2
    c23c:	0081ff84 	movi	r2,2046
    c240:	117f6416 	blt	r2,r5,bfd4 <__alt_data_end+0xfffebfd4>
    c244:	8828977a 	slli	r20,r17,29
    c248:	4010d0fa 	srli	r8,r8,3
    c24c:	8822927a 	slli	r17,r17,9
    c250:	2881ffcc 	andi	r2,r5,2047
    c254:	a228b03a 	or	r20,r20,r8
    c258:	880ad33a 	srli	r5,r17,12
    c25c:	b02b883a 	mov	r21,r22
    c260:	003f0d06 	br	be98 <__alt_data_end+0xfffebe98>
    c264:	8080022c 	andhi	r2,r16,8
    c268:	10000926 	beq	r2,zero,c290 <__muldf3+0x574>
    c26c:	8880022c 	andhi	r2,r17,8
    c270:	1000071e 	bne	r2,zero,c290 <__muldf3+0x574>
    c274:	00800434 	movhi	r2,16
    c278:	89400234 	orhi	r5,r17,8
    c27c:	10bfffc4 	addi	r2,r2,-1
    c280:	b82b883a 	mov	r21,r23
    c284:	288a703a 	and	r5,r5,r2
    c288:	4029883a 	mov	r20,r8
    c28c:	003f6806 	br	c030 <__alt_data_end+0xfffec030>
    c290:	00800434 	movhi	r2,16
    c294:	81400234 	orhi	r5,r16,8
    c298:	10bfffc4 	addi	r2,r2,-1
    c29c:	288a703a 	and	r5,r5,r2
    c2a0:	003f6306 	br	c030 <__alt_data_end+0xfffec030>
    c2a4:	147ff604 	addi	r17,r2,-40
    c2a8:	3462983a 	sll	r17,r6,r17
    c2ac:	0011883a 	mov	r8,zero
    c2b0:	003f4406 	br	bfc4 <__alt_data_end+0xfffebfc4>
    c2b4:	3009883a 	mov	r4,r6
    c2b8:	d9800215 	stw	r6,8(sp)
    c2bc:	da400115 	stw	r9,4(sp)
    c2c0:	da800015 	stw	r10,0(sp)
    c2c4:	000cf340 	call	cf34 <__clzsi2>
    c2c8:	10800804 	addi	r2,r2,32
    c2cc:	da800017 	ldw	r10,0(sp)
    c2d0:	da400117 	ldw	r9,4(sp)
    c2d4:	d9800217 	ldw	r6,8(sp)
    c2d8:	003f3006 	br	bf9c <__alt_data_end+0xfffebf9c>
    c2dc:	143ff604 	addi	r16,r2,-40
    c2e0:	9c20983a 	sll	r16,r19,r16
    c2e4:	0029883a 	mov	r20,zero
    c2e8:	003f1606 	br	bf44 <__alt_data_end+0xfffebf44>
    c2ec:	d9800215 	stw	r6,8(sp)
    c2f0:	d9c00015 	stw	r7,0(sp)
    c2f4:	da400115 	stw	r9,4(sp)
    c2f8:	000cf340 	call	cf34 <__clzsi2>
    c2fc:	10800804 	addi	r2,r2,32
    c300:	da400117 	ldw	r9,4(sp)
    c304:	d9c00017 	ldw	r7,0(sp)
    c308:	d9800217 	ldw	r6,8(sp)
    c30c:	003f0306 	br	bf1c <__alt_data_end+0xfffebf1c>
    c310:	00c00044 	movi	r3,1
    c314:	1947c83a 	sub	r3,r3,r5
    c318:	00800e04 	movi	r2,56
    c31c:	10feda16 	blt	r2,r3,be88 <__alt_data_end+0xfffebe88>
    c320:	008007c4 	movi	r2,31
    c324:	10c01b16 	blt	r2,r3,c394 <__muldf3+0x678>
    c328:	00800804 	movi	r2,32
    c32c:	10c5c83a 	sub	r2,r2,r3
    c330:	888a983a 	sll	r5,r17,r2
    c334:	40c8d83a 	srl	r4,r8,r3
    c338:	4084983a 	sll	r2,r8,r2
    c33c:	88e2d83a 	srl	r17,r17,r3
    c340:	2906b03a 	or	r3,r5,r4
    c344:	1004c03a 	cmpne	r2,r2,zero
    c348:	1886b03a 	or	r3,r3,r2
    c34c:	188001cc 	andi	r2,r3,7
    c350:	10000726 	beq	r2,zero,c370 <__muldf3+0x654>
    c354:	188003cc 	andi	r2,r3,15
    c358:	01000104 	movi	r4,4
    c35c:	11000426 	beq	r2,r4,c370 <__muldf3+0x654>
    c360:	1805883a 	mov	r2,r3
    c364:	10c00104 	addi	r3,r2,4
    c368:	1885803a 	cmpltu	r2,r3,r2
    c36c:	88a3883a 	add	r17,r17,r2
    c370:	8880202c 	andhi	r2,r17,128
    c374:	10001c26 	beq	r2,zero,c3e8 <__muldf3+0x6cc>
    c378:	b02b883a 	mov	r21,r22
    c37c:	00800044 	movi	r2,1
    c380:	000b883a 	mov	r5,zero
    c384:	0029883a 	mov	r20,zero
    c388:	003ec306 	br	be98 <__alt_data_end+0xfffebe98>
    c38c:	5805883a 	mov	r2,r11
    c390:	003f9906 	br	c1f8 <__alt_data_end+0xfffec1f8>
    c394:	00bff844 	movi	r2,-31
    c398:	1145c83a 	sub	r2,r2,r5
    c39c:	8888d83a 	srl	r4,r17,r2
    c3a0:	00800804 	movi	r2,32
    c3a4:	18801a26 	beq	r3,r2,c410 <__muldf3+0x6f4>
    c3a8:	00801004 	movi	r2,64
    c3ac:	10c5c83a 	sub	r2,r2,r3
    c3b0:	8884983a 	sll	r2,r17,r2
    c3b4:	1204b03a 	or	r2,r2,r8
    c3b8:	1004c03a 	cmpne	r2,r2,zero
    c3bc:	2084b03a 	or	r2,r4,r2
    c3c0:	144001cc 	andi	r17,r2,7
    c3c4:	88000d1e 	bne	r17,zero,c3fc <__muldf3+0x6e0>
    c3c8:	000b883a 	mov	r5,zero
    c3cc:	1028d0fa 	srli	r20,r2,3
    c3d0:	b02b883a 	mov	r21,r22
    c3d4:	0005883a 	mov	r2,zero
    c3d8:	a468b03a 	or	r20,r20,r17
    c3dc:	003eae06 	br	be98 <__alt_data_end+0xfffebe98>
    c3e0:	1007883a 	mov	r3,r2
    c3e4:	0023883a 	mov	r17,zero
    c3e8:	880a927a 	slli	r5,r17,9
    c3ec:	1805883a 	mov	r2,r3
    c3f0:	8822977a 	slli	r17,r17,29
    c3f4:	280ad33a 	srli	r5,r5,12
    c3f8:	003ff406 	br	c3cc <__alt_data_end+0xfffec3cc>
    c3fc:	10c003cc 	andi	r3,r2,15
    c400:	01000104 	movi	r4,4
    c404:	193ff626 	beq	r3,r4,c3e0 <__alt_data_end+0xfffec3e0>
    c408:	0023883a 	mov	r17,zero
    c40c:	003fd506 	br	c364 <__alt_data_end+0xfffec364>
    c410:	0005883a 	mov	r2,zero
    c414:	003fe706 	br	c3b4 <__alt_data_end+0xfffec3b4>
    c418:	00800434 	movhi	r2,16
    c41c:	89400234 	orhi	r5,r17,8
    c420:	10bfffc4 	addi	r2,r2,-1
    c424:	b02b883a 	mov	r21,r22
    c428:	288a703a 	and	r5,r5,r2
    c42c:	4029883a 	mov	r20,r8
    c430:	003eff06 	br	c030 <__alt_data_end+0xfffec030>

0000c434 <__subdf3>:
    c434:	02000434 	movhi	r8,16
    c438:	423fffc4 	addi	r8,r8,-1
    c43c:	defffb04 	addi	sp,sp,-20
    c440:	2a14703a 	and	r10,r5,r8
    c444:	3812d53a 	srli	r9,r7,20
    c448:	3a10703a 	and	r8,r7,r8
    c44c:	2006d77a 	srli	r3,r4,29
    c450:	3004d77a 	srli	r2,r6,29
    c454:	dc000015 	stw	r16,0(sp)
    c458:	501490fa 	slli	r10,r10,3
    c45c:	2820d53a 	srli	r16,r5,20
    c460:	401090fa 	slli	r8,r8,3
    c464:	dc800215 	stw	r18,8(sp)
    c468:	dc400115 	stw	r17,4(sp)
    c46c:	dfc00415 	stw	ra,16(sp)
    c470:	202290fa 	slli	r17,r4,3
    c474:	dcc00315 	stw	r19,12(sp)
    c478:	4a41ffcc 	andi	r9,r9,2047
    c47c:	0101ffc4 	movi	r4,2047
    c480:	2824d7fa 	srli	r18,r5,31
    c484:	8401ffcc 	andi	r16,r16,2047
    c488:	50c6b03a 	or	r3,r10,r3
    c48c:	380ed7fa 	srli	r7,r7,31
    c490:	408ab03a 	or	r5,r8,r2
    c494:	300c90fa 	slli	r6,r6,3
    c498:	49009626 	beq	r9,r4,c6f4 <__subdf3+0x2c0>
    c49c:	39c0005c 	xori	r7,r7,1
    c4a0:	8245c83a 	sub	r2,r16,r9
    c4a4:	3c807426 	beq	r7,r18,c678 <__subdf3+0x244>
    c4a8:	0080af0e 	bge	zero,r2,c768 <__subdf3+0x334>
    c4ac:	48002a1e 	bne	r9,zero,c558 <__subdf3+0x124>
    c4b0:	2988b03a 	or	r4,r5,r6
    c4b4:	20009a1e 	bne	r4,zero,c720 <__subdf3+0x2ec>
    c4b8:	888001cc 	andi	r2,r17,7
    c4bc:	10000726 	beq	r2,zero,c4dc <__subdf3+0xa8>
    c4c0:	888003cc 	andi	r2,r17,15
    c4c4:	01000104 	movi	r4,4
    c4c8:	11000426 	beq	r2,r4,c4dc <__subdf3+0xa8>
    c4cc:	890b883a 	add	r5,r17,r4
    c4d0:	2c63803a 	cmpltu	r17,r5,r17
    c4d4:	1c47883a 	add	r3,r3,r17
    c4d8:	2823883a 	mov	r17,r5
    c4dc:	1880202c 	andhi	r2,r3,128
    c4e0:	10005926 	beq	r2,zero,c648 <__subdf3+0x214>
    c4e4:	84000044 	addi	r16,r16,1
    c4e8:	0081ffc4 	movi	r2,2047
    c4ec:	8080be26 	beq	r16,r2,c7e8 <__subdf3+0x3b4>
    c4f0:	017fe034 	movhi	r5,65408
    c4f4:	297fffc4 	addi	r5,r5,-1
    c4f8:	1946703a 	and	r3,r3,r5
    c4fc:	1804977a 	slli	r2,r3,29
    c500:	1806927a 	slli	r3,r3,9
    c504:	8822d0fa 	srli	r17,r17,3
    c508:	8401ffcc 	andi	r16,r16,2047
    c50c:	180ad33a 	srli	r5,r3,12
    c510:	9100004c 	andi	r4,r18,1
    c514:	1444b03a 	or	r2,r2,r17
    c518:	80c1ffcc 	andi	r3,r16,2047
    c51c:	1820953a 	slli	r16,r3,20
    c520:	20c03fcc 	andi	r3,r4,255
    c524:	180897fa 	slli	r4,r3,31
    c528:	00c00434 	movhi	r3,16
    c52c:	18ffffc4 	addi	r3,r3,-1
    c530:	28c6703a 	and	r3,r5,r3
    c534:	1c06b03a 	or	r3,r3,r16
    c538:	1906b03a 	or	r3,r3,r4
    c53c:	dfc00417 	ldw	ra,16(sp)
    c540:	dcc00317 	ldw	r19,12(sp)
    c544:	dc800217 	ldw	r18,8(sp)
    c548:	dc400117 	ldw	r17,4(sp)
    c54c:	dc000017 	ldw	r16,0(sp)
    c550:	dec00504 	addi	sp,sp,20
    c554:	f800283a 	ret
    c558:	0101ffc4 	movi	r4,2047
    c55c:	813fd626 	beq	r16,r4,c4b8 <__alt_data_end+0xfffec4b8>
    c560:	29402034 	orhi	r5,r5,128
    c564:	01000e04 	movi	r4,56
    c568:	2080a316 	blt	r4,r2,c7f8 <__subdf3+0x3c4>
    c56c:	010007c4 	movi	r4,31
    c570:	2080c616 	blt	r4,r2,c88c <__subdf3+0x458>
    c574:	01000804 	movi	r4,32
    c578:	2089c83a 	sub	r4,r4,r2
    c57c:	2910983a 	sll	r8,r5,r4
    c580:	308ed83a 	srl	r7,r6,r2
    c584:	3108983a 	sll	r4,r6,r4
    c588:	2884d83a 	srl	r2,r5,r2
    c58c:	41ccb03a 	or	r6,r8,r7
    c590:	2008c03a 	cmpne	r4,r4,zero
    c594:	310cb03a 	or	r6,r6,r4
    c598:	898dc83a 	sub	r6,r17,r6
    c59c:	89a3803a 	cmpltu	r17,r17,r6
    c5a0:	1887c83a 	sub	r3,r3,r2
    c5a4:	1c47c83a 	sub	r3,r3,r17
    c5a8:	3023883a 	mov	r17,r6
    c5ac:	1880202c 	andhi	r2,r3,128
    c5b0:	10002326 	beq	r2,zero,c640 <__subdf3+0x20c>
    c5b4:	04c02034 	movhi	r19,128
    c5b8:	9cffffc4 	addi	r19,r19,-1
    c5bc:	1ce6703a 	and	r19,r3,r19
    c5c0:	98007a26 	beq	r19,zero,c7ac <__subdf3+0x378>
    c5c4:	9809883a 	mov	r4,r19
    c5c8:	000cf340 	call	cf34 <__clzsi2>
    c5cc:	113ffe04 	addi	r4,r2,-8
    c5d0:	00c007c4 	movi	r3,31
    c5d4:	19007b16 	blt	r3,r4,c7c4 <__subdf3+0x390>
    c5d8:	00800804 	movi	r2,32
    c5dc:	1105c83a 	sub	r2,r2,r4
    c5e0:	8884d83a 	srl	r2,r17,r2
    c5e4:	9906983a 	sll	r3,r19,r4
    c5e8:	8922983a 	sll	r17,r17,r4
    c5ec:	10c4b03a 	or	r2,r2,r3
    c5f0:	24007816 	blt	r4,r16,c7d4 <__subdf3+0x3a0>
    c5f4:	2421c83a 	sub	r16,r4,r16
    c5f8:	80c00044 	addi	r3,r16,1
    c5fc:	010007c4 	movi	r4,31
    c600:	20c09516 	blt	r4,r3,c858 <__subdf3+0x424>
    c604:	01400804 	movi	r5,32
    c608:	28cbc83a 	sub	r5,r5,r3
    c60c:	88c8d83a 	srl	r4,r17,r3
    c610:	8962983a 	sll	r17,r17,r5
    c614:	114a983a 	sll	r5,r2,r5
    c618:	10c6d83a 	srl	r3,r2,r3
    c61c:	8804c03a 	cmpne	r2,r17,zero
    c620:	290ab03a 	or	r5,r5,r4
    c624:	28a2b03a 	or	r17,r5,r2
    c628:	0021883a 	mov	r16,zero
    c62c:	003fa206 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c630:	2090b03a 	or	r8,r4,r2
    c634:	40018e26 	beq	r8,zero,cc70 <__subdf3+0x83c>
    c638:	1007883a 	mov	r3,r2
    c63c:	2023883a 	mov	r17,r4
    c640:	888001cc 	andi	r2,r17,7
    c644:	103f9e1e 	bne	r2,zero,c4c0 <__alt_data_end+0xfffec4c0>
    c648:	1804977a 	slli	r2,r3,29
    c64c:	8822d0fa 	srli	r17,r17,3
    c650:	1810d0fa 	srli	r8,r3,3
    c654:	9100004c 	andi	r4,r18,1
    c658:	1444b03a 	or	r2,r2,r17
    c65c:	00c1ffc4 	movi	r3,2047
    c660:	80c02826 	beq	r16,r3,c704 <__subdf3+0x2d0>
    c664:	01400434 	movhi	r5,16
    c668:	297fffc4 	addi	r5,r5,-1
    c66c:	80e0703a 	and	r16,r16,r3
    c670:	414a703a 	and	r5,r8,r5
    c674:	003fa806 	br	c518 <__alt_data_end+0xfffec518>
    c678:	0080630e 	bge	zero,r2,c808 <__subdf3+0x3d4>
    c67c:	48003026 	beq	r9,zero,c740 <__subdf3+0x30c>
    c680:	0101ffc4 	movi	r4,2047
    c684:	813f8c26 	beq	r16,r4,c4b8 <__alt_data_end+0xfffec4b8>
    c688:	29402034 	orhi	r5,r5,128
    c68c:	01000e04 	movi	r4,56
    c690:	2080a90e 	bge	r4,r2,c938 <__subdf3+0x504>
    c694:	298cb03a 	or	r6,r5,r6
    c698:	3012c03a 	cmpne	r9,r6,zero
    c69c:	0005883a 	mov	r2,zero
    c6a0:	4c53883a 	add	r9,r9,r17
    c6a4:	4c63803a 	cmpltu	r17,r9,r17
    c6a8:	10c7883a 	add	r3,r2,r3
    c6ac:	88c7883a 	add	r3,r17,r3
    c6b0:	4823883a 	mov	r17,r9
    c6b4:	1880202c 	andhi	r2,r3,128
    c6b8:	1000d026 	beq	r2,zero,c9fc <__subdf3+0x5c8>
    c6bc:	84000044 	addi	r16,r16,1
    c6c0:	0081ffc4 	movi	r2,2047
    c6c4:	8080fe26 	beq	r16,r2,cac0 <__subdf3+0x68c>
    c6c8:	00bfe034 	movhi	r2,65408
    c6cc:	10bfffc4 	addi	r2,r2,-1
    c6d0:	1886703a 	and	r3,r3,r2
    c6d4:	880ad07a 	srli	r5,r17,1
    c6d8:	180497fa 	slli	r2,r3,31
    c6dc:	8900004c 	andi	r4,r17,1
    c6e0:	2922b03a 	or	r17,r5,r4
    c6e4:	1806d07a 	srli	r3,r3,1
    c6e8:	1462b03a 	or	r17,r2,r17
    c6ec:	3825883a 	mov	r18,r7
    c6f0:	003f7106 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c6f4:	2984b03a 	or	r2,r5,r6
    c6f8:	103f6826 	beq	r2,zero,c49c <__alt_data_end+0xfffec49c>
    c6fc:	39c03fcc 	andi	r7,r7,255
    c700:	003f6706 	br	c4a0 <__alt_data_end+0xfffec4a0>
    c704:	4086b03a 	or	r3,r8,r2
    c708:	18015226 	beq	r3,zero,cc54 <__subdf3+0x820>
    c70c:	00c00434 	movhi	r3,16
    c710:	41400234 	orhi	r5,r8,8
    c714:	18ffffc4 	addi	r3,r3,-1
    c718:	28ca703a 	and	r5,r5,r3
    c71c:	003f7e06 	br	c518 <__alt_data_end+0xfffec518>
    c720:	10bfffc4 	addi	r2,r2,-1
    c724:	1000491e 	bne	r2,zero,c84c <__subdf3+0x418>
    c728:	898fc83a 	sub	r7,r17,r6
    c72c:	89e3803a 	cmpltu	r17,r17,r7
    c730:	1947c83a 	sub	r3,r3,r5
    c734:	1c47c83a 	sub	r3,r3,r17
    c738:	3823883a 	mov	r17,r7
    c73c:	003f9b06 	br	c5ac <__alt_data_end+0xfffec5ac>
    c740:	2988b03a 	or	r4,r5,r6
    c744:	203f5c26 	beq	r4,zero,c4b8 <__alt_data_end+0xfffec4b8>
    c748:	10bfffc4 	addi	r2,r2,-1
    c74c:	1000931e 	bne	r2,zero,c99c <__subdf3+0x568>
    c750:	898d883a 	add	r6,r17,r6
    c754:	3463803a 	cmpltu	r17,r6,r17
    c758:	1947883a 	add	r3,r3,r5
    c75c:	88c7883a 	add	r3,r17,r3
    c760:	3023883a 	mov	r17,r6
    c764:	003fd306 	br	c6b4 <__alt_data_end+0xfffec6b4>
    c768:	1000541e 	bne	r2,zero,c8bc <__subdf3+0x488>
    c76c:	80800044 	addi	r2,r16,1
    c770:	1081ffcc 	andi	r2,r2,2047
    c774:	01000044 	movi	r4,1
    c778:	2080a20e 	bge	r4,r2,ca04 <__subdf3+0x5d0>
    c77c:	8989c83a 	sub	r4,r17,r6
    c780:	8905803a 	cmpltu	r2,r17,r4
    c784:	1967c83a 	sub	r19,r3,r5
    c788:	98a7c83a 	sub	r19,r19,r2
    c78c:	9880202c 	andhi	r2,r19,128
    c790:	10006326 	beq	r2,zero,c920 <__subdf3+0x4ec>
    c794:	3463c83a 	sub	r17,r6,r17
    c798:	28c7c83a 	sub	r3,r5,r3
    c79c:	344d803a 	cmpltu	r6,r6,r17
    c7a0:	19a7c83a 	sub	r19,r3,r6
    c7a4:	3825883a 	mov	r18,r7
    c7a8:	983f861e 	bne	r19,zero,c5c4 <__alt_data_end+0xfffec5c4>
    c7ac:	8809883a 	mov	r4,r17
    c7b0:	000cf340 	call	cf34 <__clzsi2>
    c7b4:	10800804 	addi	r2,r2,32
    c7b8:	113ffe04 	addi	r4,r2,-8
    c7bc:	00c007c4 	movi	r3,31
    c7c0:	193f850e 	bge	r3,r4,c5d8 <__alt_data_end+0xfffec5d8>
    c7c4:	10bff604 	addi	r2,r2,-40
    c7c8:	8884983a 	sll	r2,r17,r2
    c7cc:	0023883a 	mov	r17,zero
    c7d0:	243f880e 	bge	r4,r16,c5f4 <__alt_data_end+0xfffec5f4>
    c7d4:	00ffe034 	movhi	r3,65408
    c7d8:	18ffffc4 	addi	r3,r3,-1
    c7dc:	8121c83a 	sub	r16,r16,r4
    c7e0:	10c6703a 	and	r3,r2,r3
    c7e4:	003f3406 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c7e8:	9100004c 	andi	r4,r18,1
    c7ec:	000b883a 	mov	r5,zero
    c7f0:	0005883a 	mov	r2,zero
    c7f4:	003f4806 	br	c518 <__alt_data_end+0xfffec518>
    c7f8:	298cb03a 	or	r6,r5,r6
    c7fc:	300cc03a 	cmpne	r6,r6,zero
    c800:	0005883a 	mov	r2,zero
    c804:	003f6406 	br	c598 <__alt_data_end+0xfffec598>
    c808:	10009a1e 	bne	r2,zero,ca74 <__subdf3+0x640>
    c80c:	82400044 	addi	r9,r16,1
    c810:	4881ffcc 	andi	r2,r9,2047
    c814:	02800044 	movi	r10,1
    c818:	5080670e 	bge	r10,r2,c9b8 <__subdf3+0x584>
    c81c:	0081ffc4 	movi	r2,2047
    c820:	4880af26 	beq	r9,r2,cae0 <__subdf3+0x6ac>
    c824:	898d883a 	add	r6,r17,r6
    c828:	1945883a 	add	r2,r3,r5
    c82c:	3447803a 	cmpltu	r3,r6,r17
    c830:	1887883a 	add	r3,r3,r2
    c834:	182297fa 	slli	r17,r3,31
    c838:	300cd07a 	srli	r6,r6,1
    c83c:	1806d07a 	srli	r3,r3,1
    c840:	4821883a 	mov	r16,r9
    c844:	89a2b03a 	or	r17,r17,r6
    c848:	003f1b06 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c84c:	0101ffc4 	movi	r4,2047
    c850:	813f441e 	bne	r16,r4,c564 <__alt_data_end+0xfffec564>
    c854:	003f1806 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c858:	843ff844 	addi	r16,r16,-31
    c85c:	01400804 	movi	r5,32
    c860:	1408d83a 	srl	r4,r2,r16
    c864:	19405026 	beq	r3,r5,c9a8 <__subdf3+0x574>
    c868:	01401004 	movi	r5,64
    c86c:	28c7c83a 	sub	r3,r5,r3
    c870:	10c4983a 	sll	r2,r2,r3
    c874:	88a2b03a 	or	r17,r17,r2
    c878:	8822c03a 	cmpne	r17,r17,zero
    c87c:	2462b03a 	or	r17,r4,r17
    c880:	0007883a 	mov	r3,zero
    c884:	0021883a 	mov	r16,zero
    c888:	003f6d06 	br	c640 <__alt_data_end+0xfffec640>
    c88c:	11fff804 	addi	r7,r2,-32
    c890:	01000804 	movi	r4,32
    c894:	29ced83a 	srl	r7,r5,r7
    c898:	11004526 	beq	r2,r4,c9b0 <__subdf3+0x57c>
    c89c:	01001004 	movi	r4,64
    c8a0:	2089c83a 	sub	r4,r4,r2
    c8a4:	2904983a 	sll	r2,r5,r4
    c8a8:	118cb03a 	or	r6,r2,r6
    c8ac:	300cc03a 	cmpne	r6,r6,zero
    c8b0:	398cb03a 	or	r6,r7,r6
    c8b4:	0005883a 	mov	r2,zero
    c8b8:	003f3706 	br	c598 <__alt_data_end+0xfffec598>
    c8bc:	80002a26 	beq	r16,zero,c968 <__subdf3+0x534>
    c8c0:	0101ffc4 	movi	r4,2047
    c8c4:	49006626 	beq	r9,r4,ca60 <__subdf3+0x62c>
    c8c8:	0085c83a 	sub	r2,zero,r2
    c8cc:	18c02034 	orhi	r3,r3,128
    c8d0:	01000e04 	movi	r4,56
    c8d4:	20807e16 	blt	r4,r2,cad0 <__subdf3+0x69c>
    c8d8:	010007c4 	movi	r4,31
    c8dc:	2080e716 	blt	r4,r2,cc7c <__subdf3+0x848>
    c8e0:	01000804 	movi	r4,32
    c8e4:	2089c83a 	sub	r4,r4,r2
    c8e8:	1914983a 	sll	r10,r3,r4
    c8ec:	8890d83a 	srl	r8,r17,r2
    c8f0:	8908983a 	sll	r4,r17,r4
    c8f4:	1884d83a 	srl	r2,r3,r2
    c8f8:	5222b03a 	or	r17,r10,r8
    c8fc:	2006c03a 	cmpne	r3,r4,zero
    c900:	88e2b03a 	or	r17,r17,r3
    c904:	3463c83a 	sub	r17,r6,r17
    c908:	2885c83a 	sub	r2,r5,r2
    c90c:	344d803a 	cmpltu	r6,r6,r17
    c910:	1187c83a 	sub	r3,r2,r6
    c914:	4821883a 	mov	r16,r9
    c918:	3825883a 	mov	r18,r7
    c91c:	003f2306 	br	c5ac <__alt_data_end+0xfffec5ac>
    c920:	24d0b03a 	or	r8,r4,r19
    c924:	40001b1e 	bne	r8,zero,c994 <__subdf3+0x560>
    c928:	0005883a 	mov	r2,zero
    c92c:	0009883a 	mov	r4,zero
    c930:	0021883a 	mov	r16,zero
    c934:	003f4906 	br	c65c <__alt_data_end+0xfffec65c>
    c938:	010007c4 	movi	r4,31
    c93c:	20803a16 	blt	r4,r2,ca28 <__subdf3+0x5f4>
    c940:	01000804 	movi	r4,32
    c944:	2089c83a 	sub	r4,r4,r2
    c948:	2912983a 	sll	r9,r5,r4
    c94c:	3090d83a 	srl	r8,r6,r2
    c950:	3108983a 	sll	r4,r6,r4
    c954:	2884d83a 	srl	r2,r5,r2
    c958:	4a12b03a 	or	r9,r9,r8
    c95c:	2008c03a 	cmpne	r4,r4,zero
    c960:	4912b03a 	or	r9,r9,r4
    c964:	003f4e06 	br	c6a0 <__alt_data_end+0xfffec6a0>
    c968:	1c48b03a 	or	r4,r3,r17
    c96c:	20003c26 	beq	r4,zero,ca60 <__subdf3+0x62c>
    c970:	0084303a 	nor	r2,zero,r2
    c974:	1000381e 	bne	r2,zero,ca58 <__subdf3+0x624>
    c978:	3463c83a 	sub	r17,r6,r17
    c97c:	28c5c83a 	sub	r2,r5,r3
    c980:	344d803a 	cmpltu	r6,r6,r17
    c984:	1187c83a 	sub	r3,r2,r6
    c988:	4821883a 	mov	r16,r9
    c98c:	3825883a 	mov	r18,r7
    c990:	003f0606 	br	c5ac <__alt_data_end+0xfffec5ac>
    c994:	2023883a 	mov	r17,r4
    c998:	003f0906 	br	c5c0 <__alt_data_end+0xfffec5c0>
    c99c:	0101ffc4 	movi	r4,2047
    c9a0:	813f3a1e 	bne	r16,r4,c68c <__alt_data_end+0xfffec68c>
    c9a4:	003ec406 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c9a8:	0005883a 	mov	r2,zero
    c9ac:	003fb106 	br	c874 <__alt_data_end+0xfffec874>
    c9b0:	0005883a 	mov	r2,zero
    c9b4:	003fbc06 	br	c8a8 <__alt_data_end+0xfffec8a8>
    c9b8:	1c44b03a 	or	r2,r3,r17
    c9bc:	80008e1e 	bne	r16,zero,cbf8 <__subdf3+0x7c4>
    c9c0:	1000c826 	beq	r2,zero,cce4 <__subdf3+0x8b0>
    c9c4:	2984b03a 	or	r2,r5,r6
    c9c8:	103ebb26 	beq	r2,zero,c4b8 <__alt_data_end+0xfffec4b8>
    c9cc:	8989883a 	add	r4,r17,r6
    c9d0:	1945883a 	add	r2,r3,r5
    c9d4:	2447803a 	cmpltu	r3,r4,r17
    c9d8:	1887883a 	add	r3,r3,r2
    c9dc:	1880202c 	andhi	r2,r3,128
    c9e0:	2023883a 	mov	r17,r4
    c9e4:	103f1626 	beq	r2,zero,c640 <__alt_data_end+0xfffec640>
    c9e8:	00bfe034 	movhi	r2,65408
    c9ec:	10bfffc4 	addi	r2,r2,-1
    c9f0:	5021883a 	mov	r16,r10
    c9f4:	1886703a 	and	r3,r3,r2
    c9f8:	003eaf06 	br	c4b8 <__alt_data_end+0xfffec4b8>
    c9fc:	3825883a 	mov	r18,r7
    ca00:	003f0f06 	br	c640 <__alt_data_end+0xfffec640>
    ca04:	1c44b03a 	or	r2,r3,r17
    ca08:	8000251e 	bne	r16,zero,caa0 <__subdf3+0x66c>
    ca0c:	1000661e 	bne	r2,zero,cba8 <__subdf3+0x774>
    ca10:	2990b03a 	or	r8,r5,r6
    ca14:	40009626 	beq	r8,zero,cc70 <__subdf3+0x83c>
    ca18:	2807883a 	mov	r3,r5
    ca1c:	3023883a 	mov	r17,r6
    ca20:	3825883a 	mov	r18,r7
    ca24:	003ea406 	br	c4b8 <__alt_data_end+0xfffec4b8>
    ca28:	127ff804 	addi	r9,r2,-32
    ca2c:	01000804 	movi	r4,32
    ca30:	2a52d83a 	srl	r9,r5,r9
    ca34:	11008c26 	beq	r2,r4,cc68 <__subdf3+0x834>
    ca38:	01001004 	movi	r4,64
    ca3c:	2085c83a 	sub	r2,r4,r2
    ca40:	2884983a 	sll	r2,r5,r2
    ca44:	118cb03a 	or	r6,r2,r6
    ca48:	300cc03a 	cmpne	r6,r6,zero
    ca4c:	4992b03a 	or	r9,r9,r6
    ca50:	0005883a 	mov	r2,zero
    ca54:	003f1206 	br	c6a0 <__alt_data_end+0xfffec6a0>
    ca58:	0101ffc4 	movi	r4,2047
    ca5c:	493f9c1e 	bne	r9,r4,c8d0 <__alt_data_end+0xfffec8d0>
    ca60:	2807883a 	mov	r3,r5
    ca64:	3023883a 	mov	r17,r6
    ca68:	4821883a 	mov	r16,r9
    ca6c:	3825883a 	mov	r18,r7
    ca70:	003e9106 	br	c4b8 <__alt_data_end+0xfffec4b8>
    ca74:	80001f1e 	bne	r16,zero,caf4 <__subdf3+0x6c0>
    ca78:	1c48b03a 	or	r4,r3,r17
    ca7c:	20005a26 	beq	r4,zero,cbe8 <__subdf3+0x7b4>
    ca80:	0084303a 	nor	r2,zero,r2
    ca84:	1000561e 	bne	r2,zero,cbe0 <__subdf3+0x7ac>
    ca88:	89a3883a 	add	r17,r17,r6
    ca8c:	1945883a 	add	r2,r3,r5
    ca90:	898d803a 	cmpltu	r6,r17,r6
    ca94:	3087883a 	add	r3,r6,r2
    ca98:	4821883a 	mov	r16,r9
    ca9c:	003f0506 	br	c6b4 <__alt_data_end+0xfffec6b4>
    caa0:	10002b1e 	bne	r2,zero,cb50 <__subdf3+0x71c>
    caa4:	2984b03a 	or	r2,r5,r6
    caa8:	10008026 	beq	r2,zero,ccac <__subdf3+0x878>
    caac:	2807883a 	mov	r3,r5
    cab0:	3023883a 	mov	r17,r6
    cab4:	3825883a 	mov	r18,r7
    cab8:	0401ffc4 	movi	r16,2047
    cabc:	003e7e06 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cac0:	3809883a 	mov	r4,r7
    cac4:	0011883a 	mov	r8,zero
    cac8:	0005883a 	mov	r2,zero
    cacc:	003ee306 	br	c65c <__alt_data_end+0xfffec65c>
    cad0:	1c62b03a 	or	r17,r3,r17
    cad4:	8822c03a 	cmpne	r17,r17,zero
    cad8:	0005883a 	mov	r2,zero
    cadc:	003f8906 	br	c904 <__alt_data_end+0xfffec904>
    cae0:	3809883a 	mov	r4,r7
    cae4:	4821883a 	mov	r16,r9
    cae8:	0011883a 	mov	r8,zero
    caec:	0005883a 	mov	r2,zero
    caf0:	003eda06 	br	c65c <__alt_data_end+0xfffec65c>
    caf4:	0101ffc4 	movi	r4,2047
    caf8:	49003b26 	beq	r9,r4,cbe8 <__subdf3+0x7b4>
    cafc:	0085c83a 	sub	r2,zero,r2
    cb00:	18c02034 	orhi	r3,r3,128
    cb04:	01000e04 	movi	r4,56
    cb08:	20806e16 	blt	r4,r2,ccc4 <__subdf3+0x890>
    cb0c:	010007c4 	movi	r4,31
    cb10:	20807716 	blt	r4,r2,ccf0 <__subdf3+0x8bc>
    cb14:	01000804 	movi	r4,32
    cb18:	2089c83a 	sub	r4,r4,r2
    cb1c:	1914983a 	sll	r10,r3,r4
    cb20:	8890d83a 	srl	r8,r17,r2
    cb24:	8908983a 	sll	r4,r17,r4
    cb28:	1884d83a 	srl	r2,r3,r2
    cb2c:	5222b03a 	or	r17,r10,r8
    cb30:	2006c03a 	cmpne	r3,r4,zero
    cb34:	88e2b03a 	or	r17,r17,r3
    cb38:	89a3883a 	add	r17,r17,r6
    cb3c:	1145883a 	add	r2,r2,r5
    cb40:	898d803a 	cmpltu	r6,r17,r6
    cb44:	3087883a 	add	r3,r6,r2
    cb48:	4821883a 	mov	r16,r9
    cb4c:	003ed906 	br	c6b4 <__alt_data_end+0xfffec6b4>
    cb50:	2984b03a 	or	r2,r5,r6
    cb54:	10004226 	beq	r2,zero,cc60 <__subdf3+0x82c>
    cb58:	1808d0fa 	srli	r4,r3,3
    cb5c:	8822d0fa 	srli	r17,r17,3
    cb60:	1806977a 	slli	r3,r3,29
    cb64:	2080022c 	andhi	r2,r4,8
    cb68:	1c62b03a 	or	r17,r3,r17
    cb6c:	10000826 	beq	r2,zero,cb90 <__subdf3+0x75c>
    cb70:	2812d0fa 	srli	r9,r5,3
    cb74:	4880022c 	andhi	r2,r9,8
    cb78:	1000051e 	bne	r2,zero,cb90 <__subdf3+0x75c>
    cb7c:	300cd0fa 	srli	r6,r6,3
    cb80:	2804977a 	slli	r2,r5,29
    cb84:	4809883a 	mov	r4,r9
    cb88:	3825883a 	mov	r18,r7
    cb8c:	11a2b03a 	or	r17,r2,r6
    cb90:	8806d77a 	srli	r3,r17,29
    cb94:	200890fa 	slli	r4,r4,3
    cb98:	882290fa 	slli	r17,r17,3
    cb9c:	0401ffc4 	movi	r16,2047
    cba0:	1906b03a 	or	r3,r3,r4
    cba4:	003e4406 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cba8:	2984b03a 	or	r2,r5,r6
    cbac:	103e4226 	beq	r2,zero,c4b8 <__alt_data_end+0xfffec4b8>
    cbb0:	8989c83a 	sub	r4,r17,r6
    cbb4:	8911803a 	cmpltu	r8,r17,r4
    cbb8:	1945c83a 	sub	r2,r3,r5
    cbbc:	1205c83a 	sub	r2,r2,r8
    cbc0:	1200202c 	andhi	r8,r2,128
    cbc4:	403e9a26 	beq	r8,zero,c630 <__alt_data_end+0xfffec630>
    cbc8:	3463c83a 	sub	r17,r6,r17
    cbcc:	28c5c83a 	sub	r2,r5,r3
    cbd0:	344d803a 	cmpltu	r6,r6,r17
    cbd4:	1187c83a 	sub	r3,r2,r6
    cbd8:	3825883a 	mov	r18,r7
    cbdc:	003e3606 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cbe0:	0101ffc4 	movi	r4,2047
    cbe4:	493fc71e 	bne	r9,r4,cb04 <__alt_data_end+0xfffecb04>
    cbe8:	2807883a 	mov	r3,r5
    cbec:	3023883a 	mov	r17,r6
    cbf0:	4821883a 	mov	r16,r9
    cbf4:	003e3006 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cbf8:	10003626 	beq	r2,zero,ccd4 <__subdf3+0x8a0>
    cbfc:	2984b03a 	or	r2,r5,r6
    cc00:	10001726 	beq	r2,zero,cc60 <__subdf3+0x82c>
    cc04:	1808d0fa 	srli	r4,r3,3
    cc08:	8822d0fa 	srli	r17,r17,3
    cc0c:	1806977a 	slli	r3,r3,29
    cc10:	2080022c 	andhi	r2,r4,8
    cc14:	1c62b03a 	or	r17,r3,r17
    cc18:	10000726 	beq	r2,zero,cc38 <__subdf3+0x804>
    cc1c:	2812d0fa 	srli	r9,r5,3
    cc20:	4880022c 	andhi	r2,r9,8
    cc24:	1000041e 	bne	r2,zero,cc38 <__subdf3+0x804>
    cc28:	300cd0fa 	srli	r6,r6,3
    cc2c:	2804977a 	slli	r2,r5,29
    cc30:	4809883a 	mov	r4,r9
    cc34:	11a2b03a 	or	r17,r2,r6
    cc38:	8806d77a 	srli	r3,r17,29
    cc3c:	200890fa 	slli	r4,r4,3
    cc40:	882290fa 	slli	r17,r17,3
    cc44:	3825883a 	mov	r18,r7
    cc48:	1906b03a 	or	r3,r3,r4
    cc4c:	0401ffc4 	movi	r16,2047
    cc50:	003e1906 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cc54:	000b883a 	mov	r5,zero
    cc58:	0005883a 	mov	r2,zero
    cc5c:	003e2e06 	br	c518 <__alt_data_end+0xfffec518>
    cc60:	0401ffc4 	movi	r16,2047
    cc64:	003e1406 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cc68:	0005883a 	mov	r2,zero
    cc6c:	003f7506 	br	ca44 <__alt_data_end+0xfffeca44>
    cc70:	0005883a 	mov	r2,zero
    cc74:	0009883a 	mov	r4,zero
    cc78:	003e7806 	br	c65c <__alt_data_end+0xfffec65c>
    cc7c:	123ff804 	addi	r8,r2,-32
    cc80:	01000804 	movi	r4,32
    cc84:	1a10d83a 	srl	r8,r3,r8
    cc88:	11002526 	beq	r2,r4,cd20 <__subdf3+0x8ec>
    cc8c:	01001004 	movi	r4,64
    cc90:	2085c83a 	sub	r2,r4,r2
    cc94:	1884983a 	sll	r2,r3,r2
    cc98:	1444b03a 	or	r2,r2,r17
    cc9c:	1004c03a 	cmpne	r2,r2,zero
    cca0:	40a2b03a 	or	r17,r8,r2
    cca4:	0005883a 	mov	r2,zero
    cca8:	003f1606 	br	c904 <__alt_data_end+0xfffec904>
    ccac:	02000434 	movhi	r8,16
    ccb0:	0009883a 	mov	r4,zero
    ccb4:	423fffc4 	addi	r8,r8,-1
    ccb8:	00bfffc4 	movi	r2,-1
    ccbc:	0401ffc4 	movi	r16,2047
    ccc0:	003e6606 	br	c65c <__alt_data_end+0xfffec65c>
    ccc4:	1c62b03a 	or	r17,r3,r17
    ccc8:	8822c03a 	cmpne	r17,r17,zero
    cccc:	0005883a 	mov	r2,zero
    ccd0:	003f9906 	br	cb38 <__alt_data_end+0xfffecb38>
    ccd4:	2807883a 	mov	r3,r5
    ccd8:	3023883a 	mov	r17,r6
    ccdc:	0401ffc4 	movi	r16,2047
    cce0:	003df506 	br	c4b8 <__alt_data_end+0xfffec4b8>
    cce4:	2807883a 	mov	r3,r5
    cce8:	3023883a 	mov	r17,r6
    ccec:	003df206 	br	c4b8 <__alt_data_end+0xfffec4b8>
    ccf0:	123ff804 	addi	r8,r2,-32
    ccf4:	01000804 	movi	r4,32
    ccf8:	1a10d83a 	srl	r8,r3,r8
    ccfc:	11000a26 	beq	r2,r4,cd28 <__subdf3+0x8f4>
    cd00:	01001004 	movi	r4,64
    cd04:	2085c83a 	sub	r2,r4,r2
    cd08:	1884983a 	sll	r2,r3,r2
    cd0c:	1444b03a 	or	r2,r2,r17
    cd10:	1004c03a 	cmpne	r2,r2,zero
    cd14:	40a2b03a 	or	r17,r8,r2
    cd18:	0005883a 	mov	r2,zero
    cd1c:	003f8606 	br	cb38 <__alt_data_end+0xfffecb38>
    cd20:	0005883a 	mov	r2,zero
    cd24:	003fdc06 	br	cc98 <__alt_data_end+0xfffecc98>
    cd28:	0005883a 	mov	r2,zero
    cd2c:	003ff706 	br	cd0c <__alt_data_end+0xfffecd0c>

0000cd30 <__fixdfsi>:
    cd30:	280cd53a 	srli	r6,r5,20
    cd34:	00c00434 	movhi	r3,16
    cd38:	18ffffc4 	addi	r3,r3,-1
    cd3c:	3181ffcc 	andi	r6,r6,2047
    cd40:	01c0ff84 	movi	r7,1022
    cd44:	28c6703a 	and	r3,r5,r3
    cd48:	280ad7fa 	srli	r5,r5,31
    cd4c:	3980120e 	bge	r7,r6,cd98 <__fixdfsi+0x68>
    cd50:	00810744 	movi	r2,1053
    cd54:	11800c16 	blt	r2,r6,cd88 <__fixdfsi+0x58>
    cd58:	00810cc4 	movi	r2,1075
    cd5c:	1185c83a 	sub	r2,r2,r6
    cd60:	01c007c4 	movi	r7,31
    cd64:	18c00434 	orhi	r3,r3,16
    cd68:	38800d16 	blt	r7,r2,cda0 <__fixdfsi+0x70>
    cd6c:	31befb44 	addi	r6,r6,-1043
    cd70:	2084d83a 	srl	r2,r4,r2
    cd74:	1986983a 	sll	r3,r3,r6
    cd78:	1884b03a 	or	r2,r3,r2
    cd7c:	28000726 	beq	r5,zero,cd9c <__fixdfsi+0x6c>
    cd80:	0085c83a 	sub	r2,zero,r2
    cd84:	f800283a 	ret
    cd88:	00a00034 	movhi	r2,32768
    cd8c:	10bfffc4 	addi	r2,r2,-1
    cd90:	2885883a 	add	r2,r5,r2
    cd94:	f800283a 	ret
    cd98:	0005883a 	mov	r2,zero
    cd9c:	f800283a 	ret
    cda0:	008104c4 	movi	r2,1043
    cda4:	1185c83a 	sub	r2,r2,r6
    cda8:	1884d83a 	srl	r2,r3,r2
    cdac:	003ff306 	br	cd7c <__alt_data_end+0xfffecd7c>

0000cdb0 <__floatsidf>:
    cdb0:	defffd04 	addi	sp,sp,-12
    cdb4:	dfc00215 	stw	ra,8(sp)
    cdb8:	dc400115 	stw	r17,4(sp)
    cdbc:	dc000015 	stw	r16,0(sp)
    cdc0:	20002b26 	beq	r4,zero,ce70 <__floatsidf+0xc0>
    cdc4:	2023883a 	mov	r17,r4
    cdc8:	2020d7fa 	srli	r16,r4,31
    cdcc:	20002d16 	blt	r4,zero,ce84 <__floatsidf+0xd4>
    cdd0:	8809883a 	mov	r4,r17
    cdd4:	000cf340 	call	cf34 <__clzsi2>
    cdd8:	01410784 	movi	r5,1054
    cddc:	288bc83a 	sub	r5,r5,r2
    cde0:	01010cc4 	movi	r4,1075
    cde4:	2149c83a 	sub	r4,r4,r5
    cde8:	00c007c4 	movi	r3,31
    cdec:	1900160e 	bge	r3,r4,ce48 <__floatsidf+0x98>
    cdf0:	00c104c4 	movi	r3,1043
    cdf4:	1947c83a 	sub	r3,r3,r5
    cdf8:	88c6983a 	sll	r3,r17,r3
    cdfc:	00800434 	movhi	r2,16
    ce00:	10bfffc4 	addi	r2,r2,-1
    ce04:	1886703a 	and	r3,r3,r2
    ce08:	2941ffcc 	andi	r5,r5,2047
    ce0c:	800d883a 	mov	r6,r16
    ce10:	0005883a 	mov	r2,zero
    ce14:	280a953a 	slli	r5,r5,20
    ce18:	31803fcc 	andi	r6,r6,255
    ce1c:	01000434 	movhi	r4,16
    ce20:	300c97fa 	slli	r6,r6,31
    ce24:	213fffc4 	addi	r4,r4,-1
    ce28:	1906703a 	and	r3,r3,r4
    ce2c:	1946b03a 	or	r3,r3,r5
    ce30:	1986b03a 	or	r3,r3,r6
    ce34:	dfc00217 	ldw	ra,8(sp)
    ce38:	dc400117 	ldw	r17,4(sp)
    ce3c:	dc000017 	ldw	r16,0(sp)
    ce40:	dec00304 	addi	sp,sp,12
    ce44:	f800283a 	ret
    ce48:	00c002c4 	movi	r3,11
    ce4c:	1887c83a 	sub	r3,r3,r2
    ce50:	88c6d83a 	srl	r3,r17,r3
    ce54:	8904983a 	sll	r2,r17,r4
    ce58:	01000434 	movhi	r4,16
    ce5c:	213fffc4 	addi	r4,r4,-1
    ce60:	2941ffcc 	andi	r5,r5,2047
    ce64:	1906703a 	and	r3,r3,r4
    ce68:	800d883a 	mov	r6,r16
    ce6c:	003fe906 	br	ce14 <__alt_data_end+0xfffece14>
    ce70:	000d883a 	mov	r6,zero
    ce74:	000b883a 	mov	r5,zero
    ce78:	0007883a 	mov	r3,zero
    ce7c:	0005883a 	mov	r2,zero
    ce80:	003fe406 	br	ce14 <__alt_data_end+0xfffece14>
    ce84:	0123c83a 	sub	r17,zero,r4
    ce88:	003fd106 	br	cdd0 <__alt_data_end+0xfffecdd0>

0000ce8c <__floatunsidf>:
    ce8c:	defffe04 	addi	sp,sp,-8
    ce90:	dc000015 	stw	r16,0(sp)
    ce94:	dfc00115 	stw	ra,4(sp)
    ce98:	2021883a 	mov	r16,r4
    ce9c:	20002226 	beq	r4,zero,cf28 <__floatunsidf+0x9c>
    cea0:	000cf340 	call	cf34 <__clzsi2>
    cea4:	01010784 	movi	r4,1054
    cea8:	2089c83a 	sub	r4,r4,r2
    ceac:	01810cc4 	movi	r6,1075
    ceb0:	310dc83a 	sub	r6,r6,r4
    ceb4:	00c007c4 	movi	r3,31
    ceb8:	1980120e 	bge	r3,r6,cf04 <__floatunsidf+0x78>
    cebc:	00c104c4 	movi	r3,1043
    cec0:	1907c83a 	sub	r3,r3,r4
    cec4:	80ca983a 	sll	r5,r16,r3
    cec8:	00800434 	movhi	r2,16
    cecc:	10bfffc4 	addi	r2,r2,-1
    ced0:	2101ffcc 	andi	r4,r4,2047
    ced4:	0021883a 	mov	r16,zero
    ced8:	288a703a 	and	r5,r5,r2
    cedc:	2008953a 	slli	r4,r4,20
    cee0:	00c00434 	movhi	r3,16
    cee4:	18ffffc4 	addi	r3,r3,-1
    cee8:	28c6703a 	and	r3,r5,r3
    ceec:	8005883a 	mov	r2,r16
    cef0:	1906b03a 	or	r3,r3,r4
    cef4:	dfc00117 	ldw	ra,4(sp)
    cef8:	dc000017 	ldw	r16,0(sp)
    cefc:	dec00204 	addi	sp,sp,8
    cf00:	f800283a 	ret
    cf04:	00c002c4 	movi	r3,11
    cf08:	188bc83a 	sub	r5,r3,r2
    cf0c:	814ad83a 	srl	r5,r16,r5
    cf10:	00c00434 	movhi	r3,16
    cf14:	18ffffc4 	addi	r3,r3,-1
    cf18:	81a0983a 	sll	r16,r16,r6
    cf1c:	2101ffcc 	andi	r4,r4,2047
    cf20:	28ca703a 	and	r5,r5,r3
    cf24:	003fed06 	br	cedc <__alt_data_end+0xfffecedc>
    cf28:	0009883a 	mov	r4,zero
    cf2c:	000b883a 	mov	r5,zero
    cf30:	003fea06 	br	cedc <__alt_data_end+0xfffecedc>

0000cf34 <__clzsi2>:
    cf34:	00bfffd4 	movui	r2,65535
    cf38:	11000536 	bltu	r2,r4,cf50 <__clzsi2+0x1c>
    cf3c:	00803fc4 	movi	r2,255
    cf40:	11000f36 	bltu	r2,r4,cf80 <__clzsi2+0x4c>
    cf44:	00800804 	movi	r2,32
    cf48:	0007883a 	mov	r3,zero
    cf4c:	00000506 	br	cf64 <__clzsi2+0x30>
    cf50:	00804034 	movhi	r2,256
    cf54:	10bfffc4 	addi	r2,r2,-1
    cf58:	11000c2e 	bgeu	r2,r4,cf8c <__clzsi2+0x58>
    cf5c:	00800204 	movi	r2,8
    cf60:	00c00604 	movi	r3,24
    cf64:	20c8d83a 	srl	r4,r4,r3
    cf68:	00c00074 	movhi	r3,1
    cf6c:	18fe6904 	addi	r3,r3,-1628
    cf70:	1909883a 	add	r4,r3,r4
    cf74:	20c00003 	ldbu	r3,0(r4)
    cf78:	10c5c83a 	sub	r2,r2,r3
    cf7c:	f800283a 	ret
    cf80:	00800604 	movi	r2,24
    cf84:	00c00204 	movi	r3,8
    cf88:	003ff606 	br	cf64 <__alt_data_end+0xfffecf64>
    cf8c:	00800404 	movi	r2,16
    cf90:	1007883a 	mov	r3,r2
    cf94:	003ff306 	br	cf64 <__alt_data_end+0xfffecf64>

0000cf98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf98:	defffe04 	addi	sp,sp,-8
    cf9c:	dfc00115 	stw	ra,4(sp)
    cfa0:	df000015 	stw	fp,0(sp)
    cfa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cfa8:	d0a00b17 	ldw	r2,-32724(gp)
    cfac:	10000326 	beq	r2,zero,cfbc <alt_get_errno+0x24>
    cfb0:	d0a00b17 	ldw	r2,-32724(gp)
    cfb4:	103ee83a 	callr	r2
    cfb8:	00000106 	br	cfc0 <alt_get_errno+0x28>
    cfbc:	d0a6d104 	addi	r2,gp,-25788
}
    cfc0:	e037883a 	mov	sp,fp
    cfc4:	dfc00117 	ldw	ra,4(sp)
    cfc8:	df000017 	ldw	fp,0(sp)
    cfcc:	dec00204 	addi	sp,sp,8
    cfd0:	f800283a 	ret

0000cfd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cfd4:	defffb04 	addi	sp,sp,-20
    cfd8:	dfc00415 	stw	ra,16(sp)
    cfdc:	df000315 	stw	fp,12(sp)
    cfe0:	df000304 	addi	fp,sp,12
    cfe4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cfe8:	e0bfff17 	ldw	r2,-4(fp)
    cfec:	10000616 	blt	r2,zero,d008 <close+0x34>
    cff0:	e0bfff17 	ldw	r2,-4(fp)
    cff4:	10c00324 	muli	r3,r2,12
    cff8:	00800074 	movhi	r2,1
    cffc:	1080e904 	addi	r2,r2,932
    d000:	1885883a 	add	r2,r3,r2
    d004:	00000106 	br	d00c <close+0x38>
    d008:	0005883a 	mov	r2,zero
    d00c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d010:	e0bffd17 	ldw	r2,-12(fp)
    d014:	10001926 	beq	r2,zero,d07c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d018:	e0bffd17 	ldw	r2,-12(fp)
    d01c:	10800017 	ldw	r2,0(r2)
    d020:	10800417 	ldw	r2,16(r2)
    d024:	10000626 	beq	r2,zero,d040 <close+0x6c>
    d028:	e0bffd17 	ldw	r2,-12(fp)
    d02c:	10800017 	ldw	r2,0(r2)
    d030:	10800417 	ldw	r2,16(r2)
    d034:	e13ffd17 	ldw	r4,-12(fp)
    d038:	103ee83a 	callr	r2
    d03c:	00000106 	br	d044 <close+0x70>
    d040:	0005883a 	mov	r2,zero
    d044:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d048:	e13fff17 	ldw	r4,-4(fp)
    d04c:	000d6940 	call	d694 <alt_release_fd>
    if (rval < 0)
    d050:	e0bffe17 	ldw	r2,-8(fp)
    d054:	1000070e 	bge	r2,zero,d074 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d058:	000cf980 	call	cf98 <alt_get_errno>
    d05c:	1007883a 	mov	r3,r2
    d060:	e0bffe17 	ldw	r2,-8(fp)
    d064:	0085c83a 	sub	r2,zero,r2
    d068:	18800015 	stw	r2,0(r3)
      return -1;
    d06c:	00bfffc4 	movi	r2,-1
    d070:	00000706 	br	d090 <close+0xbc>
    }
    return 0;
    d074:	0005883a 	mov	r2,zero
    d078:	00000506 	br	d090 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d07c:	000cf980 	call	cf98 <alt_get_errno>
    d080:	1007883a 	mov	r3,r2
    d084:	00801444 	movi	r2,81
    d088:	18800015 	stw	r2,0(r3)
    return -1;
    d08c:	00bfffc4 	movi	r2,-1
  }
}
    d090:	e037883a 	mov	sp,fp
    d094:	dfc00117 	ldw	ra,4(sp)
    d098:	df000017 	ldw	fp,0(sp)
    d09c:	dec00204 	addi	sp,sp,8
    d0a0:	f800283a 	ret

0000d0a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d0a4:	defffc04 	addi	sp,sp,-16
    d0a8:	df000315 	stw	fp,12(sp)
    d0ac:	df000304 	addi	fp,sp,12
    d0b0:	e13ffd15 	stw	r4,-12(fp)
    d0b4:	e17ffe15 	stw	r5,-8(fp)
    d0b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d0bc:	e0bfff17 	ldw	r2,-4(fp)
}
    d0c0:	e037883a 	mov	sp,fp
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00104 	addi	sp,sp,4
    d0cc:	f800283a 	ret

0000d0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0d0:	defffe04 	addi	sp,sp,-8
    d0d4:	dfc00115 	stw	ra,4(sp)
    d0d8:	df000015 	stw	fp,0(sp)
    d0dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0e0:	d0a00b17 	ldw	r2,-32724(gp)
    d0e4:	10000326 	beq	r2,zero,d0f4 <alt_get_errno+0x24>
    d0e8:	d0a00b17 	ldw	r2,-32724(gp)
    d0ec:	103ee83a 	callr	r2
    d0f0:	00000106 	br	d0f8 <alt_get_errno+0x28>
    d0f4:	d0a6d104 	addi	r2,gp,-25788
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d10c:	defffb04 	addi	sp,sp,-20
    d110:	dfc00415 	stw	ra,16(sp)
    d114:	df000315 	stw	fp,12(sp)
    d118:	df000304 	addi	fp,sp,12
    d11c:	e13ffe15 	stw	r4,-8(fp)
    d120:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d124:	e0bffe17 	ldw	r2,-8(fp)
    d128:	10000616 	blt	r2,zero,d144 <fstat+0x38>
    d12c:	e0bffe17 	ldw	r2,-8(fp)
    d130:	10c00324 	muli	r3,r2,12
    d134:	00800074 	movhi	r2,1
    d138:	1080e904 	addi	r2,r2,932
    d13c:	1885883a 	add	r2,r3,r2
    d140:	00000106 	br	d148 <fstat+0x3c>
    d144:	0005883a 	mov	r2,zero
    d148:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d14c:	e0bffd17 	ldw	r2,-12(fp)
    d150:	10001026 	beq	r2,zero,d194 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d154:	e0bffd17 	ldw	r2,-12(fp)
    d158:	10800017 	ldw	r2,0(r2)
    d15c:	10800817 	ldw	r2,32(r2)
    d160:	10000726 	beq	r2,zero,d180 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d164:	e0bffd17 	ldw	r2,-12(fp)
    d168:	10800017 	ldw	r2,0(r2)
    d16c:	10800817 	ldw	r2,32(r2)
    d170:	e17fff17 	ldw	r5,-4(fp)
    d174:	e13ffd17 	ldw	r4,-12(fp)
    d178:	103ee83a 	callr	r2
    d17c:	00000a06 	br	d1a8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d180:	e0bfff17 	ldw	r2,-4(fp)
    d184:	00c80004 	movi	r3,8192
    d188:	10c00115 	stw	r3,4(r2)
      return 0;
    d18c:	0005883a 	mov	r2,zero
    d190:	00000506 	br	d1a8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d194:	000d0d00 	call	d0d0 <alt_get_errno>
    d198:	1007883a 	mov	r3,r2
    d19c:	00801444 	movi	r2,81
    d1a0:	18800015 	stw	r2,0(r3)
    return -1;
    d1a4:	00bfffc4 	movi	r2,-1
  }
}
    d1a8:	e037883a 	mov	sp,fp
    d1ac:	dfc00117 	ldw	ra,4(sp)
    d1b0:	df000017 	ldw	fp,0(sp)
    d1b4:	dec00204 	addi	sp,sp,8
    d1b8:	f800283a 	ret

0000d1bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1bc:	defffe04 	addi	sp,sp,-8
    d1c0:	dfc00115 	stw	ra,4(sp)
    d1c4:	df000015 	stw	fp,0(sp)
    d1c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d1cc:	d0a00b17 	ldw	r2,-32724(gp)
    d1d0:	10000326 	beq	r2,zero,d1e0 <alt_get_errno+0x24>
    d1d4:	d0a00b17 	ldw	r2,-32724(gp)
    d1d8:	103ee83a 	callr	r2
    d1dc:	00000106 	br	d1e4 <alt_get_errno+0x28>
    d1e0:	d0a6d104 	addi	r2,gp,-25788
}
    d1e4:	e037883a 	mov	sp,fp
    d1e8:	dfc00117 	ldw	ra,4(sp)
    d1ec:	df000017 	ldw	fp,0(sp)
    d1f0:	dec00204 	addi	sp,sp,8
    d1f4:	f800283a 	ret

0000d1f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d1f8:	deffed04 	addi	sp,sp,-76
    d1fc:	dfc01215 	stw	ra,72(sp)
    d200:	df001115 	stw	fp,68(sp)
    d204:	df001104 	addi	fp,sp,68
    d208:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d20c:	e0bfff17 	ldw	r2,-4(fp)
    d210:	10000616 	blt	r2,zero,d22c <isatty+0x34>
    d214:	e0bfff17 	ldw	r2,-4(fp)
    d218:	10c00324 	muli	r3,r2,12
    d21c:	00800074 	movhi	r2,1
    d220:	1080e904 	addi	r2,r2,932
    d224:	1885883a 	add	r2,r3,r2
    d228:	00000106 	br	d230 <isatty+0x38>
    d22c:	0005883a 	mov	r2,zero
    d230:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d234:	e0bfef17 	ldw	r2,-68(fp)
    d238:	10000e26 	beq	r2,zero,d274 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d23c:	e0bfef17 	ldw	r2,-68(fp)
    d240:	10800017 	ldw	r2,0(r2)
    d244:	10800817 	ldw	r2,32(r2)
    d248:	1000021e 	bne	r2,zero,d254 <isatty+0x5c>
    {
      return 1;
    d24c:	00800044 	movi	r2,1
    d250:	00000d06 	br	d288 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d254:	e0bff004 	addi	r2,fp,-64
    d258:	100b883a 	mov	r5,r2
    d25c:	e13fff17 	ldw	r4,-4(fp)
    d260:	000d10c0 	call	d10c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d264:	e0bff117 	ldw	r2,-60(fp)
    d268:	10880020 	cmpeqi	r2,r2,8192
    d26c:	10803fcc 	andi	r2,r2,255
    d270:	00000506 	br	d288 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d274:	000d1bc0 	call	d1bc <alt_get_errno>
    d278:	1007883a 	mov	r3,r2
    d27c:	00801444 	movi	r2,81
    d280:	18800015 	stw	r2,0(r3)
    return 0;
    d284:	0005883a 	mov	r2,zero
  }
}
    d288:	e037883a 	mov	sp,fp
    d28c:	dfc00117 	ldw	ra,4(sp)
    d290:	df000017 	ldw	fp,0(sp)
    d294:	dec00204 	addi	sp,sp,8
    d298:	f800283a 	ret

0000d29c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d29c:	defffc04 	addi	sp,sp,-16
    d2a0:	df000315 	stw	fp,12(sp)
    d2a4:	df000304 	addi	fp,sp,12
    d2a8:	e13ffd15 	stw	r4,-12(fp)
    d2ac:	e17ffe15 	stw	r5,-8(fp)
    d2b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d2b4:	e0fffe17 	ldw	r3,-8(fp)
    d2b8:	e0bffd17 	ldw	r2,-12(fp)
    d2bc:	18800c26 	beq	r3,r2,d2f0 <alt_load_section+0x54>
  {
    while( to != end )
    d2c0:	00000806 	br	d2e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d2c4:	e0bffe17 	ldw	r2,-8(fp)
    d2c8:	10c00104 	addi	r3,r2,4
    d2cc:	e0fffe15 	stw	r3,-8(fp)
    d2d0:	e0fffd17 	ldw	r3,-12(fp)
    d2d4:	19000104 	addi	r4,r3,4
    d2d8:	e13ffd15 	stw	r4,-12(fp)
    d2dc:	18c00017 	ldw	r3,0(r3)
    d2e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d2e4:	e0fffe17 	ldw	r3,-8(fp)
    d2e8:	e0bfff17 	ldw	r2,-4(fp)
    d2ec:	18bff51e 	bne	r3,r2,d2c4 <__alt_data_end+0xfffed2c4>
    {
      *to++ = *from++;
    }
  }
}
    d2f0:	0001883a 	nop
    d2f4:	e037883a 	mov	sp,fp
    d2f8:	df000017 	ldw	fp,0(sp)
    d2fc:	dec00104 	addi	sp,sp,4
    d300:	f800283a 	ret

0000d304 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d304:	defffe04 	addi	sp,sp,-8
    d308:	dfc00115 	stw	ra,4(sp)
    d30c:	df000015 	stw	fp,0(sp)
    d310:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d314:	01800074 	movhi	r6,1
    d318:	31857104 	addi	r6,r6,5572
    d31c:	01400074 	movhi	r5,1
    d320:	297eb604 	addi	r5,r5,-1320
    d324:	01000074 	movhi	r4,1
    d328:	21057104 	addi	r4,r4,5572
    d32c:	000d29c0 	call	d29c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d330:	01800034 	movhi	r6,0
    d334:	31809104 	addi	r6,r6,580
    d338:	01400034 	movhi	r5,0
    d33c:	29400804 	addi	r5,r5,32
    d340:	01000034 	movhi	r4,0
    d344:	21000804 	addi	r4,r4,32
    d348:	000d29c0 	call	d29c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d34c:	01800074 	movhi	r6,1
    d350:	31beb604 	addi	r6,r6,-1320
    d354:	01400074 	movhi	r5,1
    d358:	297d8e04 	addi	r5,r5,-2504
    d35c:	01000074 	movhi	r4,1
    d360:	213d8e04 	addi	r4,r4,-2504
    d364:	000d29c0 	call	d29c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d368:	000e5240 	call	e524 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d36c:	000e70c0 	call	e70c <alt_icache_flush_all>
}
    d370:	0001883a 	nop
    d374:	e037883a 	mov	sp,fp
    d378:	dfc00117 	ldw	ra,4(sp)
    d37c:	df000017 	ldw	fp,0(sp)
    d380:	dec00204 	addi	sp,sp,8
    d384:	f800283a 	ret

0000d388 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d388:	defffe04 	addi	sp,sp,-8
    d38c:	dfc00115 	stw	ra,4(sp)
    d390:	df000015 	stw	fp,0(sp)
    d394:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d398:	d0a00b17 	ldw	r2,-32724(gp)
    d39c:	10000326 	beq	r2,zero,d3ac <alt_get_errno+0x24>
    d3a0:	d0a00b17 	ldw	r2,-32724(gp)
    d3a4:	103ee83a 	callr	r2
    d3a8:	00000106 	br	d3b0 <alt_get_errno+0x28>
    d3ac:	d0a6d104 	addi	r2,gp,-25788
}
    d3b0:	e037883a 	mov	sp,fp
    d3b4:	dfc00117 	ldw	ra,4(sp)
    d3b8:	df000017 	ldw	fp,0(sp)
    d3bc:	dec00204 	addi	sp,sp,8
    d3c0:	f800283a 	ret

0000d3c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d3c4:	defff904 	addi	sp,sp,-28
    d3c8:	dfc00615 	stw	ra,24(sp)
    d3cc:	df000515 	stw	fp,20(sp)
    d3d0:	df000504 	addi	fp,sp,20
    d3d4:	e13ffd15 	stw	r4,-12(fp)
    d3d8:	e17ffe15 	stw	r5,-8(fp)
    d3dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d3e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d3e4:	e0bffd17 	ldw	r2,-12(fp)
    d3e8:	10000616 	blt	r2,zero,d404 <lseek+0x40>
    d3ec:	e0bffd17 	ldw	r2,-12(fp)
    d3f0:	10c00324 	muli	r3,r2,12
    d3f4:	00800074 	movhi	r2,1
    d3f8:	1080e904 	addi	r2,r2,932
    d3fc:	1885883a 	add	r2,r3,r2
    d400:	00000106 	br	d408 <lseek+0x44>
    d404:	0005883a 	mov	r2,zero
    d408:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d40c:	e0bffc17 	ldw	r2,-16(fp)
    d410:	10001026 	beq	r2,zero,d454 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d414:	e0bffc17 	ldw	r2,-16(fp)
    d418:	10800017 	ldw	r2,0(r2)
    d41c:	10800717 	ldw	r2,28(r2)
    d420:	10000926 	beq	r2,zero,d448 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d424:	e0bffc17 	ldw	r2,-16(fp)
    d428:	10800017 	ldw	r2,0(r2)
    d42c:	10800717 	ldw	r2,28(r2)
    d430:	e1bfff17 	ldw	r6,-4(fp)
    d434:	e17ffe17 	ldw	r5,-8(fp)
    d438:	e13ffc17 	ldw	r4,-16(fp)
    d43c:	103ee83a 	callr	r2
    d440:	e0bffb15 	stw	r2,-20(fp)
    d444:	00000506 	br	d45c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d448:	00bfde84 	movi	r2,-134
    d44c:	e0bffb15 	stw	r2,-20(fp)
    d450:	00000206 	br	d45c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d454:	00bfebc4 	movi	r2,-81
    d458:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d45c:	e0bffb17 	ldw	r2,-20(fp)
    d460:	1000070e 	bge	r2,zero,d480 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d464:	000d3880 	call	d388 <alt_get_errno>
    d468:	1007883a 	mov	r3,r2
    d46c:	e0bffb17 	ldw	r2,-20(fp)
    d470:	0085c83a 	sub	r2,zero,r2
    d474:	18800015 	stw	r2,0(r3)
    rc = -1;
    d478:	00bfffc4 	movi	r2,-1
    d47c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d480:	e0bffb17 	ldw	r2,-20(fp)
}
    d484:	e037883a 	mov	sp,fp
    d488:	dfc00117 	ldw	ra,4(sp)
    d48c:	df000017 	ldw	fp,0(sp)
    d490:	dec00204 	addi	sp,sp,8
    d494:	f800283a 	ret

0000d498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d498:	defffd04 	addi	sp,sp,-12
    d49c:	dfc00215 	stw	ra,8(sp)
    d4a0:	df000115 	stw	fp,4(sp)
    d4a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d4a8:	0009883a 	mov	r4,zero
    d4ac:	000d9100 	call	d910 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d4b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d4b4:	000d9480 	call	d948 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d4b8:	01800074 	movhi	r6,1
    d4bc:	31beac04 	addi	r6,r6,-1360
    d4c0:	01400074 	movhi	r5,1
    d4c4:	297eac04 	addi	r5,r5,-1360
    d4c8:	01000074 	movhi	r4,1
    d4cc:	213eac04 	addi	r4,r4,-1360
    d4d0:	000eaa40 	call	eaa4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d4d4:	000e64c0 	call	e64c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d4d8:	01000074 	movhi	r4,1
    d4dc:	2139ab04 	addi	r4,r4,-6484
    d4e0:	000f2a40 	call	f2a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d4e4:	d0a6d217 	ldw	r2,-25784(gp)
    d4e8:	d0e6d317 	ldw	r3,-25780(gp)
    d4ec:	d126d417 	ldw	r4,-25776(gp)
    d4f0:	200d883a 	mov	r6,r4
    d4f4:	180b883a 	mov	r5,r3
    d4f8:	1009883a 	mov	r4,r2
    d4fc:	00002900 	call	290 <main>
    d500:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d504:	01000044 	movi	r4,1
    d508:	000cfd40 	call	cfd4 <close>
  exit (result);
    d50c:	e13fff17 	ldw	r4,-4(fp)
    d510:	000f2b80 	call	f2b8 <exit>

0000d514 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d514:	defffe04 	addi	sp,sp,-8
    d518:	df000115 	stw	fp,4(sp)
    d51c:	df000104 	addi	fp,sp,4
    d520:	e13fff15 	stw	r4,-4(fp)
}
    d524:	0001883a 	nop
    d528:	e037883a 	mov	sp,fp
    d52c:	df000017 	ldw	fp,0(sp)
    d530:	dec00104 	addi	sp,sp,4
    d534:	f800283a 	ret

0000d538 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d538:	defffe04 	addi	sp,sp,-8
    d53c:	df000115 	stw	fp,4(sp)
    d540:	df000104 	addi	fp,sp,4
    d544:	e13fff15 	stw	r4,-4(fp)
}
    d548:	0001883a 	nop
    d54c:	e037883a 	mov	sp,fp
    d550:	df000017 	ldw	fp,0(sp)
    d554:	dec00104 	addi	sp,sp,4
    d558:	f800283a 	ret

0000d55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d55c:	defffe04 	addi	sp,sp,-8
    d560:	dfc00115 	stw	ra,4(sp)
    d564:	df000015 	stw	fp,0(sp)
    d568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d56c:	d0a00b17 	ldw	r2,-32724(gp)
    d570:	10000326 	beq	r2,zero,d580 <alt_get_errno+0x24>
    d574:	d0a00b17 	ldw	r2,-32724(gp)
    d578:	103ee83a 	callr	r2
    d57c:	00000106 	br	d584 <alt_get_errno+0x28>
    d580:	d0a6d104 	addi	r2,gp,-25788
}
    d584:	e037883a 	mov	sp,fp
    d588:	dfc00117 	ldw	ra,4(sp)
    d58c:	df000017 	ldw	fp,0(sp)
    d590:	dec00204 	addi	sp,sp,8
    d594:	f800283a 	ret

0000d598 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d598:	defff904 	addi	sp,sp,-28
    d59c:	dfc00615 	stw	ra,24(sp)
    d5a0:	df000515 	stw	fp,20(sp)
    d5a4:	df000504 	addi	fp,sp,20
    d5a8:	e13ffd15 	stw	r4,-12(fp)
    d5ac:	e17ffe15 	stw	r5,-8(fp)
    d5b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5b4:	e0bffd17 	ldw	r2,-12(fp)
    d5b8:	10000616 	blt	r2,zero,d5d4 <read+0x3c>
    d5bc:	e0bffd17 	ldw	r2,-12(fp)
    d5c0:	10c00324 	muli	r3,r2,12
    d5c4:	00800074 	movhi	r2,1
    d5c8:	1080e904 	addi	r2,r2,932
    d5cc:	1885883a 	add	r2,r3,r2
    d5d0:	00000106 	br	d5d8 <read+0x40>
    d5d4:	0005883a 	mov	r2,zero
    d5d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d5dc:	e0bffb17 	ldw	r2,-20(fp)
    d5e0:	10002226 	beq	r2,zero,d66c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d5e4:	e0bffb17 	ldw	r2,-20(fp)
    d5e8:	10800217 	ldw	r2,8(r2)
    d5ec:	108000cc 	andi	r2,r2,3
    d5f0:	10800060 	cmpeqi	r2,r2,1
    d5f4:	1000181e 	bne	r2,zero,d658 <read+0xc0>
        (fd->dev->read))
    d5f8:	e0bffb17 	ldw	r2,-20(fp)
    d5fc:	10800017 	ldw	r2,0(r2)
    d600:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d604:	10001426 	beq	r2,zero,d658 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d608:	e0bffb17 	ldw	r2,-20(fp)
    d60c:	10800017 	ldw	r2,0(r2)
    d610:	10800517 	ldw	r2,20(r2)
    d614:	e0ffff17 	ldw	r3,-4(fp)
    d618:	180d883a 	mov	r6,r3
    d61c:	e17ffe17 	ldw	r5,-8(fp)
    d620:	e13ffb17 	ldw	r4,-20(fp)
    d624:	103ee83a 	callr	r2
    d628:	e0bffc15 	stw	r2,-16(fp)
    d62c:	e0bffc17 	ldw	r2,-16(fp)
    d630:	1000070e 	bge	r2,zero,d650 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d634:	000d55c0 	call	d55c <alt_get_errno>
    d638:	1007883a 	mov	r3,r2
    d63c:	e0bffc17 	ldw	r2,-16(fp)
    d640:	0085c83a 	sub	r2,zero,r2
    d644:	18800015 	stw	r2,0(r3)
          return -1;
    d648:	00bfffc4 	movi	r2,-1
    d64c:	00000c06 	br	d680 <read+0xe8>
        }
        return rval;
    d650:	e0bffc17 	ldw	r2,-16(fp)
    d654:	00000a06 	br	d680 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d658:	000d55c0 	call	d55c <alt_get_errno>
    d65c:	1007883a 	mov	r3,r2
    d660:	00800344 	movi	r2,13
    d664:	18800015 	stw	r2,0(r3)
    d668:	00000406 	br	d67c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d66c:	000d55c0 	call	d55c <alt_get_errno>
    d670:	1007883a 	mov	r3,r2
    d674:	00801444 	movi	r2,81
    d678:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d67c:	00bfffc4 	movi	r2,-1
}
    d680:	e037883a 	mov	sp,fp
    d684:	dfc00117 	ldw	ra,4(sp)
    d688:	df000017 	ldw	fp,0(sp)
    d68c:	dec00204 	addi	sp,sp,8
    d690:	f800283a 	ret

0000d694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d694:	defffe04 	addi	sp,sp,-8
    d698:	df000115 	stw	fp,4(sp)
    d69c:	df000104 	addi	fp,sp,4
    d6a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d6a4:	e0bfff17 	ldw	r2,-4(fp)
    d6a8:	108000d0 	cmplti	r2,r2,3
    d6ac:	10000d1e 	bne	r2,zero,d6e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d6b0:	00800074 	movhi	r2,1
    d6b4:	1080e904 	addi	r2,r2,932
    d6b8:	e0ffff17 	ldw	r3,-4(fp)
    d6bc:	18c00324 	muli	r3,r3,12
    d6c0:	10c5883a 	add	r2,r2,r3
    d6c4:	10800204 	addi	r2,r2,8
    d6c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d6cc:	00800074 	movhi	r2,1
    d6d0:	1080e904 	addi	r2,r2,932
    d6d4:	e0ffff17 	ldw	r3,-4(fp)
    d6d8:	18c00324 	muli	r3,r3,12
    d6dc:	10c5883a 	add	r2,r2,r3
    d6e0:	10000015 	stw	zero,0(r2)
  }
}
    d6e4:	0001883a 	nop
    d6e8:	e037883a 	mov	sp,fp
    d6ec:	df000017 	ldw	fp,0(sp)
    d6f0:	dec00104 	addi	sp,sp,4
    d6f4:	f800283a 	ret

0000d6f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d6f8:	defff904 	addi	sp,sp,-28
    d6fc:	df000615 	stw	fp,24(sp)
    d700:	df000604 	addi	fp,sp,24
    d704:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d708:	0005303a 	rdctl	r2,status
    d70c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d710:	e0fffe17 	ldw	r3,-8(fp)
    d714:	00bfff84 	movi	r2,-2
    d718:	1884703a 	and	r2,r3,r2
    d71c:	1001703a 	wrctl	status,r2
  
  return context;
    d720:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d724:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d728:	d0a00c17 	ldw	r2,-32720(gp)
    d72c:	10c000c4 	addi	r3,r2,3
    d730:	00bfff04 	movi	r2,-4
    d734:	1884703a 	and	r2,r3,r2
    d738:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d73c:	d0e00c17 	ldw	r3,-32720(gp)
    d740:	e0bfff17 	ldw	r2,-4(fp)
    d744:	1887883a 	add	r3,r3,r2
    d748:	008000b4 	movhi	r2,2
    d74c:	10800004 	addi	r2,r2,0
    d750:	10c0062e 	bgeu	r2,r3,d76c <sbrk+0x74>
    d754:	e0bffb17 	ldw	r2,-20(fp)
    d758:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d75c:	e0bffa17 	ldw	r2,-24(fp)
    d760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d764:	00bfffc4 	movi	r2,-1
    d768:	00000b06 	br	d798 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d76c:	d0a00c17 	ldw	r2,-32720(gp)
    d770:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d774:	d0e00c17 	ldw	r3,-32720(gp)
    d778:	e0bfff17 	ldw	r2,-4(fp)
    d77c:	1885883a 	add	r2,r3,r2
    d780:	d0a00c15 	stw	r2,-32720(gp)
    d784:	e0bffb17 	ldw	r2,-20(fp)
    d788:	e0bffc15 	stw	r2,-16(fp)
    d78c:	e0bffc17 	ldw	r2,-16(fp)
    d790:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d794:	e0bffd17 	ldw	r2,-12(fp)
} 
    d798:	e037883a 	mov	sp,fp
    d79c:	df000017 	ldw	fp,0(sp)
    d7a0:	dec00104 	addi	sp,sp,4
    d7a4:	f800283a 	ret

0000d7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7a8:	defffe04 	addi	sp,sp,-8
    d7ac:	dfc00115 	stw	ra,4(sp)
    d7b0:	df000015 	stw	fp,0(sp)
    d7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7b8:	d0a00b17 	ldw	r2,-32724(gp)
    d7bc:	10000326 	beq	r2,zero,d7cc <alt_get_errno+0x24>
    d7c0:	d0a00b17 	ldw	r2,-32724(gp)
    d7c4:	103ee83a 	callr	r2
    d7c8:	00000106 	br	d7d0 <alt_get_errno+0x28>
    d7cc:	d0a6d104 	addi	r2,gp,-25788
}
    d7d0:	e037883a 	mov	sp,fp
    d7d4:	dfc00117 	ldw	ra,4(sp)
    d7d8:	df000017 	ldw	fp,0(sp)
    d7dc:	dec00204 	addi	sp,sp,8
    d7e0:	f800283a 	ret

0000d7e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d7e4:	defff904 	addi	sp,sp,-28
    d7e8:	dfc00615 	stw	ra,24(sp)
    d7ec:	df000515 	stw	fp,20(sp)
    d7f0:	df000504 	addi	fp,sp,20
    d7f4:	e13ffd15 	stw	r4,-12(fp)
    d7f8:	e17ffe15 	stw	r5,-8(fp)
    d7fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d800:	e0bffd17 	ldw	r2,-12(fp)
    d804:	10000616 	blt	r2,zero,d820 <write+0x3c>
    d808:	e0bffd17 	ldw	r2,-12(fp)
    d80c:	10c00324 	muli	r3,r2,12
    d810:	00800074 	movhi	r2,1
    d814:	1080e904 	addi	r2,r2,932
    d818:	1885883a 	add	r2,r3,r2
    d81c:	00000106 	br	d824 <write+0x40>
    d820:	0005883a 	mov	r2,zero
    d824:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d828:	e0bffb17 	ldw	r2,-20(fp)
    d82c:	10002126 	beq	r2,zero,d8b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d830:	e0bffb17 	ldw	r2,-20(fp)
    d834:	10800217 	ldw	r2,8(r2)
    d838:	108000cc 	andi	r2,r2,3
    d83c:	10001826 	beq	r2,zero,d8a0 <write+0xbc>
    d840:	e0bffb17 	ldw	r2,-20(fp)
    d844:	10800017 	ldw	r2,0(r2)
    d848:	10800617 	ldw	r2,24(r2)
    d84c:	10001426 	beq	r2,zero,d8a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d850:	e0bffb17 	ldw	r2,-20(fp)
    d854:	10800017 	ldw	r2,0(r2)
    d858:	10800617 	ldw	r2,24(r2)
    d85c:	e0ffff17 	ldw	r3,-4(fp)
    d860:	180d883a 	mov	r6,r3
    d864:	e17ffe17 	ldw	r5,-8(fp)
    d868:	e13ffb17 	ldw	r4,-20(fp)
    d86c:	103ee83a 	callr	r2
    d870:	e0bffc15 	stw	r2,-16(fp)
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	1000070e 	bge	r2,zero,d898 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d87c:	000d7a80 	call	d7a8 <alt_get_errno>
    d880:	1007883a 	mov	r3,r2
    d884:	e0bffc17 	ldw	r2,-16(fp)
    d888:	0085c83a 	sub	r2,zero,r2
    d88c:	18800015 	stw	r2,0(r3)
        return -1;
    d890:	00bfffc4 	movi	r2,-1
    d894:	00000c06 	br	d8c8 <write+0xe4>
      }
      return rval;
    d898:	e0bffc17 	ldw	r2,-16(fp)
    d89c:	00000a06 	br	d8c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d8a0:	000d7a80 	call	d7a8 <alt_get_errno>
    d8a4:	1007883a 	mov	r3,r2
    d8a8:	00800344 	movi	r2,13
    d8ac:	18800015 	stw	r2,0(r3)
    d8b0:	00000406 	br	d8c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d8b4:	000d7a80 	call	d7a8 <alt_get_errno>
    d8b8:	1007883a 	mov	r3,r2
    d8bc:	00801444 	movi	r2,81
    d8c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d8c4:	00bfffc4 	movi	r2,-1
}
    d8c8:	e037883a 	mov	sp,fp
    d8cc:	dfc00117 	ldw	ra,4(sp)
    d8d0:	df000017 	ldw	fp,0(sp)
    d8d4:	dec00204 	addi	sp,sp,8
    d8d8:	f800283a 	ret

0000d8dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d8dc:	defffd04 	addi	sp,sp,-12
    d8e0:	dfc00215 	stw	ra,8(sp)
    d8e4:	df000115 	stw	fp,4(sp)
    d8e8:	df000104 	addi	fp,sp,4
    d8ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d8f0:	d1600804 	addi	r5,gp,-32736
    d8f4:	e13fff17 	ldw	r4,-4(fp)
    d8f8:	000e5a80 	call	e5a8 <alt_dev_llist_insert>
}
    d8fc:	e037883a 	mov	sp,fp
    d900:	dfc00117 	ldw	ra,4(sp)
    d904:	df000017 	ldw	fp,0(sp)
    d908:	dec00204 	addi	sp,sp,8
    d90c:	f800283a 	ret

0000d910 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d910:	defffd04 	addi	sp,sp,-12
    d914:	dfc00215 	stw	ra,8(sp)
    d918:	df000115 	stw	fp,4(sp)
    d91c:	df000104 	addi	fp,sp,4
    d920:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    d924:	000ef180 	call	ef18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d928:	00800044 	movi	r2,1
    d92c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d930:	0001883a 	nop
    d934:	e037883a 	mov	sp,fp
    d938:	dfc00117 	ldw	ra,4(sp)
    d93c:	df000017 	ldw	fp,0(sp)
    d940:	dec00204 	addi	sp,sp,8
    d944:	f800283a 	ret

0000d948 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d948:	defffe04 	addi	sp,sp,-8
    d94c:	dfc00115 	stw	ra,4(sp)
    d950:	df000015 	stw	fp,0(sp)
    d954:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    d958:	01800144 	movi	r6,5
    d95c:	000b883a 	mov	r5,zero
    d960:	01000074 	movhi	r4,1
    d964:	21015304 	addi	r4,r4,1356
    d968:	000daf40 	call	daf4 <altera_avalon_jtag_uart_init>
    d96c:	01000074 	movhi	r4,1
    d970:	21014904 	addi	r4,r4,1316
    d974:	000d8dc0 	call	d8dc <alt_dev_reg>
}
    d978:	0001883a 	nop
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d990:	defffa04 	addi	sp,sp,-24
    d994:	dfc00515 	stw	ra,20(sp)
    d998:	df000415 	stw	fp,16(sp)
    d99c:	df000404 	addi	fp,sp,16
    d9a0:	e13ffd15 	stw	r4,-12(fp)
    d9a4:	e17ffe15 	stw	r5,-8(fp)
    d9a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d9ac:	e0bffd17 	ldw	r2,-12(fp)
    d9b0:	10800017 	ldw	r2,0(r2)
    d9b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d9b8:	e0bffc17 	ldw	r2,-16(fp)
    d9bc:	10c00a04 	addi	r3,r2,40
    d9c0:	e0bffd17 	ldw	r2,-12(fp)
    d9c4:	10800217 	ldw	r2,8(r2)
    d9c8:	100f883a 	mov	r7,r2
    d9cc:	e1bfff17 	ldw	r6,-4(fp)
    d9d0:	e17ffe17 	ldw	r5,-8(fp)
    d9d4:	1809883a 	mov	r4,r3
    d9d8:	000dfb80 	call	dfb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d9dc:	e037883a 	mov	sp,fp
    d9e0:	dfc00117 	ldw	ra,4(sp)
    d9e4:	df000017 	ldw	fp,0(sp)
    d9e8:	dec00204 	addi	sp,sp,8
    d9ec:	f800283a 	ret

0000d9f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d9f0:	defffa04 	addi	sp,sp,-24
    d9f4:	dfc00515 	stw	ra,20(sp)
    d9f8:	df000415 	stw	fp,16(sp)
    d9fc:	df000404 	addi	fp,sp,16
    da00:	e13ffd15 	stw	r4,-12(fp)
    da04:	e17ffe15 	stw	r5,-8(fp)
    da08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    da0c:	e0bffd17 	ldw	r2,-12(fp)
    da10:	10800017 	ldw	r2,0(r2)
    da14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    da18:	e0bffc17 	ldw	r2,-16(fp)
    da1c:	10c00a04 	addi	r3,r2,40
    da20:	e0bffd17 	ldw	r2,-12(fp)
    da24:	10800217 	ldw	r2,8(r2)
    da28:	100f883a 	mov	r7,r2
    da2c:	e1bfff17 	ldw	r6,-4(fp)
    da30:	e17ffe17 	ldw	r5,-8(fp)
    da34:	1809883a 	mov	r4,r3
    da38:	000e1d40 	call	e1d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    da3c:	e037883a 	mov	sp,fp
    da40:	dfc00117 	ldw	ra,4(sp)
    da44:	df000017 	ldw	fp,0(sp)
    da48:	dec00204 	addi	sp,sp,8
    da4c:	f800283a 	ret

0000da50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    da50:	defffc04 	addi	sp,sp,-16
    da54:	dfc00315 	stw	ra,12(sp)
    da58:	df000215 	stw	fp,8(sp)
    da5c:	df000204 	addi	fp,sp,8
    da60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    da64:	e0bfff17 	ldw	r2,-4(fp)
    da68:	10800017 	ldw	r2,0(r2)
    da6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    da70:	e0bffe17 	ldw	r2,-8(fp)
    da74:	10c00a04 	addi	r3,r2,40
    da78:	e0bfff17 	ldw	r2,-4(fp)
    da7c:	10800217 	ldw	r2,8(r2)
    da80:	100b883a 	mov	r5,r2
    da84:	1809883a 	mov	r4,r3
    da88:	000de600 	call	de60 <altera_avalon_jtag_uart_close>
}
    da8c:	e037883a 	mov	sp,fp
    da90:	dfc00117 	ldw	ra,4(sp)
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00204 	addi	sp,sp,8
    da9c:	f800283a 	ret

0000daa0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    daa0:	defffa04 	addi	sp,sp,-24
    daa4:	dfc00515 	stw	ra,20(sp)
    daa8:	df000415 	stw	fp,16(sp)
    daac:	df000404 	addi	fp,sp,16
    dab0:	e13ffd15 	stw	r4,-12(fp)
    dab4:	e17ffe15 	stw	r5,-8(fp)
    dab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    dabc:	e0bffd17 	ldw	r2,-12(fp)
    dac0:	10800017 	ldw	r2,0(r2)
    dac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dac8:	e0bffc17 	ldw	r2,-16(fp)
    dacc:	10800a04 	addi	r2,r2,40
    dad0:	e1bfff17 	ldw	r6,-4(fp)
    dad4:	e17ffe17 	ldw	r5,-8(fp)
    dad8:	1009883a 	mov	r4,r2
    dadc:	000dec80 	call	dec8 <altera_avalon_jtag_uart_ioctl>
}
    dae0:	e037883a 	mov	sp,fp
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	df000017 	ldw	fp,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	f800283a 	ret

0000daf4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    daf4:	defffa04 	addi	sp,sp,-24
    daf8:	dfc00515 	stw	ra,20(sp)
    dafc:	df000415 	stw	fp,16(sp)
    db00:	df000404 	addi	fp,sp,16
    db04:	e13ffd15 	stw	r4,-12(fp)
    db08:	e17ffe15 	stw	r5,-8(fp)
    db0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    db10:	e0bffd17 	ldw	r2,-12(fp)
    db14:	00c00044 	movi	r3,1
    db18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    db1c:	e0bffd17 	ldw	r2,-12(fp)
    db20:	10800017 	ldw	r2,0(r2)
    db24:	10800104 	addi	r2,r2,4
    db28:	1007883a 	mov	r3,r2
    db2c:	e0bffd17 	ldw	r2,-12(fp)
    db30:	10800817 	ldw	r2,32(r2)
    db34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    db38:	e0bffe17 	ldw	r2,-8(fp)
    db3c:	e0ffff17 	ldw	r3,-4(fp)
    db40:	d8000015 	stw	zero,0(sp)
    db44:	e1fffd17 	ldw	r7,-12(fp)
    db48:	01800074 	movhi	r6,1
    db4c:	31b6ed04 	addi	r6,r6,-9292
    db50:	180b883a 	mov	r5,r3
    db54:	1009883a 	mov	r4,r2
    db58:	000e7400 	call	e740 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    db5c:	e0bffd17 	ldw	r2,-12(fp)
    db60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    db64:	e0bffd17 	ldw	r2,-12(fp)
    db68:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    db6c:	d0e6d617 	ldw	r3,-25768(gp)
    db70:	e1fffd17 	ldw	r7,-12(fp)
    db74:	01800074 	movhi	r6,1
    db78:	31b77004 	addi	r6,r6,-8768
    db7c:	180b883a 	mov	r5,r3
    db80:	1009883a 	mov	r4,r2
    db84:	000e3f80 	call	e3f8 <alt_alarm_start>
    db88:	1000040e 	bge	r2,zero,db9c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    db8c:	e0fffd17 	ldw	r3,-12(fp)
    db90:	00a00034 	movhi	r2,32768
    db94:	10bfffc4 	addi	r2,r2,-1
    db98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    db9c:	0001883a 	nop
    dba0:	e037883a 	mov	sp,fp
    dba4:	dfc00117 	ldw	ra,4(sp)
    dba8:	df000017 	ldw	fp,0(sp)
    dbac:	dec00204 	addi	sp,sp,8
    dbb0:	f800283a 	ret

0000dbb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dbb4:	defff804 	addi	sp,sp,-32
    dbb8:	df000715 	stw	fp,28(sp)
    dbbc:	df000704 	addi	fp,sp,28
    dbc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dbc4:	e0bfff17 	ldw	r2,-4(fp)
    dbc8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    dbcc:	e0bffb17 	ldw	r2,-20(fp)
    dbd0:	10800017 	ldw	r2,0(r2)
    dbd4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dbd8:	e0bffc17 	ldw	r2,-16(fp)
    dbdc:	10800104 	addi	r2,r2,4
    dbe0:	10800037 	ldwio	r2,0(r2)
    dbe4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dbe8:	e0bffd17 	ldw	r2,-12(fp)
    dbec:	1080c00c 	andi	r2,r2,768
    dbf0:	10006d26 	beq	r2,zero,dda8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dbf4:	e0bffd17 	ldw	r2,-12(fp)
    dbf8:	1080400c 	andi	r2,r2,256
    dbfc:	10003526 	beq	r2,zero,dcd4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dc00:	00800074 	movhi	r2,1
    dc04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc08:	e0bffb17 	ldw	r2,-20(fp)
    dc0c:	10800a17 	ldw	r2,40(r2)
    dc10:	10800044 	addi	r2,r2,1
    dc14:	1081ffcc 	andi	r2,r2,2047
    dc18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    dc1c:	e0bffb17 	ldw	r2,-20(fp)
    dc20:	10c00b17 	ldw	r3,44(r2)
    dc24:	e0bffe17 	ldw	r2,-8(fp)
    dc28:	18801526 	beq	r3,r2,dc80 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    dc2c:	e0bffc17 	ldw	r2,-16(fp)
    dc30:	10800037 	ldwio	r2,0(r2)
    dc34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    dc38:	e0bff917 	ldw	r2,-28(fp)
    dc3c:	10a0000c 	andi	r2,r2,32768
    dc40:	10001126 	beq	r2,zero,dc88 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    dc44:	e0bffb17 	ldw	r2,-20(fp)
    dc48:	10800a17 	ldw	r2,40(r2)
    dc4c:	e0fff917 	ldw	r3,-28(fp)
    dc50:	1809883a 	mov	r4,r3
    dc54:	e0fffb17 	ldw	r3,-20(fp)
    dc58:	1885883a 	add	r2,r3,r2
    dc5c:	10800e04 	addi	r2,r2,56
    dc60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc64:	e0bffb17 	ldw	r2,-20(fp)
    dc68:	10800a17 	ldw	r2,40(r2)
    dc6c:	10800044 	addi	r2,r2,1
    dc70:	10c1ffcc 	andi	r3,r2,2047
    dc74:	e0bffb17 	ldw	r2,-20(fp)
    dc78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    dc7c:	003fe206 	br	dc08 <__alt_data_end+0xfffedc08>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    dc80:	0001883a 	nop
    dc84:	00000106 	br	dc8c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    dc88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    dc8c:	e0bff917 	ldw	r2,-28(fp)
    dc90:	10bfffec 	andhi	r2,r2,65535
    dc94:	10000f26 	beq	r2,zero,dcd4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dc98:	e0bffb17 	ldw	r2,-20(fp)
    dc9c:	10c00817 	ldw	r3,32(r2)
    dca0:	00bfff84 	movi	r2,-2
    dca4:	1886703a 	and	r3,r3,r2
    dca8:	e0bffb17 	ldw	r2,-20(fp)
    dcac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dcb0:	e0bffc17 	ldw	r2,-16(fp)
    dcb4:	10800104 	addi	r2,r2,4
    dcb8:	1007883a 	mov	r3,r2
    dcbc:	e0bffb17 	ldw	r2,-20(fp)
    dcc0:	10800817 	ldw	r2,32(r2)
    dcc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dcc8:	e0bffc17 	ldw	r2,-16(fp)
    dccc:	10800104 	addi	r2,r2,4
    dcd0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dcd4:	e0bffd17 	ldw	r2,-12(fp)
    dcd8:	1080800c 	andi	r2,r2,512
    dcdc:	103fbe26 	beq	r2,zero,dbd8 <__alt_data_end+0xfffedbd8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dce0:	e0bffd17 	ldw	r2,-12(fp)
    dce4:	1004d43a 	srli	r2,r2,16
    dce8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dcec:	00001406 	br	dd40 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dcf0:	e0bffc17 	ldw	r2,-16(fp)
    dcf4:	e0fffb17 	ldw	r3,-20(fp)
    dcf8:	18c00d17 	ldw	r3,52(r3)
    dcfc:	e13ffb17 	ldw	r4,-20(fp)
    dd00:	20c7883a 	add	r3,r4,r3
    dd04:	18c20e04 	addi	r3,r3,2104
    dd08:	18c00003 	ldbu	r3,0(r3)
    dd0c:	18c03fcc 	andi	r3,r3,255
    dd10:	18c0201c 	xori	r3,r3,128
    dd14:	18ffe004 	addi	r3,r3,-128
    dd18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd1c:	e0bffb17 	ldw	r2,-20(fp)
    dd20:	10800d17 	ldw	r2,52(r2)
    dd24:	10800044 	addi	r2,r2,1
    dd28:	10c1ffcc 	andi	r3,r2,2047
    dd2c:	e0bffb17 	ldw	r2,-20(fp)
    dd30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dd34:	e0bffa17 	ldw	r2,-24(fp)
    dd38:	10bfffc4 	addi	r2,r2,-1
    dd3c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dd40:	e0bffa17 	ldw	r2,-24(fp)
    dd44:	10000526 	beq	r2,zero,dd5c <altera_avalon_jtag_uart_irq+0x1a8>
    dd48:	e0bffb17 	ldw	r2,-20(fp)
    dd4c:	10c00d17 	ldw	r3,52(r2)
    dd50:	e0bffb17 	ldw	r2,-20(fp)
    dd54:	10800c17 	ldw	r2,48(r2)
    dd58:	18bfe51e 	bne	r3,r2,dcf0 <__alt_data_end+0xfffedcf0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dd5c:	e0bffa17 	ldw	r2,-24(fp)
    dd60:	103f9d26 	beq	r2,zero,dbd8 <__alt_data_end+0xfffedbd8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dd64:	e0bffb17 	ldw	r2,-20(fp)
    dd68:	10c00817 	ldw	r3,32(r2)
    dd6c:	00bfff44 	movi	r2,-3
    dd70:	1886703a 	and	r3,r3,r2
    dd74:	e0bffb17 	ldw	r2,-20(fp)
    dd78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dd7c:	e0bffb17 	ldw	r2,-20(fp)
    dd80:	10800017 	ldw	r2,0(r2)
    dd84:	10800104 	addi	r2,r2,4
    dd88:	1007883a 	mov	r3,r2
    dd8c:	e0bffb17 	ldw	r2,-20(fp)
    dd90:	10800817 	ldw	r2,32(r2)
    dd94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dd98:	e0bffc17 	ldw	r2,-16(fp)
    dd9c:	10800104 	addi	r2,r2,4
    dda0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dda4:	003f8c06 	br	dbd8 <__alt_data_end+0xfffedbd8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    dda8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ddac:	0001883a 	nop
    ddb0:	e037883a 	mov	sp,fp
    ddb4:	df000017 	ldw	fp,0(sp)
    ddb8:	dec00104 	addi	sp,sp,4
    ddbc:	f800283a 	ret

0000ddc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ddc0:	defff804 	addi	sp,sp,-32
    ddc4:	df000715 	stw	fp,28(sp)
    ddc8:	df000704 	addi	fp,sp,28
    ddcc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ddd0:	e0bffb17 	ldw	r2,-20(fp)
    ddd4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ddd8:	e0bff917 	ldw	r2,-28(fp)
    dddc:	10800017 	ldw	r2,0(r2)
    dde0:	10800104 	addi	r2,r2,4
    dde4:	10800037 	ldwio	r2,0(r2)
    dde8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ddec:	e0bffa17 	ldw	r2,-24(fp)
    ddf0:	1081000c 	andi	r2,r2,1024
    ddf4:	10000b26 	beq	r2,zero,de24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ddf8:	e0bff917 	ldw	r2,-28(fp)
    ddfc:	10800017 	ldw	r2,0(r2)
    de00:	10800104 	addi	r2,r2,4
    de04:	1007883a 	mov	r3,r2
    de08:	e0bff917 	ldw	r2,-28(fp)
    de0c:	10800817 	ldw	r2,32(r2)
    de10:	10810014 	ori	r2,r2,1024
    de14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    de18:	e0bff917 	ldw	r2,-28(fp)
    de1c:	10000915 	stw	zero,36(r2)
    de20:	00000a06 	br	de4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    de24:	e0bff917 	ldw	r2,-28(fp)
    de28:	10c00917 	ldw	r3,36(r2)
    de2c:	00a00034 	movhi	r2,32768
    de30:	10bfff04 	addi	r2,r2,-4
    de34:	10c00536 	bltu	r2,r3,de4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    de38:	e0bff917 	ldw	r2,-28(fp)
    de3c:	10800917 	ldw	r2,36(r2)
    de40:	10c00044 	addi	r3,r2,1
    de44:	e0bff917 	ldw	r2,-28(fp)
    de48:	10c00915 	stw	r3,36(r2)
    de4c:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    de50:	e037883a 	mov	sp,fp
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00104 	addi	sp,sp,4
    de5c:	f800283a 	ret

0000de60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    de60:	defffd04 	addi	sp,sp,-12
    de64:	df000215 	stw	fp,8(sp)
    de68:	df000204 	addi	fp,sp,8
    de6c:	e13ffe15 	stw	r4,-8(fp)
    de70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    de74:	00000506 	br	de8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    de78:	e0bfff17 	ldw	r2,-4(fp)
    de7c:	1090000c 	andi	r2,r2,16384
    de80:	10000226 	beq	r2,zero,de8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    de84:	00bffd44 	movi	r2,-11
    de88:	00000b06 	br	deb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    de8c:	e0bffe17 	ldw	r2,-8(fp)
    de90:	10c00d17 	ldw	r3,52(r2)
    de94:	e0bffe17 	ldw	r2,-8(fp)
    de98:	10800c17 	ldw	r2,48(r2)
    de9c:	18800526 	beq	r3,r2,deb4 <altera_avalon_jtag_uart_close+0x54>
    dea0:	e0bffe17 	ldw	r2,-8(fp)
    dea4:	10c00917 	ldw	r3,36(r2)
    dea8:	e0bffe17 	ldw	r2,-8(fp)
    deac:	10800117 	ldw	r2,4(r2)
    deb0:	18bff136 	bltu	r3,r2,de78 <__alt_data_end+0xfffede78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    deb4:	0005883a 	mov	r2,zero
}
    deb8:	e037883a 	mov	sp,fp
    debc:	df000017 	ldw	fp,0(sp)
    dec0:	dec00104 	addi	sp,sp,4
    dec4:	f800283a 	ret

0000dec8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dec8:	defffa04 	addi	sp,sp,-24
    decc:	df000515 	stw	fp,20(sp)
    ded0:	df000504 	addi	fp,sp,20
    ded4:	e13ffd15 	stw	r4,-12(fp)
    ded8:	e17ffe15 	stw	r5,-8(fp)
    dedc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dee0:	00bff9c4 	movi	r2,-25
    dee4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dee8:	e0bffe17 	ldw	r2,-8(fp)
    deec:	10da8060 	cmpeqi	r3,r2,27137
    def0:	1800031e 	bne	r3,zero,df00 <altera_avalon_jtag_uart_ioctl+0x38>
    def4:	109a80a0 	cmpeqi	r2,r2,27138
    def8:	1000181e 	bne	r2,zero,df5c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    defc:	00002906 	br	dfa4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    df00:	e0bffd17 	ldw	r2,-12(fp)
    df04:	10c00117 	ldw	r3,4(r2)
    df08:	00a00034 	movhi	r2,32768
    df0c:	10bfffc4 	addi	r2,r2,-1
    df10:	18802126 	beq	r3,r2,df98 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    df14:	e0bfff17 	ldw	r2,-4(fp)
    df18:	10800017 	ldw	r2,0(r2)
    df1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    df20:	e0bffc17 	ldw	r2,-16(fp)
    df24:	10800090 	cmplti	r2,r2,2
    df28:	1000061e 	bne	r2,zero,df44 <altera_avalon_jtag_uart_ioctl+0x7c>
    df2c:	e0fffc17 	ldw	r3,-16(fp)
    df30:	00a00034 	movhi	r2,32768
    df34:	10bfffc4 	addi	r2,r2,-1
    df38:	18800226 	beq	r3,r2,df44 <altera_avalon_jtag_uart_ioctl+0x7c>
    df3c:	e0bffc17 	ldw	r2,-16(fp)
    df40:	00000206 	br	df4c <altera_avalon_jtag_uart_ioctl+0x84>
    df44:	00a00034 	movhi	r2,32768
    df48:	10bfff84 	addi	r2,r2,-2
    df4c:	e0fffd17 	ldw	r3,-12(fp)
    df50:	18800115 	stw	r2,4(r3)
      rc = 0;
    df54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    df58:	00000f06 	br	df98 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    df5c:	e0bffd17 	ldw	r2,-12(fp)
    df60:	10c00117 	ldw	r3,4(r2)
    df64:	00a00034 	movhi	r2,32768
    df68:	10bfffc4 	addi	r2,r2,-1
    df6c:	18800c26 	beq	r3,r2,dfa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    df70:	e0bffd17 	ldw	r2,-12(fp)
    df74:	10c00917 	ldw	r3,36(r2)
    df78:	e0bffd17 	ldw	r2,-12(fp)
    df7c:	10800117 	ldw	r2,4(r2)
    df80:	1885803a 	cmpltu	r2,r3,r2
    df84:	10c03fcc 	andi	r3,r2,255
    df88:	e0bfff17 	ldw	r2,-4(fp)
    df8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    df90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    df94:	00000206 	br	dfa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    df98:	0001883a 	nop
    df9c:	00000106 	br	dfa4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dfa0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dfa4:	e0bffb17 	ldw	r2,-20(fp)
}
    dfa8:	e037883a 	mov	sp,fp
    dfac:	df000017 	ldw	fp,0(sp)
    dfb0:	dec00104 	addi	sp,sp,4
    dfb4:	f800283a 	ret

0000dfb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dfb8:	defff304 	addi	sp,sp,-52
    dfbc:	dfc00c15 	stw	ra,48(sp)
    dfc0:	df000b15 	stw	fp,44(sp)
    dfc4:	df000b04 	addi	fp,sp,44
    dfc8:	e13ffc15 	stw	r4,-16(fp)
    dfcc:	e17ffd15 	stw	r5,-12(fp)
    dfd0:	e1bffe15 	stw	r6,-8(fp)
    dfd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dfd8:	e0bffd17 	ldw	r2,-12(fp)
    dfdc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dfe0:	00004706 	br	e100 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	10800a17 	ldw	r2,40(r2)
    dfec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dff0:	e0bffc17 	ldw	r2,-16(fp)
    dff4:	10800b17 	ldw	r2,44(r2)
    dff8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dffc:	e0fff717 	ldw	r3,-36(fp)
    e000:	e0bff817 	ldw	r2,-32(fp)
    e004:	18800536 	bltu	r3,r2,e01c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e008:	e0fff717 	ldw	r3,-36(fp)
    e00c:	e0bff817 	ldw	r2,-32(fp)
    e010:	1885c83a 	sub	r2,r3,r2
    e014:	e0bff615 	stw	r2,-40(fp)
    e018:	00000406 	br	e02c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e01c:	00c20004 	movi	r3,2048
    e020:	e0bff817 	ldw	r2,-32(fp)
    e024:	1885c83a 	sub	r2,r3,r2
    e028:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e02c:	e0bff617 	ldw	r2,-40(fp)
    e030:	10001e26 	beq	r2,zero,e0ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e034:	e0fffe17 	ldw	r3,-8(fp)
    e038:	e0bff617 	ldw	r2,-40(fp)
    e03c:	1880022e 	bgeu	r3,r2,e048 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e040:	e0bffe17 	ldw	r2,-8(fp)
    e044:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e048:	e0bffc17 	ldw	r2,-16(fp)
    e04c:	10c00e04 	addi	r3,r2,56
    e050:	e0bff817 	ldw	r2,-32(fp)
    e054:	1885883a 	add	r2,r3,r2
    e058:	e1bff617 	ldw	r6,-40(fp)
    e05c:	100b883a 	mov	r5,r2
    e060:	e13ff517 	ldw	r4,-44(fp)
    e064:	00061440 	call	6144 <memcpy>
      ptr   += n;
    e068:	e0fff517 	ldw	r3,-44(fp)
    e06c:	e0bff617 	ldw	r2,-40(fp)
    e070:	1885883a 	add	r2,r3,r2
    e074:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e078:	e0fffe17 	ldw	r3,-8(fp)
    e07c:	e0bff617 	ldw	r2,-40(fp)
    e080:	1885c83a 	sub	r2,r3,r2
    e084:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e088:	e0fff817 	ldw	r3,-32(fp)
    e08c:	e0bff617 	ldw	r2,-40(fp)
    e090:	1885883a 	add	r2,r3,r2
    e094:	10c1ffcc 	andi	r3,r2,2047
    e098:	e0bffc17 	ldw	r2,-16(fp)
    e09c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e0a0:	e0bffe17 	ldw	r2,-8(fp)
    e0a4:	00bfcf16 	blt	zero,r2,dfe4 <__alt_data_end+0xfffedfe4>
    e0a8:	00000106 	br	e0b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e0ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e0b0:	e0fff517 	ldw	r3,-44(fp)
    e0b4:	e0bffd17 	ldw	r2,-12(fp)
    e0b8:	1880141e 	bne	r3,r2,e10c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e0bc:	e0bfff17 	ldw	r2,-4(fp)
    e0c0:	1090000c 	andi	r2,r2,16384
    e0c4:	1000131e 	bne	r2,zero,e114 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e0c8:	0001883a 	nop
    e0cc:	e0bffc17 	ldw	r2,-16(fp)
    e0d0:	10c00a17 	ldw	r3,40(r2)
    e0d4:	e0bff717 	ldw	r2,-36(fp)
    e0d8:	1880051e 	bne	r3,r2,e0f0 <altera_avalon_jtag_uart_read+0x138>
    e0dc:	e0bffc17 	ldw	r2,-16(fp)
    e0e0:	10c00917 	ldw	r3,36(r2)
    e0e4:	e0bffc17 	ldw	r2,-16(fp)
    e0e8:	10800117 	ldw	r2,4(r2)
    e0ec:	18bff736 	bltu	r3,r2,e0cc <__alt_data_end+0xfffee0cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e0f0:	e0bffc17 	ldw	r2,-16(fp)
    e0f4:	10c00a17 	ldw	r3,40(r2)
    e0f8:	e0bff717 	ldw	r2,-36(fp)
    e0fc:	18800726 	beq	r3,r2,e11c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e100:	e0bffe17 	ldw	r2,-8(fp)
    e104:	00bfb716 	blt	zero,r2,dfe4 <__alt_data_end+0xfffedfe4>
    e108:	00000506 	br	e120 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e10c:	0001883a 	nop
    e110:	00000306 	br	e120 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e114:	0001883a 	nop
    e118:	00000106 	br	e120 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e11c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e120:	e0fff517 	ldw	r3,-44(fp)
    e124:	e0bffd17 	ldw	r2,-12(fp)
    e128:	18801826 	beq	r3,r2,e18c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e12c:	0005303a 	rdctl	r2,status
    e130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e134:	e0fffb17 	ldw	r3,-20(fp)
    e138:	00bfff84 	movi	r2,-2
    e13c:	1884703a 	and	r2,r3,r2
    e140:	1001703a 	wrctl	status,r2
  
  return context;
    e144:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e148:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	10800817 	ldw	r2,32(r2)
    e154:	10c00054 	ori	r3,r2,1
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e160:	e0bffc17 	ldw	r2,-16(fp)
    e164:	10800017 	ldw	r2,0(r2)
    e168:	10800104 	addi	r2,r2,4
    e16c:	1007883a 	mov	r3,r2
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	10800817 	ldw	r2,32(r2)
    e178:	18800035 	stwio	r2,0(r3)
    e17c:	e0bffa17 	ldw	r2,-24(fp)
    e180:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e184:	e0bff917 	ldw	r2,-28(fp)
    e188:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e18c:	e0fff517 	ldw	r3,-44(fp)
    e190:	e0bffd17 	ldw	r2,-12(fp)
    e194:	18800426 	beq	r3,r2,e1a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e198:	e0fff517 	ldw	r3,-44(fp)
    e19c:	e0bffd17 	ldw	r2,-12(fp)
    e1a0:	1885c83a 	sub	r2,r3,r2
    e1a4:	00000606 	br	e1c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	1090000c 	andi	r2,r2,16384
    e1b0:	10000226 	beq	r2,zero,e1bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e1b4:	00bffd44 	movi	r2,-11
    e1b8:	00000106 	br	e1c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e1bc:	00bffec4 	movi	r2,-5
}
    e1c0:	e037883a 	mov	sp,fp
    e1c4:	dfc00117 	ldw	ra,4(sp)
    e1c8:	df000017 	ldw	fp,0(sp)
    e1cc:	dec00204 	addi	sp,sp,8
    e1d0:	f800283a 	ret

0000e1d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e1d4:	defff304 	addi	sp,sp,-52
    e1d8:	dfc00c15 	stw	ra,48(sp)
    e1dc:	df000b15 	stw	fp,44(sp)
    e1e0:	df000b04 	addi	fp,sp,44
    e1e4:	e13ffc15 	stw	r4,-16(fp)
    e1e8:	e17ffd15 	stw	r5,-12(fp)
    e1ec:	e1bffe15 	stw	r6,-8(fp)
    e1f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e1f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e1f8:	e0bffd17 	ldw	r2,-12(fp)
    e1fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e200:	00003706 	br	e2e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e204:	e0bffc17 	ldw	r2,-16(fp)
    e208:	10800c17 	ldw	r2,48(r2)
    e20c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e210:	e0bffc17 	ldw	r2,-16(fp)
    e214:	10800d17 	ldw	r2,52(r2)
    e218:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e21c:	e0fff917 	ldw	r3,-28(fp)
    e220:	e0bff517 	ldw	r2,-44(fp)
    e224:	1880062e 	bgeu	r3,r2,e240 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e228:	e0fff517 	ldw	r3,-44(fp)
    e22c:	e0bff917 	ldw	r2,-28(fp)
    e230:	1885c83a 	sub	r2,r3,r2
    e234:	10bfffc4 	addi	r2,r2,-1
    e238:	e0bff615 	stw	r2,-40(fp)
    e23c:	00000b06 	br	e26c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e240:	e0bff517 	ldw	r2,-44(fp)
    e244:	10000526 	beq	r2,zero,e25c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e248:	00c20004 	movi	r3,2048
    e24c:	e0bff917 	ldw	r2,-28(fp)
    e250:	1885c83a 	sub	r2,r3,r2
    e254:	e0bff615 	stw	r2,-40(fp)
    e258:	00000406 	br	e26c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e25c:	00c1ffc4 	movi	r3,2047
    e260:	e0bff917 	ldw	r2,-28(fp)
    e264:	1885c83a 	sub	r2,r3,r2
    e268:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e26c:	e0bff617 	ldw	r2,-40(fp)
    e270:	10001e26 	beq	r2,zero,e2ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e274:	e0fffe17 	ldw	r3,-8(fp)
    e278:	e0bff617 	ldw	r2,-40(fp)
    e27c:	1880022e 	bgeu	r3,r2,e288 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e280:	e0bffe17 	ldw	r2,-8(fp)
    e284:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e288:	e0bffc17 	ldw	r2,-16(fp)
    e28c:	10c20e04 	addi	r3,r2,2104
    e290:	e0bff917 	ldw	r2,-28(fp)
    e294:	1885883a 	add	r2,r3,r2
    e298:	e1bff617 	ldw	r6,-40(fp)
    e29c:	e17ffd17 	ldw	r5,-12(fp)
    e2a0:	1009883a 	mov	r4,r2
    e2a4:	00061440 	call	6144 <memcpy>
      ptr   += n;
    e2a8:	e0fffd17 	ldw	r3,-12(fp)
    e2ac:	e0bff617 	ldw	r2,-40(fp)
    e2b0:	1885883a 	add	r2,r3,r2
    e2b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e2b8:	e0fffe17 	ldw	r3,-8(fp)
    e2bc:	e0bff617 	ldw	r2,-40(fp)
    e2c0:	1885c83a 	sub	r2,r3,r2
    e2c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e2c8:	e0fff917 	ldw	r3,-28(fp)
    e2cc:	e0bff617 	ldw	r2,-40(fp)
    e2d0:	1885883a 	add	r2,r3,r2
    e2d4:	10c1ffcc 	andi	r3,r2,2047
    e2d8:	e0bffc17 	ldw	r2,-16(fp)
    e2dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e2e0:	e0bffe17 	ldw	r2,-8(fp)
    e2e4:	00bfc716 	blt	zero,r2,e204 <__alt_data_end+0xfffee204>
    e2e8:	00000106 	br	e2f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e2ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2f0:	0005303a 	rdctl	r2,status
    e2f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2f8:	e0fffb17 	ldw	r3,-20(fp)
    e2fc:	00bfff84 	movi	r2,-2
    e300:	1884703a 	and	r2,r3,r2
    e304:	1001703a 	wrctl	status,r2
  
  return context;
    e308:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e30c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e310:	e0bffc17 	ldw	r2,-16(fp)
    e314:	10800817 	ldw	r2,32(r2)
    e318:	10c00094 	ori	r3,r2,2
    e31c:	e0bffc17 	ldw	r2,-16(fp)
    e320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e324:	e0bffc17 	ldw	r2,-16(fp)
    e328:	10800017 	ldw	r2,0(r2)
    e32c:	10800104 	addi	r2,r2,4
    e330:	1007883a 	mov	r3,r2
    e334:	e0bffc17 	ldw	r2,-16(fp)
    e338:	10800817 	ldw	r2,32(r2)
    e33c:	18800035 	stwio	r2,0(r3)
    e340:	e0bffa17 	ldw	r2,-24(fp)
    e344:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e348:	e0bff817 	ldw	r2,-32(fp)
    e34c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e350:	e0bffe17 	ldw	r2,-8(fp)
    e354:	0080100e 	bge	zero,r2,e398 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e358:	e0bfff17 	ldw	r2,-4(fp)
    e35c:	1090000c 	andi	r2,r2,16384
    e360:	1000101e 	bne	r2,zero,e3a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e364:	0001883a 	nop
    e368:	e0bffc17 	ldw	r2,-16(fp)
    e36c:	10c00d17 	ldw	r3,52(r2)
    e370:	e0bff517 	ldw	r2,-44(fp)
    e374:	1880051e 	bne	r3,r2,e38c <altera_avalon_jtag_uart_write+0x1b8>
    e378:	e0bffc17 	ldw	r2,-16(fp)
    e37c:	10c00917 	ldw	r3,36(r2)
    e380:	e0bffc17 	ldw	r2,-16(fp)
    e384:	10800117 	ldw	r2,4(r2)
    e388:	18bff736 	bltu	r3,r2,e368 <__alt_data_end+0xfffee368>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e38c:	e0bffc17 	ldw	r2,-16(fp)
    e390:	10800917 	ldw	r2,36(r2)
    e394:	1000051e 	bne	r2,zero,e3ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e398:	e0bffe17 	ldw	r2,-8(fp)
    e39c:	00bfd016 	blt	zero,r2,e2e0 <__alt_data_end+0xfffee2e0>
    e3a0:	00000306 	br	e3b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e3a4:	0001883a 	nop
    e3a8:	00000106 	br	e3b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e3ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e3b0:	e0fffd17 	ldw	r3,-12(fp)
    e3b4:	e0bff717 	ldw	r2,-36(fp)
    e3b8:	18800426 	beq	r3,r2,e3cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e3bc:	e0fffd17 	ldw	r3,-12(fp)
    e3c0:	e0bff717 	ldw	r2,-36(fp)
    e3c4:	1885c83a 	sub	r2,r3,r2
    e3c8:	00000606 	br	e3e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e3cc:	e0bfff17 	ldw	r2,-4(fp)
    e3d0:	1090000c 	andi	r2,r2,16384
    e3d4:	10000226 	beq	r2,zero,e3e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e3d8:	00bffd44 	movi	r2,-11
    e3dc:	00000106 	br	e3e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e3e0:	00bffec4 	movi	r2,-5
}
    e3e4:	e037883a 	mov	sp,fp
    e3e8:	dfc00117 	ldw	ra,4(sp)
    e3ec:	df000017 	ldw	fp,0(sp)
    e3f0:	dec00204 	addi	sp,sp,8
    e3f4:	f800283a 	ret

0000e3f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e3f8:	defff504 	addi	sp,sp,-44
    e3fc:	df000a15 	stw	fp,40(sp)
    e400:	df000a04 	addi	fp,sp,40
    e404:	e13ffc15 	stw	r4,-16(fp)
    e408:	e17ffd15 	stw	r5,-12(fp)
    e40c:	e1bffe15 	stw	r6,-8(fp)
    e410:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e414:	e03ff615 	stw	zero,-40(fp)
    e418:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
    e41c:	10003c26 	beq	r2,zero,e510 <alt_alarm_start+0x118>
  {
    if (alarm)
    e420:	e0bffc17 	ldw	r2,-16(fp)
    e424:	10003826 	beq	r2,zero,e508 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e428:	e0bffc17 	ldw	r2,-16(fp)
    e42c:	e0fffe17 	ldw	r3,-8(fp)
    e430:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e434:	e0bffc17 	ldw	r2,-16(fp)
    e438:	e0ffff17 	ldw	r3,-4(fp)
    e43c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e440:	0005303a 	rdctl	r2,status
    e444:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e448:	e0fff917 	ldw	r3,-28(fp)
    e44c:	00bfff84 	movi	r2,-2
    e450:	1884703a 	and	r2,r3,r2
    e454:	1001703a 	wrctl	status,r2
  
  return context;
    e458:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e45c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e460:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
    e464:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e468:	e0fffd17 	ldw	r3,-12(fp)
    e46c:	e0bff617 	ldw	r2,-40(fp)
    e470:	1885883a 	add	r2,r3,r2
    e474:	10c00044 	addi	r3,r2,1
    e478:	e0bffc17 	ldw	r2,-16(fp)
    e47c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e480:	e0bffc17 	ldw	r2,-16(fp)
    e484:	10c00217 	ldw	r3,8(r2)
    e488:	e0bff617 	ldw	r2,-40(fp)
    e48c:	1880042e 	bgeu	r3,r2,e4a0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e490:	e0bffc17 	ldw	r2,-16(fp)
    e494:	00c00044 	movi	r3,1
    e498:	10c00405 	stb	r3,16(r2)
    e49c:	00000206 	br	e4a8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e4a0:	e0bffc17 	ldw	r2,-16(fp)
    e4a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e4a8:	e0bffc17 	ldw	r2,-16(fp)
    e4ac:	d0e00e04 	addi	r3,gp,-32712
    e4b0:	e0fffa15 	stw	r3,-24(fp)
    e4b4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e4b8:	e0bffb17 	ldw	r2,-20(fp)
    e4bc:	e0fffa17 	ldw	r3,-24(fp)
    e4c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e4c4:	e0bffa17 	ldw	r2,-24(fp)
    e4c8:	10c00017 	ldw	r3,0(r2)
    e4cc:	e0bffb17 	ldw	r2,-20(fp)
    e4d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e4d4:	e0bffa17 	ldw	r2,-24(fp)
    e4d8:	10800017 	ldw	r2,0(r2)
    e4dc:	e0fffb17 	ldw	r3,-20(fp)
    e4e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e4e4:	e0bffa17 	ldw	r2,-24(fp)
    e4e8:	e0fffb17 	ldw	r3,-20(fp)
    e4ec:	10c00015 	stw	r3,0(r2)
    e4f0:	e0bff817 	ldw	r2,-32(fp)
    e4f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4f8:	e0bff717 	ldw	r2,-36(fp)
    e4fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e500:	0005883a 	mov	r2,zero
    e504:	00000306 	br	e514 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    e508:	00bffa84 	movi	r2,-22
    e50c:	00000106 	br	e514 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    e510:	00bfde84 	movi	r2,-134
  }
}
    e514:	e037883a 	mov	sp,fp
    e518:	df000017 	ldw	fp,0(sp)
    e51c:	dec00104 	addi	sp,sp,4
    e520:	f800283a 	ret

0000e524 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e524:	defffe04 	addi	sp,sp,-8
    e528:	df000115 	stw	fp,4(sp)
    e52c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e530:	e03fff15 	stw	zero,-4(fp)
    e534:	00000506 	br	e54c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e538:	e0bfff17 	ldw	r2,-4(fp)
    e53c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e540:	e0bfff17 	ldw	r2,-4(fp)
    e544:	10800804 	addi	r2,r2,32
    e548:	e0bfff15 	stw	r2,-4(fp)
    e54c:	e0bfff17 	ldw	r2,-4(fp)
    e550:	10820030 	cmpltui	r2,r2,2048
    e554:	103ff81e 	bne	r2,zero,e538 <__alt_data_end+0xfffee538>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e558:	0001883a 	nop
    e55c:	e037883a 	mov	sp,fp
    e560:	df000017 	ldw	fp,0(sp)
    e564:	dec00104 	addi	sp,sp,4
    e568:	f800283a 	ret

0000e56c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e56c:	defffe04 	addi	sp,sp,-8
    e570:	dfc00115 	stw	ra,4(sp)
    e574:	df000015 	stw	fp,0(sp)
    e578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e57c:	d0a00b17 	ldw	r2,-32724(gp)
    e580:	10000326 	beq	r2,zero,e590 <alt_get_errno+0x24>
    e584:	d0a00b17 	ldw	r2,-32724(gp)
    e588:	103ee83a 	callr	r2
    e58c:	00000106 	br	e594 <alt_get_errno+0x28>
    e590:	d0a6d104 	addi	r2,gp,-25788
}
    e594:	e037883a 	mov	sp,fp
    e598:	dfc00117 	ldw	ra,4(sp)
    e59c:	df000017 	ldw	fp,0(sp)
    e5a0:	dec00204 	addi	sp,sp,8
    e5a4:	f800283a 	ret

0000e5a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e5a8:	defffa04 	addi	sp,sp,-24
    e5ac:	dfc00515 	stw	ra,20(sp)
    e5b0:	df000415 	stw	fp,16(sp)
    e5b4:	df000404 	addi	fp,sp,16
    e5b8:	e13ffe15 	stw	r4,-8(fp)
    e5bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e5c0:	e0bffe17 	ldw	r2,-8(fp)
    e5c4:	10000326 	beq	r2,zero,e5d4 <alt_dev_llist_insert+0x2c>
    e5c8:	e0bffe17 	ldw	r2,-8(fp)
    e5cc:	10800217 	ldw	r2,8(r2)
    e5d0:	1000061e 	bne	r2,zero,e5ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e5d4:	000e56c0 	call	e56c <alt_get_errno>
    e5d8:	1007883a 	mov	r3,r2
    e5dc:	00800584 	movi	r2,22
    e5e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e5e4:	00bffa84 	movi	r2,-22
    e5e8:	00001306 	br	e638 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e5ec:	e0bffe17 	ldw	r2,-8(fp)
    e5f0:	e0ffff17 	ldw	r3,-4(fp)
    e5f4:	e0fffc15 	stw	r3,-16(fp)
    e5f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e5fc:	e0bffd17 	ldw	r2,-12(fp)
    e600:	e0fffc17 	ldw	r3,-16(fp)
    e604:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e608:	e0bffc17 	ldw	r2,-16(fp)
    e60c:	10c00017 	ldw	r3,0(r2)
    e610:	e0bffd17 	ldw	r2,-12(fp)
    e614:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e618:	e0bffc17 	ldw	r2,-16(fp)
    e61c:	10800017 	ldw	r2,0(r2)
    e620:	e0fffd17 	ldw	r3,-12(fp)
    e624:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e628:	e0bffc17 	ldw	r2,-16(fp)
    e62c:	e0fffd17 	ldw	r3,-12(fp)
    e630:	10c00015 	stw	r3,0(r2)

  return 0;  
    e634:	0005883a 	mov	r2,zero
}
    e638:	e037883a 	mov	sp,fp
    e63c:	dfc00117 	ldw	ra,4(sp)
    e640:	df000017 	ldw	fp,0(sp)
    e644:	dec00204 	addi	sp,sp,8
    e648:	f800283a 	ret

0000e64c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e64c:	defffd04 	addi	sp,sp,-12
    e650:	dfc00215 	stw	ra,8(sp)
    e654:	df000115 	stw	fp,4(sp)
    e658:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e65c:	00800074 	movhi	r2,1
    e660:	10bd8d04 	addi	r2,r2,-2508
    e664:	e0bfff15 	stw	r2,-4(fp)
    e668:	00000606 	br	e684 <_do_ctors+0x38>
        (*ctor) (); 
    e66c:	e0bfff17 	ldw	r2,-4(fp)
    e670:	10800017 	ldw	r2,0(r2)
    e674:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e678:	e0bfff17 	ldw	r2,-4(fp)
    e67c:	10bfff04 	addi	r2,r2,-4
    e680:	e0bfff15 	stw	r2,-4(fp)
    e684:	e0ffff17 	ldw	r3,-4(fp)
    e688:	00800074 	movhi	r2,1
    e68c:	10bd8e04 	addi	r2,r2,-2504
    e690:	18bff62e 	bgeu	r3,r2,e66c <__alt_data_end+0xfffee66c>
        (*ctor) (); 
}
    e694:	0001883a 	nop
    e698:	e037883a 	mov	sp,fp
    e69c:	dfc00117 	ldw	ra,4(sp)
    e6a0:	df000017 	ldw	fp,0(sp)
    e6a4:	dec00204 	addi	sp,sp,8
    e6a8:	f800283a 	ret

0000e6ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e6ac:	defffd04 	addi	sp,sp,-12
    e6b0:	dfc00215 	stw	ra,8(sp)
    e6b4:	df000115 	stw	fp,4(sp)
    e6b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e6bc:	00800074 	movhi	r2,1
    e6c0:	10bd8d04 	addi	r2,r2,-2508
    e6c4:	e0bfff15 	stw	r2,-4(fp)
    e6c8:	00000606 	br	e6e4 <_do_dtors+0x38>
        (*dtor) (); 
    e6cc:	e0bfff17 	ldw	r2,-4(fp)
    e6d0:	10800017 	ldw	r2,0(r2)
    e6d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e6d8:	e0bfff17 	ldw	r2,-4(fp)
    e6dc:	10bfff04 	addi	r2,r2,-4
    e6e0:	e0bfff15 	stw	r2,-4(fp)
    e6e4:	e0ffff17 	ldw	r3,-4(fp)
    e6e8:	00800074 	movhi	r2,1
    e6ec:	10bd8e04 	addi	r2,r2,-2504
    e6f0:	18bff62e 	bgeu	r3,r2,e6cc <__alt_data_end+0xfffee6cc>
        (*dtor) (); 
}
    e6f4:	0001883a 	nop
    e6f8:	e037883a 	mov	sp,fp
    e6fc:	dfc00117 	ldw	ra,4(sp)
    e700:	df000017 	ldw	fp,0(sp)
    e704:	dec00204 	addi	sp,sp,8
    e708:	f800283a 	ret

0000e70c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e70c:	defffe04 	addi	sp,sp,-8
    e710:	dfc00115 	stw	ra,4(sp)
    e714:	df000015 	stw	fp,0(sp)
    e718:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e71c:	01440004 	movi	r5,4096
    e720:	0009883a 	mov	r4,zero
    e724:	000f1780 	call	f178 <alt_icache_flush>
#endif
}
    e728:	0001883a 	nop
    e72c:	e037883a 	mov	sp,fp
    e730:	dfc00117 	ldw	ra,4(sp)
    e734:	df000017 	ldw	fp,0(sp)
    e738:	dec00204 	addi	sp,sp,8
    e73c:	f800283a 	ret

0000e740 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e740:	defff904 	addi	sp,sp,-28
    e744:	dfc00615 	stw	ra,24(sp)
    e748:	df000515 	stw	fp,20(sp)
    e74c:	df000504 	addi	fp,sp,20
    e750:	e13ffc15 	stw	r4,-16(fp)
    e754:	e17ffd15 	stw	r5,-12(fp)
    e758:	e1bffe15 	stw	r6,-8(fp)
    e75c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    e760:	e0800217 	ldw	r2,8(fp)
    e764:	d8800015 	stw	r2,0(sp)
    e768:	e1ffff17 	ldw	r7,-4(fp)
    e76c:	e1bffe17 	ldw	r6,-8(fp)
    e770:	e17ffd17 	ldw	r5,-12(fp)
    e774:	e13ffc17 	ldw	r4,-16(fp)
    e778:	000e8f00 	call	e8f0 <alt_iic_isr_register>
}  
    e77c:	e037883a 	mov	sp,fp
    e780:	dfc00117 	ldw	ra,4(sp)
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00204 	addi	sp,sp,8
    e78c:	f800283a 	ret

0000e790 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    e790:	defff904 	addi	sp,sp,-28
    e794:	df000615 	stw	fp,24(sp)
    e798:	df000604 	addi	fp,sp,24
    e79c:	e13ffe15 	stw	r4,-8(fp)
    e7a0:	e17fff15 	stw	r5,-4(fp)
    e7a4:	e0bfff17 	ldw	r2,-4(fp)
    e7a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7ac:	0005303a 	rdctl	r2,status
    e7b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7b4:	e0fffb17 	ldw	r3,-20(fp)
    e7b8:	00bfff84 	movi	r2,-2
    e7bc:	1884703a 	and	r2,r3,r2
    e7c0:	1001703a 	wrctl	status,r2
  
  return context;
    e7c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e7c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    e7cc:	00c00044 	movi	r3,1
    e7d0:	e0bffa17 	ldw	r2,-24(fp)
    e7d4:	1884983a 	sll	r2,r3,r2
    e7d8:	1007883a 	mov	r3,r2
    e7dc:	d0a6d517 	ldw	r2,-25772(gp)
    e7e0:	1884b03a 	or	r2,r3,r2
    e7e4:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e7e8:	d0a6d517 	ldw	r2,-25772(gp)
    e7ec:	100170fa 	wrctl	ienable,r2
    e7f0:	e0bffc17 	ldw	r2,-16(fp)
    e7f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7f8:	e0bffd17 	ldw	r2,-12(fp)
    e7fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e800:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    e804:	0001883a 	nop
}
    e808:	e037883a 	mov	sp,fp
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00104 	addi	sp,sp,4
    e814:	f800283a 	ret

0000e818 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e818:	defff904 	addi	sp,sp,-28
    e81c:	df000615 	stw	fp,24(sp)
    e820:	df000604 	addi	fp,sp,24
    e824:	e13ffe15 	stw	r4,-8(fp)
    e828:	e17fff15 	stw	r5,-4(fp)
    e82c:	e0bfff17 	ldw	r2,-4(fp)
    e830:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e834:	0005303a 	rdctl	r2,status
    e838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e83c:	e0fffb17 	ldw	r3,-20(fp)
    e840:	00bfff84 	movi	r2,-2
    e844:	1884703a 	and	r2,r3,r2
    e848:	1001703a 	wrctl	status,r2
  
  return context;
    e84c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e850:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    e854:	00c00044 	movi	r3,1
    e858:	e0bffa17 	ldw	r2,-24(fp)
    e85c:	1884983a 	sll	r2,r3,r2
    e860:	0084303a 	nor	r2,zero,r2
    e864:	1007883a 	mov	r3,r2
    e868:	d0a6d517 	ldw	r2,-25772(gp)
    e86c:	1884703a 	and	r2,r3,r2
    e870:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e874:	d0a6d517 	ldw	r2,-25772(gp)
    e878:	100170fa 	wrctl	ienable,r2
    e87c:	e0bffc17 	ldw	r2,-16(fp)
    e880:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e884:	e0bffd17 	ldw	r2,-12(fp)
    e888:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e88c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    e890:	0001883a 	nop
}
    e894:	e037883a 	mov	sp,fp
    e898:	df000017 	ldw	fp,0(sp)
    e89c:	dec00104 	addi	sp,sp,4
    e8a0:	f800283a 	ret

0000e8a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e8a4:	defffc04 	addi	sp,sp,-16
    e8a8:	df000315 	stw	fp,12(sp)
    e8ac:	df000304 	addi	fp,sp,12
    e8b0:	e13ffe15 	stw	r4,-8(fp)
    e8b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e8b8:	000530fa 	rdctl	r2,ienable
    e8bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e8c0:	00c00044 	movi	r3,1
    e8c4:	e0bfff17 	ldw	r2,-4(fp)
    e8c8:	1884983a 	sll	r2,r3,r2
    e8cc:	1007883a 	mov	r3,r2
    e8d0:	e0bffd17 	ldw	r2,-12(fp)
    e8d4:	1884703a 	and	r2,r3,r2
    e8d8:	1004c03a 	cmpne	r2,r2,zero
    e8dc:	10803fcc 	andi	r2,r2,255
}
    e8e0:	e037883a 	mov	sp,fp
    e8e4:	df000017 	ldw	fp,0(sp)
    e8e8:	dec00104 	addi	sp,sp,4
    e8ec:	f800283a 	ret

0000e8f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e8f0:	defff504 	addi	sp,sp,-44
    e8f4:	dfc00a15 	stw	ra,40(sp)
    e8f8:	df000915 	stw	fp,36(sp)
    e8fc:	df000904 	addi	fp,sp,36
    e900:	e13ffc15 	stw	r4,-16(fp)
    e904:	e17ffd15 	stw	r5,-12(fp)
    e908:	e1bffe15 	stw	r6,-8(fp)
    e90c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e910:	00bffa84 	movi	r2,-22
    e914:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e918:	e0bffd17 	ldw	r2,-12(fp)
    e91c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e920:	e0bff817 	ldw	r2,-32(fp)
    e924:	10800808 	cmpgei	r2,r2,32
    e928:	1000271e 	bne	r2,zero,e9c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e92c:	0005303a 	rdctl	r2,status
    e930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e934:	e0fffb17 	ldw	r3,-20(fp)
    e938:	00bfff84 	movi	r2,-2
    e93c:	1884703a 	and	r2,r3,r2
    e940:	1001703a 	wrctl	status,r2
  
  return context;
    e944:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e948:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    e94c:	00800074 	movhi	r2,1
    e950:	108c4404 	addi	r2,r2,12560
    e954:	e0fff817 	ldw	r3,-32(fp)
    e958:	180690fa 	slli	r3,r3,3
    e95c:	10c5883a 	add	r2,r2,r3
    e960:	e0fffe17 	ldw	r3,-8(fp)
    e964:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    e968:	00800074 	movhi	r2,1
    e96c:	108c4404 	addi	r2,r2,12560
    e970:	e0fff817 	ldw	r3,-32(fp)
    e974:	180690fa 	slli	r3,r3,3
    e978:	10c5883a 	add	r2,r2,r3
    e97c:	10800104 	addi	r2,r2,4
    e980:	e0ffff17 	ldw	r3,-4(fp)
    e984:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e988:	e0bffe17 	ldw	r2,-8(fp)
    e98c:	10000526 	beq	r2,zero,e9a4 <alt_iic_isr_register+0xb4>
    e990:	e0bff817 	ldw	r2,-32(fp)
    e994:	100b883a 	mov	r5,r2
    e998:	e13ffc17 	ldw	r4,-16(fp)
    e99c:	000e7900 	call	e790 <alt_ic_irq_enable>
    e9a0:	00000406 	br	e9b4 <alt_iic_isr_register+0xc4>
    e9a4:	e0bff817 	ldw	r2,-32(fp)
    e9a8:	100b883a 	mov	r5,r2
    e9ac:	e13ffc17 	ldw	r4,-16(fp)
    e9b0:	000e8180 	call	e818 <alt_ic_irq_disable>
    e9b4:	e0bff715 	stw	r2,-36(fp)
    e9b8:	e0bffa17 	ldw	r2,-24(fp)
    e9bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9c0:	e0bff917 	ldw	r2,-28(fp)
    e9c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e9c8:	e0bff717 	ldw	r2,-36(fp)
}
    e9cc:	e037883a 	mov	sp,fp
    e9d0:	dfc00117 	ldw	ra,4(sp)
    e9d4:	df000017 	ldw	fp,0(sp)
    e9d8:	dec00204 	addi	sp,sp,8
    e9dc:	f800283a 	ret

0000e9e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e9e0:	defff904 	addi	sp,sp,-28
    e9e4:	dfc00615 	stw	ra,24(sp)
    e9e8:	df000515 	stw	fp,20(sp)
    e9ec:	df000504 	addi	fp,sp,20
    e9f0:	e13ffc15 	stw	r4,-16(fp)
    e9f4:	e17ffd15 	stw	r5,-12(fp)
    e9f8:	e1bffe15 	stw	r6,-8(fp)
    e9fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ea00:	e1bfff17 	ldw	r6,-4(fp)
    ea04:	e17ffe17 	ldw	r5,-8(fp)
    ea08:	e13ffd17 	ldw	r4,-12(fp)
    ea0c:	000ec200 	call	ec20 <open>
    ea10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ea14:	e0bffb17 	ldw	r2,-20(fp)
    ea18:	10001c16 	blt	r2,zero,ea8c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ea1c:	00800074 	movhi	r2,1
    ea20:	1080e904 	addi	r2,r2,932
    ea24:	e0fffb17 	ldw	r3,-20(fp)
    ea28:	18c00324 	muli	r3,r3,12
    ea2c:	10c5883a 	add	r2,r2,r3
    ea30:	10c00017 	ldw	r3,0(r2)
    ea34:	e0bffc17 	ldw	r2,-16(fp)
    ea38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ea3c:	00800074 	movhi	r2,1
    ea40:	1080e904 	addi	r2,r2,932
    ea44:	e0fffb17 	ldw	r3,-20(fp)
    ea48:	18c00324 	muli	r3,r3,12
    ea4c:	10c5883a 	add	r2,r2,r3
    ea50:	10800104 	addi	r2,r2,4
    ea54:	10c00017 	ldw	r3,0(r2)
    ea58:	e0bffc17 	ldw	r2,-16(fp)
    ea5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ea60:	00800074 	movhi	r2,1
    ea64:	1080e904 	addi	r2,r2,932
    ea68:	e0fffb17 	ldw	r3,-20(fp)
    ea6c:	18c00324 	muli	r3,r3,12
    ea70:	10c5883a 	add	r2,r2,r3
    ea74:	10800204 	addi	r2,r2,8
    ea78:	10c00017 	ldw	r3,0(r2)
    ea7c:	e0bffc17 	ldw	r2,-16(fp)
    ea80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ea84:	e13ffb17 	ldw	r4,-20(fp)
    ea88:	000d6940 	call	d694 <alt_release_fd>
  }
} 
    ea8c:	0001883a 	nop
    ea90:	e037883a 	mov	sp,fp
    ea94:	dfc00117 	ldw	ra,4(sp)
    ea98:	df000017 	ldw	fp,0(sp)
    ea9c:	dec00204 	addi	sp,sp,8
    eaa0:	f800283a 	ret

0000eaa4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    eaa4:	defffb04 	addi	sp,sp,-20
    eaa8:	dfc00415 	stw	ra,16(sp)
    eaac:	df000315 	stw	fp,12(sp)
    eab0:	df000304 	addi	fp,sp,12
    eab4:	e13ffd15 	stw	r4,-12(fp)
    eab8:	e17ffe15 	stw	r5,-8(fp)
    eabc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    eac0:	01c07fc4 	movi	r7,511
    eac4:	01800044 	movi	r6,1
    eac8:	e17ffd17 	ldw	r5,-12(fp)
    eacc:	01000074 	movhi	r4,1
    ead0:	2100ec04 	addi	r4,r4,944
    ead4:	000e9e00 	call	e9e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ead8:	01c07fc4 	movi	r7,511
    eadc:	000d883a 	mov	r6,zero
    eae0:	e17ffe17 	ldw	r5,-8(fp)
    eae4:	01000074 	movhi	r4,1
    eae8:	2100e904 	addi	r4,r4,932
    eaec:	000e9e00 	call	e9e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    eaf0:	01c07fc4 	movi	r7,511
    eaf4:	01800044 	movi	r6,1
    eaf8:	e17fff17 	ldw	r5,-4(fp)
    eafc:	01000074 	movhi	r4,1
    eb00:	2100ef04 	addi	r4,r4,956
    eb04:	000e9e00 	call	e9e0 <alt_open_fd>
}  
    eb08:	0001883a 	nop
    eb0c:	e037883a 	mov	sp,fp
    eb10:	dfc00117 	ldw	ra,4(sp)
    eb14:	df000017 	ldw	fp,0(sp)
    eb18:	dec00204 	addi	sp,sp,8
    eb1c:	f800283a 	ret

0000eb20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb20:	defffe04 	addi	sp,sp,-8
    eb24:	dfc00115 	stw	ra,4(sp)
    eb28:	df000015 	stw	fp,0(sp)
    eb2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb30:	d0a00b17 	ldw	r2,-32724(gp)
    eb34:	10000326 	beq	r2,zero,eb44 <alt_get_errno+0x24>
    eb38:	d0a00b17 	ldw	r2,-32724(gp)
    eb3c:	103ee83a 	callr	r2
    eb40:	00000106 	br	eb48 <alt_get_errno+0x28>
    eb44:	d0a6d104 	addi	r2,gp,-25788
}
    eb48:	e037883a 	mov	sp,fp
    eb4c:	dfc00117 	ldw	ra,4(sp)
    eb50:	df000017 	ldw	fp,0(sp)
    eb54:	dec00204 	addi	sp,sp,8
    eb58:	f800283a 	ret

0000eb5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    eb5c:	defffd04 	addi	sp,sp,-12
    eb60:	df000215 	stw	fp,8(sp)
    eb64:	df000204 	addi	fp,sp,8
    eb68:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    eb6c:	e0bfff17 	ldw	r2,-4(fp)
    eb70:	10800217 	ldw	r2,8(r2)
    eb74:	10d00034 	orhi	r3,r2,16384
    eb78:	e0bfff17 	ldw	r2,-4(fp)
    eb7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    eb80:	e03ffe15 	stw	zero,-8(fp)
    eb84:	00001d06 	br	ebfc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    eb88:	00800074 	movhi	r2,1
    eb8c:	1080e904 	addi	r2,r2,932
    eb90:	e0fffe17 	ldw	r3,-8(fp)
    eb94:	18c00324 	muli	r3,r3,12
    eb98:	10c5883a 	add	r2,r2,r3
    eb9c:	10c00017 	ldw	r3,0(r2)
    eba0:	e0bfff17 	ldw	r2,-4(fp)
    eba4:	10800017 	ldw	r2,0(r2)
    eba8:	1880111e 	bne	r3,r2,ebf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ebac:	00800074 	movhi	r2,1
    ebb0:	1080e904 	addi	r2,r2,932
    ebb4:	e0fffe17 	ldw	r3,-8(fp)
    ebb8:	18c00324 	muli	r3,r3,12
    ebbc:	10c5883a 	add	r2,r2,r3
    ebc0:	10800204 	addi	r2,r2,8
    ebc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ebc8:	1000090e 	bge	r2,zero,ebf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ebcc:	e0bffe17 	ldw	r2,-8(fp)
    ebd0:	10c00324 	muli	r3,r2,12
    ebd4:	00800074 	movhi	r2,1
    ebd8:	1080e904 	addi	r2,r2,932
    ebdc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	18800226 	beq	r3,r2,ebf0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ebe8:	00bffcc4 	movi	r2,-13
    ebec:	00000806 	br	ec10 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ebf0:	e0bffe17 	ldw	r2,-8(fp)
    ebf4:	10800044 	addi	r2,r2,1
    ebf8:	e0bffe15 	stw	r2,-8(fp)
    ebfc:	d0a00a17 	ldw	r2,-32728(gp)
    ec00:	1007883a 	mov	r3,r2
    ec04:	e0bffe17 	ldw	r2,-8(fp)
    ec08:	18bfdf2e 	bgeu	r3,r2,eb88 <__alt_data_end+0xfffeeb88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ec0c:	0005883a 	mov	r2,zero
}
    ec10:	e037883a 	mov	sp,fp
    ec14:	df000017 	ldw	fp,0(sp)
    ec18:	dec00104 	addi	sp,sp,4
    ec1c:	f800283a 	ret

0000ec20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ec20:	defff604 	addi	sp,sp,-40
    ec24:	dfc00915 	stw	ra,36(sp)
    ec28:	df000815 	stw	fp,32(sp)
    ec2c:	df000804 	addi	fp,sp,32
    ec30:	e13ffd15 	stw	r4,-12(fp)
    ec34:	e17ffe15 	stw	r5,-8(fp)
    ec38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ec3c:	00bfffc4 	movi	r2,-1
    ec40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ec44:	00bffb44 	movi	r2,-19
    ec48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ec4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ec50:	d1600804 	addi	r5,gp,-32736
    ec54:	e13ffd17 	ldw	r4,-12(fp)
    ec58:	000ef3c0 	call	ef3c <alt_find_dev>
    ec5c:	e0bff815 	stw	r2,-32(fp)
    ec60:	e0bff817 	ldw	r2,-32(fp)
    ec64:	1000051e 	bne	r2,zero,ec7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ec68:	e13ffd17 	ldw	r4,-12(fp)
    ec6c:	000efcc0 	call	efcc <alt_find_file>
    ec70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ec74:	00800044 	movi	r2,1
    ec78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ec7c:	e0bff817 	ldw	r2,-32(fp)
    ec80:	10002926 	beq	r2,zero,ed28 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ec84:	e13ff817 	ldw	r4,-32(fp)
    ec88:	000f0d40 	call	f0d4 <alt_get_fd>
    ec8c:	e0bff915 	stw	r2,-28(fp)
    ec90:	e0bff917 	ldw	r2,-28(fp)
    ec94:	1000030e 	bge	r2,zero,eca4 <open+0x84>
    {
      status = index;
    ec98:	e0bff917 	ldw	r2,-28(fp)
    ec9c:	e0bffa15 	stw	r2,-24(fp)
    eca0:	00002306 	br	ed30 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    eca4:	e0bff917 	ldw	r2,-28(fp)
    eca8:	10c00324 	muli	r3,r2,12
    ecac:	00800074 	movhi	r2,1
    ecb0:	1080e904 	addi	r2,r2,932
    ecb4:	1885883a 	add	r2,r3,r2
    ecb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ecbc:	e0fffe17 	ldw	r3,-8(fp)
    ecc0:	00900034 	movhi	r2,16384
    ecc4:	10bfffc4 	addi	r2,r2,-1
    ecc8:	1886703a 	and	r3,r3,r2
    eccc:	e0bffc17 	ldw	r2,-16(fp)
    ecd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ecd4:	e0bffb17 	ldw	r2,-20(fp)
    ecd8:	1000051e 	bne	r2,zero,ecf0 <open+0xd0>
    ecdc:	e13ffc17 	ldw	r4,-16(fp)
    ece0:	000eb5c0 	call	eb5c <alt_file_locked>
    ece4:	e0bffa15 	stw	r2,-24(fp)
    ece8:	e0bffa17 	ldw	r2,-24(fp)
    ecec:	10001016 	blt	r2,zero,ed30 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ecf0:	e0bff817 	ldw	r2,-32(fp)
    ecf4:	10800317 	ldw	r2,12(r2)
    ecf8:	10000826 	beq	r2,zero,ed1c <open+0xfc>
    ecfc:	e0bff817 	ldw	r2,-32(fp)
    ed00:	10800317 	ldw	r2,12(r2)
    ed04:	e1ffff17 	ldw	r7,-4(fp)
    ed08:	e1bffe17 	ldw	r6,-8(fp)
    ed0c:	e17ffd17 	ldw	r5,-12(fp)
    ed10:	e13ffc17 	ldw	r4,-16(fp)
    ed14:	103ee83a 	callr	r2
    ed18:	00000106 	br	ed20 <open+0x100>
    ed1c:	0005883a 	mov	r2,zero
    ed20:	e0bffa15 	stw	r2,-24(fp)
    ed24:	00000206 	br	ed30 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ed28:	00bffb44 	movi	r2,-19
    ed2c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ed30:	e0bffa17 	ldw	r2,-24(fp)
    ed34:	1000090e 	bge	r2,zero,ed5c <open+0x13c>
  {
    alt_release_fd (index);  
    ed38:	e13ff917 	ldw	r4,-28(fp)
    ed3c:	000d6940 	call	d694 <alt_release_fd>
    ALT_ERRNO = -status;
    ed40:	000eb200 	call	eb20 <alt_get_errno>
    ed44:	1007883a 	mov	r3,r2
    ed48:	e0bffa17 	ldw	r2,-24(fp)
    ed4c:	0085c83a 	sub	r2,zero,r2
    ed50:	18800015 	stw	r2,0(r3)
    return -1;
    ed54:	00bfffc4 	movi	r2,-1
    ed58:	00000106 	br	ed60 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    ed5c:	e0bff917 	ldw	r2,-28(fp)
}
    ed60:	e037883a 	mov	sp,fp
    ed64:	dfc00117 	ldw	ra,4(sp)
    ed68:	df000017 	ldw	fp,0(sp)
    ed6c:	dec00204 	addi	sp,sp,8
    ed70:	f800283a 	ret

0000ed74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ed74:	defffa04 	addi	sp,sp,-24
    ed78:	df000515 	stw	fp,20(sp)
    ed7c:	df000504 	addi	fp,sp,20
    ed80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed84:	0005303a 	rdctl	r2,status
    ed88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed8c:	e0fffc17 	ldw	r3,-16(fp)
    ed90:	00bfff84 	movi	r2,-2
    ed94:	1884703a 	and	r2,r3,r2
    ed98:	1001703a 	wrctl	status,r2
  
  return context;
    ed9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    eda0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    eda4:	e0bfff17 	ldw	r2,-4(fp)
    eda8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    edac:	e0bffd17 	ldw	r2,-12(fp)
    edb0:	10800017 	ldw	r2,0(r2)
    edb4:	e0fffd17 	ldw	r3,-12(fp)
    edb8:	18c00117 	ldw	r3,4(r3)
    edbc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    edc0:	e0bffd17 	ldw	r2,-12(fp)
    edc4:	10800117 	ldw	r2,4(r2)
    edc8:	e0fffd17 	ldw	r3,-12(fp)
    edcc:	18c00017 	ldw	r3,0(r3)
    edd0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	e0fffd17 	ldw	r3,-12(fp)
    eddc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ede0:	e0bffd17 	ldw	r2,-12(fp)
    ede4:	e0fffd17 	ldw	r3,-12(fp)
    ede8:	10c00015 	stw	r3,0(r2)
    edec:	e0bffb17 	ldw	r2,-20(fp)
    edf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    edf4:	e0bffe17 	ldw	r2,-8(fp)
    edf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    edfc:	0001883a 	nop
    ee00:	e037883a 	mov	sp,fp
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00104 	addi	sp,sp,4
    ee0c:	f800283a 	ret

0000ee10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ee10:	defffb04 	addi	sp,sp,-20
    ee14:	dfc00415 	stw	ra,16(sp)
    ee18:	df000315 	stw	fp,12(sp)
    ee1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ee20:	d0a00e17 	ldw	r2,-32712(gp)
    ee24:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ee28:	d0a6d717 	ldw	r2,-25764(gp)
    ee2c:	10800044 	addi	r2,r2,1
    ee30:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ee34:	00002e06 	br	eef0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ee38:	e0bffd17 	ldw	r2,-12(fp)
    ee3c:	10800017 	ldw	r2,0(r2)
    ee40:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ee44:	e0bffd17 	ldw	r2,-12(fp)
    ee48:	10800403 	ldbu	r2,16(r2)
    ee4c:	10803fcc 	andi	r2,r2,255
    ee50:	10000426 	beq	r2,zero,ee64 <alt_tick+0x54>
    ee54:	d0a6d717 	ldw	r2,-25764(gp)
    ee58:	1000021e 	bne	r2,zero,ee64 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ee5c:	e0bffd17 	ldw	r2,-12(fp)
    ee60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ee64:	e0bffd17 	ldw	r2,-12(fp)
    ee68:	10800217 	ldw	r2,8(r2)
    ee6c:	d0e6d717 	ldw	r3,-25764(gp)
    ee70:	18801d36 	bltu	r3,r2,eee8 <alt_tick+0xd8>
    ee74:	e0bffd17 	ldw	r2,-12(fp)
    ee78:	10800403 	ldbu	r2,16(r2)
    ee7c:	10803fcc 	andi	r2,r2,255
    ee80:	1000191e 	bne	r2,zero,eee8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ee84:	e0bffd17 	ldw	r2,-12(fp)
    ee88:	10800317 	ldw	r2,12(r2)
    ee8c:	e0fffd17 	ldw	r3,-12(fp)
    ee90:	18c00517 	ldw	r3,20(r3)
    ee94:	1809883a 	mov	r4,r3
    ee98:	103ee83a 	callr	r2
    ee9c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    eea0:	e0bfff17 	ldw	r2,-4(fp)
    eea4:	1000031e 	bne	r2,zero,eeb4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    eea8:	e13ffd17 	ldw	r4,-12(fp)
    eeac:	000ed740 	call	ed74 <alt_alarm_stop>
    eeb0:	00000d06 	br	eee8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    eeb4:	e0bffd17 	ldw	r2,-12(fp)
    eeb8:	10c00217 	ldw	r3,8(r2)
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	1887883a 	add	r3,r3,r2
    eec4:	e0bffd17 	ldw	r2,-12(fp)
    eec8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    eecc:	e0bffd17 	ldw	r2,-12(fp)
    eed0:	10c00217 	ldw	r3,8(r2)
    eed4:	d0a6d717 	ldw	r2,-25764(gp)
    eed8:	1880032e 	bgeu	r3,r2,eee8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    eedc:	e0bffd17 	ldw	r2,-12(fp)
    eee0:	00c00044 	movi	r3,1
    eee4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    eee8:	e0bffe17 	ldw	r2,-8(fp)
    eeec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    eef0:	e0fffd17 	ldw	r3,-12(fp)
    eef4:	d0a00e04 	addi	r2,gp,-32712
    eef8:	18bfcf1e 	bne	r3,r2,ee38 <__alt_data_end+0xfffeee38>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    eefc:	0001883a 	nop
}
    ef00:	0001883a 	nop
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ef18:	deffff04 	addi	sp,sp,-4
    ef1c:	df000015 	stw	fp,0(sp)
    ef20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ef24:	000170fa 	wrctl	ienable,zero
}
    ef28:	0001883a 	nop
    ef2c:	e037883a 	mov	sp,fp
    ef30:	df000017 	ldw	fp,0(sp)
    ef34:	dec00104 	addi	sp,sp,4
    ef38:	f800283a 	ret

0000ef3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ef3c:	defffa04 	addi	sp,sp,-24
    ef40:	dfc00515 	stw	ra,20(sp)
    ef44:	df000415 	stw	fp,16(sp)
    ef48:	df000404 	addi	fp,sp,16
    ef4c:	e13ffe15 	stw	r4,-8(fp)
    ef50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ef54:	e0bfff17 	ldw	r2,-4(fp)
    ef58:	10800017 	ldw	r2,0(r2)
    ef5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ef60:	e13ffe17 	ldw	r4,-8(fp)
    ef64:	00007b80 	call	7b8 <strlen>
    ef68:	10800044 	addi	r2,r2,1
    ef6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ef70:	00000d06 	br	efa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ef74:	e0bffc17 	ldw	r2,-16(fp)
    ef78:	10800217 	ldw	r2,8(r2)
    ef7c:	e0fffd17 	ldw	r3,-12(fp)
    ef80:	180d883a 	mov	r6,r3
    ef84:	e17ffe17 	ldw	r5,-8(fp)
    ef88:	1009883a 	mov	r4,r2
    ef8c:	000f2f00 	call	f2f0 <memcmp>
    ef90:	1000021e 	bne	r2,zero,ef9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ef94:	e0bffc17 	ldw	r2,-16(fp)
    ef98:	00000706 	br	efb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ef9c:	e0bffc17 	ldw	r2,-16(fp)
    efa0:	10800017 	ldw	r2,0(r2)
    efa4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    efa8:	e0fffc17 	ldw	r3,-16(fp)
    efac:	e0bfff17 	ldw	r2,-4(fp)
    efb0:	18bff01e 	bne	r3,r2,ef74 <__alt_data_end+0xfffeef74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    efb4:	0005883a 	mov	r2,zero
}
    efb8:	e037883a 	mov	sp,fp
    efbc:	dfc00117 	ldw	ra,4(sp)
    efc0:	df000017 	ldw	fp,0(sp)
    efc4:	dec00204 	addi	sp,sp,8
    efc8:	f800283a 	ret

0000efcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    efcc:	defffb04 	addi	sp,sp,-20
    efd0:	dfc00415 	stw	ra,16(sp)
    efd4:	df000315 	stw	fp,12(sp)
    efd8:	df000304 	addi	fp,sp,12
    efdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    efe0:	d0a00617 	ldw	r2,-32744(gp)
    efe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    efe8:	00003106 	br	f0b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    efec:	e0bffd17 	ldw	r2,-12(fp)
    eff0:	10800217 	ldw	r2,8(r2)
    eff4:	1009883a 	mov	r4,r2
    eff8:	00007b80 	call	7b8 <strlen>
    effc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f000:	e0bffd17 	ldw	r2,-12(fp)
    f004:	10c00217 	ldw	r3,8(r2)
    f008:	e0bffe17 	ldw	r2,-8(fp)
    f00c:	10bfffc4 	addi	r2,r2,-1
    f010:	1885883a 	add	r2,r3,r2
    f014:	10800003 	ldbu	r2,0(r2)
    f018:	10803fcc 	andi	r2,r2,255
    f01c:	1080201c 	xori	r2,r2,128
    f020:	10bfe004 	addi	r2,r2,-128
    f024:	10800bd8 	cmpnei	r2,r2,47
    f028:	1000031e 	bne	r2,zero,f038 <alt_find_file+0x6c>
    {
      len -= 1;
    f02c:	e0bffe17 	ldw	r2,-8(fp)
    f030:	10bfffc4 	addi	r2,r2,-1
    f034:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f038:	e0bffe17 	ldw	r2,-8(fp)
    f03c:	e0ffff17 	ldw	r3,-4(fp)
    f040:	1885883a 	add	r2,r3,r2
    f044:	10800003 	ldbu	r2,0(r2)
    f048:	10803fcc 	andi	r2,r2,255
    f04c:	1080201c 	xori	r2,r2,128
    f050:	10bfe004 	addi	r2,r2,-128
    f054:	10800be0 	cmpeqi	r2,r2,47
    f058:	1000081e 	bne	r2,zero,f07c <alt_find_file+0xb0>
    f05c:	e0bffe17 	ldw	r2,-8(fp)
    f060:	e0ffff17 	ldw	r3,-4(fp)
    f064:	1885883a 	add	r2,r3,r2
    f068:	10800003 	ldbu	r2,0(r2)
    f06c:	10803fcc 	andi	r2,r2,255
    f070:	1080201c 	xori	r2,r2,128
    f074:	10bfe004 	addi	r2,r2,-128
    f078:	10000a1e 	bne	r2,zero,f0a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f07c:	e0bffd17 	ldw	r2,-12(fp)
    f080:	10800217 	ldw	r2,8(r2)
    f084:	e0fffe17 	ldw	r3,-8(fp)
    f088:	180d883a 	mov	r6,r3
    f08c:	e17fff17 	ldw	r5,-4(fp)
    f090:	1009883a 	mov	r4,r2
    f094:	000f2f00 	call	f2f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f098:	1000021e 	bne	r2,zero,f0a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f09c:	e0bffd17 	ldw	r2,-12(fp)
    f0a0:	00000706 	br	f0c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f0a4:	e0bffd17 	ldw	r2,-12(fp)
    f0a8:	10800017 	ldw	r2,0(r2)
    f0ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f0b0:	e0fffd17 	ldw	r3,-12(fp)
    f0b4:	d0a00604 	addi	r2,gp,-32744
    f0b8:	18bfcc1e 	bne	r3,r2,efec <__alt_data_end+0xfffeefec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f0bc:	0005883a 	mov	r2,zero
}
    f0c0:	e037883a 	mov	sp,fp
    f0c4:	dfc00117 	ldw	ra,4(sp)
    f0c8:	df000017 	ldw	fp,0(sp)
    f0cc:	dec00204 	addi	sp,sp,8
    f0d0:	f800283a 	ret

0000f0d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f0d4:	defffc04 	addi	sp,sp,-16
    f0d8:	df000315 	stw	fp,12(sp)
    f0dc:	df000304 	addi	fp,sp,12
    f0e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f0e4:	00bffa04 	movi	r2,-24
    f0e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f0ec:	e03ffd15 	stw	zero,-12(fp)
    f0f0:	00001906 	br	f158 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    f0f4:	00800074 	movhi	r2,1
    f0f8:	1080e904 	addi	r2,r2,932
    f0fc:	e0fffd17 	ldw	r3,-12(fp)
    f100:	18c00324 	muli	r3,r3,12
    f104:	10c5883a 	add	r2,r2,r3
    f108:	10800017 	ldw	r2,0(r2)
    f10c:	10000f1e 	bne	r2,zero,f14c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    f110:	00800074 	movhi	r2,1
    f114:	1080e904 	addi	r2,r2,932
    f118:	e0fffd17 	ldw	r3,-12(fp)
    f11c:	18c00324 	muli	r3,r3,12
    f120:	10c5883a 	add	r2,r2,r3
    f124:	e0ffff17 	ldw	r3,-4(fp)
    f128:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f12c:	d0e00a17 	ldw	r3,-32728(gp)
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	1880020e 	bge	r3,r2,f140 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    f138:	e0bffd17 	ldw	r2,-12(fp)
    f13c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f140:	e0bffd17 	ldw	r2,-12(fp)
    f144:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f148:	00000606 	br	f164 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f14c:	e0bffd17 	ldw	r2,-12(fp)
    f150:	10800044 	addi	r2,r2,1
    f154:	e0bffd15 	stw	r2,-12(fp)
    f158:	e0bffd17 	ldw	r2,-12(fp)
    f15c:	10800810 	cmplti	r2,r2,32
    f160:	103fe41e 	bne	r2,zero,f0f4 <__alt_data_end+0xfffef0f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f164:	e0bffe17 	ldw	r2,-8(fp)
}
    f168:	e037883a 	mov	sp,fp
    f16c:	df000017 	ldw	fp,0(sp)
    f170:	dec00104 	addi	sp,sp,4
    f174:	f800283a 	ret

0000f178 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f178:	defffb04 	addi	sp,sp,-20
    f17c:	df000415 	stw	fp,16(sp)
    f180:	df000404 	addi	fp,sp,16
    f184:	e13ffe15 	stw	r4,-8(fp)
    f188:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f18c:	e0bfff17 	ldw	r2,-4(fp)
    f190:	10840070 	cmpltui	r2,r2,4097
    f194:	1000021e 	bne	r2,zero,f1a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f198:	00840004 	movi	r2,4096
    f19c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f1a0:	e0fffe17 	ldw	r3,-8(fp)
    f1a4:	e0bfff17 	ldw	r2,-4(fp)
    f1a8:	1885883a 	add	r2,r3,r2
    f1ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f1b0:	e0bffe17 	ldw	r2,-8(fp)
    f1b4:	e0bffc15 	stw	r2,-16(fp)
    f1b8:	00000506 	br	f1d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f1bc:	e0bffc17 	ldw	r2,-16(fp)
    f1c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f1c4:	e0bffc17 	ldw	r2,-16(fp)
    f1c8:	10800804 	addi	r2,r2,32
    f1cc:	e0bffc15 	stw	r2,-16(fp)
    f1d0:	e0fffc17 	ldw	r3,-16(fp)
    f1d4:	e0bffd17 	ldw	r2,-12(fp)
    f1d8:	18bff836 	bltu	r3,r2,f1bc <__alt_data_end+0xfffef1bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f1dc:	e0bffe17 	ldw	r2,-8(fp)
    f1e0:	108007cc 	andi	r2,r2,31
    f1e4:	10000226 	beq	r2,zero,f1f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f1e8:	e0bffc17 	ldw	r2,-16(fp)
    f1ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f1f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f1f4:	0001883a 	nop
    f1f8:	e037883a 	mov	sp,fp
    f1fc:	df000017 	ldw	fp,0(sp)
    f200:	dec00104 	addi	sp,sp,4
    f204:	f800283a 	ret

0000f208 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f208:	defffe04 	addi	sp,sp,-8
    f20c:	df000115 	stw	fp,4(sp)
    f210:	df000104 	addi	fp,sp,4
    f214:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f218:	e0bfff17 	ldw	r2,-4(fp)
    f21c:	10bffe84 	addi	r2,r2,-6
    f220:	10c00428 	cmpgeui	r3,r2,16
    f224:	18001a1e 	bne	r3,zero,f290 <alt_exception_cause_generated_bad_addr+0x88>
    f228:	100690ba 	slli	r3,r2,2
    f22c:	00800074 	movhi	r2,1
    f230:	10bc9004 	addi	r2,r2,-3520
    f234:	1885883a 	add	r2,r3,r2
    f238:	10800017 	ldw	r2,0(r2)
    f23c:	1000683a 	jmp	r2
    f240:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f244:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f248:	0000f290 	cmplti	zero,zero,970
    f24c:	0000f290 	cmplti	zero,zero,970
    f250:	0000f290 	cmplti	zero,zero,970
    f254:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f258:	0000f288 	cmpgei	zero,zero,970
    f25c:	0000f290 	cmplti	zero,zero,970
    f260:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f264:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f268:	0000f290 	cmplti	zero,zero,970
    f26c:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
    f270:	0000f288 	cmpgei	zero,zero,970
    f274:	0000f290 	cmplti	zero,zero,970
    f278:	0000f290 	cmplti	zero,zero,970
    f27c:	0000f280 	call	f28 <___vfprintf_internal_r+0x6d8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f280:	00800044 	movi	r2,1
    f284:	00000306 	br	f294 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f288:	0005883a 	mov	r2,zero
    f28c:	00000106 	br	f294 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f290:	0005883a 	mov	r2,zero
  }
}
    f294:	e037883a 	mov	sp,fp
    f298:	df000017 	ldw	fp,0(sp)
    f29c:	dec00104 	addi	sp,sp,4
    f2a0:	f800283a 	ret

0000f2a4 <atexit>:
    f2a4:	200b883a 	mov	r5,r4
    f2a8:	000f883a 	mov	r7,zero
    f2ac:	000d883a 	mov	r6,zero
    f2b0:	0009883a 	mov	r4,zero
    f2b4:	000f36c1 	jmpi	f36c <__register_exitproc>

0000f2b8 <exit>:
    f2b8:	defffe04 	addi	sp,sp,-8
    f2bc:	000b883a 	mov	r5,zero
    f2c0:	dc000015 	stw	r16,0(sp)
    f2c4:	dfc00115 	stw	ra,4(sp)
    f2c8:	2021883a 	mov	r16,r4
    f2cc:	000f4840 	call	f484 <__call_exitprocs>
    f2d0:	00800074 	movhi	r2,1
    f2d4:	10856104 	addi	r2,r2,5508
    f2d8:	11000017 	ldw	r4,0(r2)
    f2dc:	20800f17 	ldw	r2,60(r4)
    f2e0:	10000126 	beq	r2,zero,f2e8 <exit+0x30>
    f2e4:	103ee83a 	callr	r2
    f2e8:	8009883a 	mov	r4,r16
    f2ec:	000f6040 	call	f604 <_exit>

0000f2f0 <memcmp>:
    f2f0:	01c000c4 	movi	r7,3
    f2f4:	3980192e 	bgeu	r7,r6,f35c <memcmp+0x6c>
    f2f8:	2144b03a 	or	r2,r4,r5
    f2fc:	11c4703a 	and	r2,r2,r7
    f300:	10000f26 	beq	r2,zero,f340 <memcmp+0x50>
    f304:	20800003 	ldbu	r2,0(r4)
    f308:	28c00003 	ldbu	r3,0(r5)
    f30c:	10c0151e 	bne	r2,r3,f364 <memcmp+0x74>
    f310:	31bfff84 	addi	r6,r6,-2
    f314:	01ffffc4 	movi	r7,-1
    f318:	00000406 	br	f32c <memcmp+0x3c>
    f31c:	20800003 	ldbu	r2,0(r4)
    f320:	28c00003 	ldbu	r3,0(r5)
    f324:	31bfffc4 	addi	r6,r6,-1
    f328:	10c00e1e 	bne	r2,r3,f364 <memcmp+0x74>
    f32c:	21000044 	addi	r4,r4,1
    f330:	29400044 	addi	r5,r5,1
    f334:	31fff91e 	bne	r6,r7,f31c <__alt_data_end+0xfffef31c>
    f338:	0005883a 	mov	r2,zero
    f33c:	f800283a 	ret
    f340:	20c00017 	ldw	r3,0(r4)
    f344:	28800017 	ldw	r2,0(r5)
    f348:	18bfee1e 	bne	r3,r2,f304 <__alt_data_end+0xfffef304>
    f34c:	31bfff04 	addi	r6,r6,-4
    f350:	21000104 	addi	r4,r4,4
    f354:	29400104 	addi	r5,r5,4
    f358:	39bff936 	bltu	r7,r6,f340 <__alt_data_end+0xfffef340>
    f35c:	303fe91e 	bne	r6,zero,f304 <__alt_data_end+0xfffef304>
    f360:	003ff506 	br	f338 <__alt_data_end+0xfffef338>
    f364:	10c5c83a 	sub	r2,r2,r3
    f368:	f800283a 	ret

0000f36c <__register_exitproc>:
    f36c:	defffa04 	addi	sp,sp,-24
    f370:	dc000315 	stw	r16,12(sp)
    f374:	04000074 	movhi	r16,1
    f378:	84056104 	addi	r16,r16,5508
    f37c:	80c00017 	ldw	r3,0(r16)
    f380:	dc400415 	stw	r17,16(sp)
    f384:	dfc00515 	stw	ra,20(sp)
    f388:	18805217 	ldw	r2,328(r3)
    f38c:	2023883a 	mov	r17,r4
    f390:	10003726 	beq	r2,zero,f470 <__register_exitproc+0x104>
    f394:	10c00117 	ldw	r3,4(r2)
    f398:	010007c4 	movi	r4,31
    f39c:	20c00e16 	blt	r4,r3,f3d8 <__register_exitproc+0x6c>
    f3a0:	1a000044 	addi	r8,r3,1
    f3a4:	8800221e 	bne	r17,zero,f430 <__register_exitproc+0xc4>
    f3a8:	18c00084 	addi	r3,r3,2
    f3ac:	18c7883a 	add	r3,r3,r3
    f3b0:	18c7883a 	add	r3,r3,r3
    f3b4:	12000115 	stw	r8,4(r2)
    f3b8:	10c7883a 	add	r3,r2,r3
    f3bc:	19400015 	stw	r5,0(r3)
    f3c0:	0005883a 	mov	r2,zero
    f3c4:	dfc00517 	ldw	ra,20(sp)
    f3c8:	dc400417 	ldw	r17,16(sp)
    f3cc:	dc000317 	ldw	r16,12(sp)
    f3d0:	dec00604 	addi	sp,sp,24
    f3d4:	f800283a 	ret
    f3d8:	00800034 	movhi	r2,0
    f3dc:	10800004 	addi	r2,r2,0
    f3e0:	10002626 	beq	r2,zero,f47c <__register_exitproc+0x110>
    f3e4:	01006404 	movi	r4,400
    f3e8:	d9400015 	stw	r5,0(sp)
    f3ec:	d9800115 	stw	r6,4(sp)
    f3f0:	d9c00215 	stw	r7,8(sp)
    f3f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f3f8:	d9400017 	ldw	r5,0(sp)
    f3fc:	d9800117 	ldw	r6,4(sp)
    f400:	d9c00217 	ldw	r7,8(sp)
    f404:	10001d26 	beq	r2,zero,f47c <__register_exitproc+0x110>
    f408:	81000017 	ldw	r4,0(r16)
    f40c:	10000115 	stw	zero,4(r2)
    f410:	02000044 	movi	r8,1
    f414:	22405217 	ldw	r9,328(r4)
    f418:	0007883a 	mov	r3,zero
    f41c:	12400015 	stw	r9,0(r2)
    f420:	20805215 	stw	r2,328(r4)
    f424:	10006215 	stw	zero,392(r2)
    f428:	10006315 	stw	zero,396(r2)
    f42c:	883fde26 	beq	r17,zero,f3a8 <__alt_data_end+0xfffef3a8>
    f430:	18c9883a 	add	r4,r3,r3
    f434:	2109883a 	add	r4,r4,r4
    f438:	1109883a 	add	r4,r2,r4
    f43c:	21802215 	stw	r6,136(r4)
    f440:	01800044 	movi	r6,1
    f444:	12406217 	ldw	r9,392(r2)
    f448:	30cc983a 	sll	r6,r6,r3
    f44c:	4992b03a 	or	r9,r9,r6
    f450:	12406215 	stw	r9,392(r2)
    f454:	21c04215 	stw	r7,264(r4)
    f458:	01000084 	movi	r4,2
    f45c:	893fd21e 	bne	r17,r4,f3a8 <__alt_data_end+0xfffef3a8>
    f460:	11006317 	ldw	r4,396(r2)
    f464:	218cb03a 	or	r6,r4,r6
    f468:	11806315 	stw	r6,396(r2)
    f46c:	003fce06 	br	f3a8 <__alt_data_end+0xfffef3a8>
    f470:	18805304 	addi	r2,r3,332
    f474:	18805215 	stw	r2,328(r3)
    f478:	003fc606 	br	f394 <__alt_data_end+0xfffef394>
    f47c:	00bfffc4 	movi	r2,-1
    f480:	003fd006 	br	f3c4 <__alt_data_end+0xfffef3c4>

0000f484 <__call_exitprocs>:
    f484:	defff504 	addi	sp,sp,-44
    f488:	df000915 	stw	fp,36(sp)
    f48c:	dd400615 	stw	r21,24(sp)
    f490:	dc800315 	stw	r18,12(sp)
    f494:	dfc00a15 	stw	ra,40(sp)
    f498:	ddc00815 	stw	r23,32(sp)
    f49c:	dd800715 	stw	r22,28(sp)
    f4a0:	dd000515 	stw	r20,20(sp)
    f4a4:	dcc00415 	stw	r19,16(sp)
    f4a8:	dc400215 	stw	r17,8(sp)
    f4ac:	dc000115 	stw	r16,4(sp)
    f4b0:	d9000015 	stw	r4,0(sp)
    f4b4:	2839883a 	mov	fp,r5
    f4b8:	04800044 	movi	r18,1
    f4bc:	057fffc4 	movi	r21,-1
    f4c0:	00800074 	movhi	r2,1
    f4c4:	10856104 	addi	r2,r2,5508
    f4c8:	12000017 	ldw	r8,0(r2)
    f4cc:	45005217 	ldw	r20,328(r8)
    f4d0:	44c05204 	addi	r19,r8,328
    f4d4:	a0001c26 	beq	r20,zero,f548 <__call_exitprocs+0xc4>
    f4d8:	a0800117 	ldw	r2,4(r20)
    f4dc:	15ffffc4 	addi	r23,r2,-1
    f4e0:	b8000d16 	blt	r23,zero,f518 <__call_exitprocs+0x94>
    f4e4:	14000044 	addi	r16,r2,1
    f4e8:	8421883a 	add	r16,r16,r16
    f4ec:	8421883a 	add	r16,r16,r16
    f4f0:	84402004 	addi	r17,r16,128
    f4f4:	a463883a 	add	r17,r20,r17
    f4f8:	a421883a 	add	r16,r20,r16
    f4fc:	e0001e26 	beq	fp,zero,f578 <__call_exitprocs+0xf4>
    f500:	80804017 	ldw	r2,256(r16)
    f504:	e0801c26 	beq	fp,r2,f578 <__call_exitprocs+0xf4>
    f508:	bdffffc4 	addi	r23,r23,-1
    f50c:	843fff04 	addi	r16,r16,-4
    f510:	8c7fff04 	addi	r17,r17,-4
    f514:	bd7ff91e 	bne	r23,r21,f4fc <__alt_data_end+0xfffef4fc>
    f518:	00800034 	movhi	r2,0
    f51c:	10800004 	addi	r2,r2,0
    f520:	10000926 	beq	r2,zero,f548 <__call_exitprocs+0xc4>
    f524:	a0800117 	ldw	r2,4(r20)
    f528:	1000301e 	bne	r2,zero,f5ec <__call_exitprocs+0x168>
    f52c:	a0800017 	ldw	r2,0(r20)
    f530:	10003226 	beq	r2,zero,f5fc <__call_exitprocs+0x178>
    f534:	a009883a 	mov	r4,r20
    f538:	98800015 	stw	r2,0(r19)
    f53c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f540:	9d000017 	ldw	r20,0(r19)
    f544:	a03fe41e 	bne	r20,zero,f4d8 <__alt_data_end+0xfffef4d8>
    f548:	dfc00a17 	ldw	ra,40(sp)
    f54c:	df000917 	ldw	fp,36(sp)
    f550:	ddc00817 	ldw	r23,32(sp)
    f554:	dd800717 	ldw	r22,28(sp)
    f558:	dd400617 	ldw	r21,24(sp)
    f55c:	dd000517 	ldw	r20,20(sp)
    f560:	dcc00417 	ldw	r19,16(sp)
    f564:	dc800317 	ldw	r18,12(sp)
    f568:	dc400217 	ldw	r17,8(sp)
    f56c:	dc000117 	ldw	r16,4(sp)
    f570:	dec00b04 	addi	sp,sp,44
    f574:	f800283a 	ret
    f578:	a0800117 	ldw	r2,4(r20)
    f57c:	80c00017 	ldw	r3,0(r16)
    f580:	10bfffc4 	addi	r2,r2,-1
    f584:	15c01426 	beq	r2,r23,f5d8 <__call_exitprocs+0x154>
    f588:	80000015 	stw	zero,0(r16)
    f58c:	183fde26 	beq	r3,zero,f508 <__alt_data_end+0xfffef508>
    f590:	95c8983a 	sll	r4,r18,r23
    f594:	a0806217 	ldw	r2,392(r20)
    f598:	a5800117 	ldw	r22,4(r20)
    f59c:	2084703a 	and	r2,r4,r2
    f5a0:	10000b26 	beq	r2,zero,f5d0 <__call_exitprocs+0x14c>
    f5a4:	a0806317 	ldw	r2,396(r20)
    f5a8:	2088703a 	and	r4,r4,r2
    f5ac:	20000c1e 	bne	r4,zero,f5e0 <__call_exitprocs+0x15c>
    f5b0:	89400017 	ldw	r5,0(r17)
    f5b4:	d9000017 	ldw	r4,0(sp)
    f5b8:	183ee83a 	callr	r3
    f5bc:	a0800117 	ldw	r2,4(r20)
    f5c0:	15bfbf1e 	bne	r2,r22,f4c0 <__alt_data_end+0xfffef4c0>
    f5c4:	98800017 	ldw	r2,0(r19)
    f5c8:	153fcf26 	beq	r2,r20,f508 <__alt_data_end+0xfffef508>
    f5cc:	003fbc06 	br	f4c0 <__alt_data_end+0xfffef4c0>
    f5d0:	183ee83a 	callr	r3
    f5d4:	003ff906 	br	f5bc <__alt_data_end+0xfffef5bc>
    f5d8:	a5c00115 	stw	r23,4(r20)
    f5dc:	003feb06 	br	f58c <__alt_data_end+0xfffef58c>
    f5e0:	89000017 	ldw	r4,0(r17)
    f5e4:	183ee83a 	callr	r3
    f5e8:	003ff406 	br	f5bc <__alt_data_end+0xfffef5bc>
    f5ec:	a0800017 	ldw	r2,0(r20)
    f5f0:	a027883a 	mov	r19,r20
    f5f4:	1029883a 	mov	r20,r2
    f5f8:	003fb606 	br	f4d4 <__alt_data_end+0xfffef4d4>
    f5fc:	0005883a 	mov	r2,zero
    f600:	003ffb06 	br	f5f0 <__alt_data_end+0xfffef5f0>

0000f604 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f604:	defffd04 	addi	sp,sp,-12
    f608:	df000215 	stw	fp,8(sp)
    f60c:	df000204 	addi	fp,sp,8
    f610:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f614:	0001883a 	nop
    f618:	e0bfff17 	ldw	r2,-4(fp)
    f61c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f620:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f624:	10000226 	beq	r2,zero,f630 <_exit+0x2c>
    ALT_SIM_FAIL();
    f628:	002af070 	cmpltui	zero,zero,43969
    f62c:	00000106 	br	f634 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f630:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f634:	003fff06 	br	f634 <__alt_data_end+0xfffef634>
