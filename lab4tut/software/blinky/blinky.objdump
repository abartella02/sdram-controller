
blinky.elf:     file format elf32-littlenios2
blinky.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000010e8 memsz 0x000010e8 flags r-x
    LOAD off    0x00002108 vaddr 0x00001108 paddr 0x0000214c align 2**12
         filesz 0x00001044 memsz 0x00001044 flags rw-
    LOAD off    0x00003190 vaddr 0x00003190 paddr 0x00003190 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f48  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00001108  00003190  0000314c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00001044  00001108  0000214c  00002108  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00003190  00003190  00003190  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000032a8  000032a8  0000314c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002c8  00000000  00000000  00003170  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001e3e  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000eb5  00000000  00000000  00005276  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dfa  00000000  00000000  0000612b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004e4  00000000  00000000  00006f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009d1  00000000  00000000  0000740c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000561  00000000  00000000  00007ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00008340  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  00008380  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000968e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00009691  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000096a1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000096a2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000096ab  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000096bd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003f  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY
 26 .jdi          0000448a  00000000  00000000  00009707  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00036fca  00000000  00000000  0000db91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00001108 l    d  .rodata	00000000 .rodata
00001108 l    d  .rwdata	00000000 .rwdata
00003190 l    d  .bss	00000000 .bss
000032a8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00000248 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000004ec l     F .text	0000020c altera_avalon_jtag_uart_irq
000006f8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000334 g     F .text	00000054 alt_main
000031a8 g     O .bss	00000100 alt_irq
0000214c g       *ABS*	00000000 __flash_rwdata_start
00001108 g     O .rwdata	00001038 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003194 g     O .bss	00000004 alt_argv
0000a140 g       *ABS*	00000000 _gp
00000388 g     F .text	00000030 usleep
00001024 g     F .text	00000064 .hidden __udivsi3
000032a8 g       *ABS*	00000000 __bss_end
00000c74 g     F .text	000000f0 alt_iic_isr_register
00000e00 g     F .text	00000108 alt_tick
00000c28 g     F .text	0000004c alt_ic_irq_enabled
00000d64 g     F .text	0000009c alt_alarm_stop
0000319c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
00000a84 g     F .text	00000020 alt_dcache_flush_all
0000214c g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001108 g       *ABS*	00000000 __ram_rodata_end
00001088 g     F .text	00000058 .hidden __umodsi3
000032a8 g       *ABS*	00000000 end
0000042c g     F .text	000000c0 altera_avalon_jtag_uart_init
00020000 g       *ABS*	00000000 __alt_stack_pointer
000001c0 g     F .text	0000003c _start
000031a0 g     O .bss	00000004 _alt_tick_rate
000031a4 g     O .bss	00000004 _alt_nticks
000003f0 g     F .text	0000003c alt_sys_init
00000798 g     F .text	00000068 altera_avalon_jtag_uart_close
000010e0 g     F .text	00000028 .hidden __mulsi3
00001108 g       *ABS*	00000000 __ram_rwdata_start
00001108 g       *ABS*	00000000 __ram_rodata_start
0000092c g     F .text	00000158 alt_busy_sleep
000032a8 g       *ABS*	00000000 __alt_stack_base
00003190 g       *ABS*	00000000 __bss_start
000001fc g     F .text	0000004c main
00003198 g     O .bss	00000004 alt_envp
00000f2c g     F .text	00000084 .hidden __divsi3
00001108 g       *ABS*	00000000 __flash_rodata_start
000003b8 g     F .text	00000038 alt_irq_init
00003190 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000ac4 g     F .text	00000050 alt_ic_isr_register
0000214c g       *ABS*	00000000 _edata
000032a8 g       *ABS*	00000000 _end
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00000b9c g     F .text	0000008c alt_ic_irq_disable
00000f08 g     F .text	00000024 altera_nios2_qsys_irq_init
00000fb0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000800 g     F .text	0000012c alt_alarm_start
00000aa4 g     F .text	00000020 alt_icache_flush_all
00002140 g     O .rwdata	00000004 alt_priority_mask
00000b14 g     F .text	00000088 alt_ic_irq_enable
00002144 g     O .rwdata	00000008 alt_alarm_list
000002b0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800034 	movhi	r2,0
 130:	108c6a04 	addi	r2,r2,12712
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800034 	movhi	r2,0
 148:	108c6a04 	addi	r2,r2,12712
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffe011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffe0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1cc:	d6a85014 	ori	gp,gp,41280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d4:	108c6414 	ori	r2,r2,12688

    movhi r3, %hi(__bss_end)
     1d8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1dc:	18ccaa14 	ori	r3,r3,12968

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xfffe01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	00002b00 	call	2b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	00003340 	call	334 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xfffe01f8>

000001fc <main>:
#include "system.h"
#include <unistd.h>
int main(){
     1fc:	defffd04 	addi	sp,sp,-12
     200:	dfc00215 	stw	ra,8(sp)
     204:	df000115 	stw	fp,4(sp)
     208:	df000104 	addi	fp,sp,4

	char * LEDs=(char *) LEDS_BASE;
     20c:	008000b4 	movhi	r2,2
     210:	10840004 	addi	r2,r2,4096
     214:	e0bfff15 	stw	r2,-4(fp)

	while (1){
		*LEDs=0xFF;
     218:	e0bfff17 	ldw	r2,-4(fp)
     21c:	00ffffc4 	movi	r3,-1
     220:	10c00005 	stb	r3,0(r2)
		usleep(1000*1000);
     224:	010003f4 	movhi	r4,15
     228:	21109004 	addi	r4,r4,16960
     22c:	00003880 	call	388 <usleep>
		*LEDs=0x00;
     230:	e0bfff17 	ldw	r2,-4(fp)
     234:	10000005 	stb	zero,0(r2)
		usleep(1000*1000);
     238:	010003f4 	movhi	r4,15
     23c:	21109004 	addi	r4,r4,16960
     240:	00003880 	call	388 <usleep>
	}
     244:	003ff406 	br	218 <__alt_data_end+0xfffe0218>

00000248 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     248:	defffc04 	addi	sp,sp,-16
     24c:	df000315 	stw	fp,12(sp)
     250:	df000304 	addi	fp,sp,12
     254:	e13ffd15 	stw	r4,-12(fp)
     258:	e17ffe15 	stw	r5,-8(fp)
     25c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     260:	e0fffe17 	ldw	r3,-8(fp)
     264:	e0bffd17 	ldw	r2,-12(fp)
     268:	18800c26 	beq	r3,r2,29c <alt_load_section+0x54>
  {
    while( to != end )
     26c:	00000806 	br	290 <alt_load_section+0x48>
    {
      *to++ = *from++;
     270:	e0bffe17 	ldw	r2,-8(fp)
     274:	10c00104 	addi	r3,r2,4
     278:	e0fffe15 	stw	r3,-8(fp)
     27c:	e0fffd17 	ldw	r3,-12(fp)
     280:	19000104 	addi	r4,r3,4
     284:	e13ffd15 	stw	r4,-12(fp)
     288:	18c00017 	ldw	r3,0(r3)
     28c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     290:	e0fffe17 	ldw	r3,-8(fp)
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	18bff51e 	bne	r3,r2,270 <__alt_data_end+0xfffe0270>
    {
      *to++ = *from++;
    }
  }
}
     29c:	0001883a 	nop
     2a0:	e037883a 	mov	sp,fp
     2a4:	df000017 	ldw	fp,0(sp)
     2a8:	dec00104 	addi	sp,sp,4
     2ac:	f800283a 	ret

000002b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     2b0:	defffe04 	addi	sp,sp,-8
     2b4:	dfc00115 	stw	ra,4(sp)
     2b8:	df000015 	stw	fp,0(sp)
     2bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     2c0:	01800034 	movhi	r6,0
     2c4:	31885304 	addi	r6,r6,8524
     2c8:	01400034 	movhi	r5,0
     2cc:	29444204 	addi	r5,r5,4360
     2d0:	01000034 	movhi	r4,0
     2d4:	21085304 	addi	r4,r4,8524
     2d8:	00002480 	call	248 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     2dc:	01800034 	movhi	r6,0
     2e0:	31807004 	addi	r6,r6,448
     2e4:	01400034 	movhi	r5,0
     2e8:	29400804 	addi	r5,r5,32
     2ec:	01000034 	movhi	r4,0
     2f0:	21000804 	addi	r4,r4,32
     2f4:	00002480 	call	248 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     2f8:	01800034 	movhi	r6,0
     2fc:	31844204 	addi	r6,r6,4360
     300:	01400034 	movhi	r5,0
     304:	29444204 	addi	r5,r5,4360
     308:	01000034 	movhi	r4,0
     30c:	21044204 	addi	r4,r4,4360
     310:	00002480 	call	248 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     314:	0000a840 	call	a84 <alt_dcache_flush_all>
  alt_icache_flush_all();
     318:	0000aa40 	call	aa4 <alt_icache_flush_all>
}
     31c:	0001883a 	nop
     320:	e037883a 	mov	sp,fp
     324:	dfc00117 	ldw	ra,4(sp)
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00204 	addi	sp,sp,8
     330:	f800283a 	ret

00000334 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     334:	defffe04 	addi	sp,sp,-8
     338:	dfc00115 	stw	ra,4(sp)
     33c:	df000015 	stw	fp,0(sp)
     340:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     344:	0009883a 	mov	r4,zero
     348:	00003b80 	call	3b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     34c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     350:	00003f00 	call	3f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
     354:	d0a41417 	ldw	r2,-28592(gp)
     358:	d0e41517 	ldw	r3,-28588(gp)
     35c:	d1241617 	ldw	r4,-28584(gp)
     360:	200d883a 	mov	r6,r4
     364:	180b883a 	mov	r5,r3
     368:	1009883a 	mov	r4,r2
     36c:	00001fc0 	call	1fc <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
     370:	0001883a 	nop
     374:	e037883a 	mov	sp,fp
     378:	dfc00117 	ldw	ra,4(sp)
     37c:	df000017 	ldw	fp,0(sp)
     380:	dec00204 	addi	sp,sp,8
     384:	f800283a 	ret

00000388 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     388:	defffd04 	addi	sp,sp,-12
     38c:	dfc00215 	stw	ra,8(sp)
     390:	df000115 	stw	fp,4(sp)
     394:	df000104 	addi	fp,sp,4
     398:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     39c:	e13fff17 	ldw	r4,-4(fp)
     3a0:	000092c0 	call	92c <alt_busy_sleep>
}
     3a4:	e037883a 	mov	sp,fp
     3a8:	dfc00117 	ldw	ra,4(sp)
     3ac:	df000017 	ldw	fp,0(sp)
     3b0:	dec00204 	addi	sp,sp,8
     3b4:	f800283a 	ret

000003b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     3b8:	defffd04 	addi	sp,sp,-12
     3bc:	dfc00215 	stw	ra,8(sp)
     3c0:	df000115 	stw	fp,4(sp)
     3c4:	df000104 	addi	fp,sp,4
     3c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
     3cc:	0000f080 	call	f08 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     3d0:	00800044 	movi	r2,1
     3d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     3d8:	0001883a 	nop
     3dc:	e037883a 	mov	sp,fp
     3e0:	dfc00117 	ldw	ra,4(sp)
     3e4:	df000017 	ldw	fp,0(sp)
     3e8:	dec00204 	addi	sp,sp,8
     3ec:	f800283a 	ret

000003f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     3f0:	defffe04 	addi	sp,sp,-8
     3f4:	dfc00115 	stw	ra,4(sp)
     3f8:	df000015 	stw	fp,0(sp)
     3fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     400:	000d883a 	mov	r6,zero
     404:	000b883a 	mov	r5,zero
     408:	01000034 	movhi	r4,0
     40c:	21044204 	addi	r4,r4,4360
     410:	000042c0 	call	42c <altera_avalon_jtag_uart_init>
}
     414:	0001883a 	nop
     418:	e037883a 	mov	sp,fp
     41c:	dfc00117 	ldw	ra,4(sp)
     420:	df000017 	ldw	fp,0(sp)
     424:	dec00204 	addi	sp,sp,8
     428:	f800283a 	ret

0000042c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     42c:	defffa04 	addi	sp,sp,-24
     430:	dfc00515 	stw	ra,20(sp)
     434:	df000415 	stw	fp,16(sp)
     438:	df000404 	addi	fp,sp,16
     43c:	e13ffd15 	stw	r4,-12(fp)
     440:	e17ffe15 	stw	r5,-8(fp)
     444:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     448:	e0bffd17 	ldw	r2,-12(fp)
     44c:	00c00044 	movi	r3,1
     450:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     454:	e0bffd17 	ldw	r2,-12(fp)
     458:	10800017 	ldw	r2,0(r2)
     45c:	10800104 	addi	r2,r2,4
     460:	1007883a 	mov	r3,r2
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800817 	ldw	r2,32(r2)
     46c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	e0ffff17 	ldw	r3,-4(fp)
     478:	d8000015 	stw	zero,0(sp)
     47c:	e1fffd17 	ldw	r7,-12(fp)
     480:	01800034 	movhi	r6,0
     484:	31813b04 	addi	r6,r6,1260
     488:	180b883a 	mov	r5,r3
     48c:	1009883a 	mov	r4,r2
     490:	0000ac40 	call	ac4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     494:	e0bffd17 	ldw	r2,-12(fp)
     498:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     49c:	e0bffd17 	ldw	r2,-12(fp)
     4a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     4a4:	d0e41817 	ldw	r3,-28576(gp)
     4a8:	e1fffd17 	ldw	r7,-12(fp)
     4ac:	01800034 	movhi	r6,0
     4b0:	3181be04 	addi	r6,r6,1784
     4b4:	180b883a 	mov	r5,r3
     4b8:	1009883a 	mov	r4,r2
     4bc:	00008000 	call	800 <alt_alarm_start>
     4c0:	1000040e 	bge	r2,zero,4d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     4c4:	e0fffd17 	ldw	r3,-12(fp)
     4c8:	00a00034 	movhi	r2,32768
     4cc:	10bfffc4 	addi	r2,r2,-1
     4d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     4d4:	0001883a 	nop
     4d8:	e037883a 	mov	sp,fp
     4dc:	dfc00117 	ldw	ra,4(sp)
     4e0:	df000017 	ldw	fp,0(sp)
     4e4:	dec00204 	addi	sp,sp,8
     4e8:	f800283a 	ret

000004ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     4ec:	defff804 	addi	sp,sp,-32
     4f0:	df000715 	stw	fp,28(sp)
     4f4:	df000704 	addi	fp,sp,28
     4f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     504:	e0bffb17 	ldw	r2,-20(fp)
     508:	10800017 	ldw	r2,0(r2)
     50c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     510:	e0bffc17 	ldw	r2,-16(fp)
     514:	10800104 	addi	r2,r2,4
     518:	10800037 	ldwio	r2,0(r2)
     51c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     520:	e0bffd17 	ldw	r2,-12(fp)
     524:	1080c00c 	andi	r2,r2,768
     528:	10006d26 	beq	r2,zero,6e0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     52c:	e0bffd17 	ldw	r2,-12(fp)
     530:	1080400c 	andi	r2,r2,256
     534:	10003526 	beq	r2,zero,60c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     538:	00800074 	movhi	r2,1
     53c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     540:	e0bffb17 	ldw	r2,-20(fp)
     544:	10800a17 	ldw	r2,40(r2)
     548:	10800044 	addi	r2,r2,1
     54c:	1081ffcc 	andi	r2,r2,2047
     550:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     554:	e0bffb17 	ldw	r2,-20(fp)
     558:	10c00b17 	ldw	r3,44(r2)
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	18801526 	beq	r3,r2,5b8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     564:	e0bffc17 	ldw	r2,-16(fp)
     568:	10800037 	ldwio	r2,0(r2)
     56c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     570:	e0bff917 	ldw	r2,-28(fp)
     574:	10a0000c 	andi	r2,r2,32768
     578:	10001126 	beq	r2,zero,5c0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     57c:	e0bffb17 	ldw	r2,-20(fp)
     580:	10800a17 	ldw	r2,40(r2)
     584:	e0fff917 	ldw	r3,-28(fp)
     588:	1809883a 	mov	r4,r3
     58c:	e0fffb17 	ldw	r3,-20(fp)
     590:	1885883a 	add	r2,r3,r2
     594:	10800e04 	addi	r2,r2,56
     598:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     59c:	e0bffb17 	ldw	r2,-20(fp)
     5a0:	10800a17 	ldw	r2,40(r2)
     5a4:	10800044 	addi	r2,r2,1
     5a8:	10c1ffcc 	andi	r3,r2,2047
     5ac:	e0bffb17 	ldw	r2,-20(fp)
     5b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     5b4:	003fe206 	br	540 <__alt_data_end+0xfffe0540>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     5b8:	0001883a 	nop
     5bc:	00000106 	br	5c4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     5c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     5c4:	e0bff917 	ldw	r2,-28(fp)
     5c8:	10bfffec 	andhi	r2,r2,65535
     5cc:	10000f26 	beq	r2,zero,60c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     5d0:	e0bffb17 	ldw	r2,-20(fp)
     5d4:	10c00817 	ldw	r3,32(r2)
     5d8:	00bfff84 	movi	r2,-2
     5dc:	1886703a 	and	r3,r3,r2
     5e0:	e0bffb17 	ldw	r2,-20(fp)
     5e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     5e8:	e0bffc17 	ldw	r2,-16(fp)
     5ec:	10800104 	addi	r2,r2,4
     5f0:	1007883a 	mov	r3,r2
     5f4:	e0bffb17 	ldw	r2,-20(fp)
     5f8:	10800817 	ldw	r2,32(r2)
     5fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     600:	e0bffc17 	ldw	r2,-16(fp)
     604:	10800104 	addi	r2,r2,4
     608:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     60c:	e0bffd17 	ldw	r2,-12(fp)
     610:	1080800c 	andi	r2,r2,512
     614:	103fbe26 	beq	r2,zero,510 <__alt_data_end+0xfffe0510>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	1004d43a 	srli	r2,r2,16
     620:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     624:	00001406 	br	678 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     628:	e0bffc17 	ldw	r2,-16(fp)
     62c:	e0fffb17 	ldw	r3,-20(fp)
     630:	18c00d17 	ldw	r3,52(r3)
     634:	e13ffb17 	ldw	r4,-20(fp)
     638:	20c7883a 	add	r3,r4,r3
     63c:	18c20e04 	addi	r3,r3,2104
     640:	18c00003 	ldbu	r3,0(r3)
     644:	18c03fcc 	andi	r3,r3,255
     648:	18c0201c 	xori	r3,r3,128
     64c:	18ffe004 	addi	r3,r3,-128
     650:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     654:	e0bffb17 	ldw	r2,-20(fp)
     658:	10800d17 	ldw	r2,52(r2)
     65c:	10800044 	addi	r2,r2,1
     660:	10c1ffcc 	andi	r3,r2,2047
     664:	e0bffb17 	ldw	r2,-20(fp)
     668:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     66c:	e0bffa17 	ldw	r2,-24(fp)
     670:	10bfffc4 	addi	r2,r2,-1
     674:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     678:	e0bffa17 	ldw	r2,-24(fp)
     67c:	10000526 	beq	r2,zero,694 <altera_avalon_jtag_uart_irq+0x1a8>
     680:	e0bffb17 	ldw	r2,-20(fp)
     684:	10c00d17 	ldw	r3,52(r2)
     688:	e0bffb17 	ldw	r2,-20(fp)
     68c:	10800c17 	ldw	r2,48(r2)
     690:	18bfe51e 	bne	r3,r2,628 <__alt_data_end+0xfffe0628>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     694:	e0bffa17 	ldw	r2,-24(fp)
     698:	103f9d26 	beq	r2,zero,510 <__alt_data_end+0xfffe0510>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     69c:	e0bffb17 	ldw	r2,-20(fp)
     6a0:	10c00817 	ldw	r3,32(r2)
     6a4:	00bfff44 	movi	r2,-3
     6a8:	1886703a 	and	r3,r3,r2
     6ac:	e0bffb17 	ldw	r2,-20(fp)
     6b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     6b4:	e0bffb17 	ldw	r2,-20(fp)
     6b8:	10800017 	ldw	r2,0(r2)
     6bc:	10800104 	addi	r2,r2,4
     6c0:	1007883a 	mov	r3,r2
     6c4:	e0bffb17 	ldw	r2,-20(fp)
     6c8:	10800817 	ldw	r2,32(r2)
     6cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     6d0:	e0bffc17 	ldw	r2,-16(fp)
     6d4:	10800104 	addi	r2,r2,4
     6d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     6dc:	003f8c06 	br	510 <__alt_data_end+0xfffe0510>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     6e0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     6e4:	0001883a 	nop
     6e8:	e037883a 	mov	sp,fp
     6ec:	df000017 	ldw	fp,0(sp)
     6f0:	dec00104 	addi	sp,sp,4
     6f4:	f800283a 	ret

000006f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     6f8:	defff804 	addi	sp,sp,-32
     6fc:	df000715 	stw	fp,28(sp)
     700:	df000704 	addi	fp,sp,28
     704:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     708:	e0bffb17 	ldw	r2,-20(fp)
     70c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     710:	e0bff917 	ldw	r2,-28(fp)
     714:	10800017 	ldw	r2,0(r2)
     718:	10800104 	addi	r2,r2,4
     71c:	10800037 	ldwio	r2,0(r2)
     720:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     724:	e0bffa17 	ldw	r2,-24(fp)
     728:	1081000c 	andi	r2,r2,1024
     72c:	10000b26 	beq	r2,zero,75c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     730:	e0bff917 	ldw	r2,-28(fp)
     734:	10800017 	ldw	r2,0(r2)
     738:	10800104 	addi	r2,r2,4
     73c:	1007883a 	mov	r3,r2
     740:	e0bff917 	ldw	r2,-28(fp)
     744:	10800817 	ldw	r2,32(r2)
     748:	10810014 	ori	r2,r2,1024
     74c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     750:	e0bff917 	ldw	r2,-28(fp)
     754:	10000915 	stw	zero,36(r2)
     758:	00000a06 	br	784 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     75c:	e0bff917 	ldw	r2,-28(fp)
     760:	10c00917 	ldw	r3,36(r2)
     764:	00a00034 	movhi	r2,32768
     768:	10bfff04 	addi	r2,r2,-4
     76c:	10c00536 	bltu	r2,r3,784 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     770:	e0bff917 	ldw	r2,-28(fp)
     774:	10800917 	ldw	r2,36(r2)
     778:	10c00044 	addi	r3,r2,1
     77c:	e0bff917 	ldw	r2,-28(fp)
     780:	10c00915 	stw	r3,36(r2)
     784:	d0a41817 	ldw	r2,-28576(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     788:	e037883a 	mov	sp,fp
     78c:	df000017 	ldw	fp,0(sp)
     790:	dec00104 	addi	sp,sp,4
     794:	f800283a 	ret

00000798 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     798:	defffd04 	addi	sp,sp,-12
     79c:	df000215 	stw	fp,8(sp)
     7a0:	df000204 	addi	fp,sp,8
     7a4:	e13ffe15 	stw	r4,-8(fp)
     7a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     7ac:	00000506 	br	7c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     7b0:	e0bfff17 	ldw	r2,-4(fp)
     7b4:	1090000c 	andi	r2,r2,16384
     7b8:	10000226 	beq	r2,zero,7c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     7bc:	00bffd44 	movi	r2,-11
     7c0:	00000b06 	br	7f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     7c4:	e0bffe17 	ldw	r2,-8(fp)
     7c8:	10c00d17 	ldw	r3,52(r2)
     7cc:	e0bffe17 	ldw	r2,-8(fp)
     7d0:	10800c17 	ldw	r2,48(r2)
     7d4:	18800526 	beq	r3,r2,7ec <altera_avalon_jtag_uart_close+0x54>
     7d8:	e0bffe17 	ldw	r2,-8(fp)
     7dc:	10c00917 	ldw	r3,36(r2)
     7e0:	e0bffe17 	ldw	r2,-8(fp)
     7e4:	10800117 	ldw	r2,4(r2)
     7e8:	18bff136 	bltu	r3,r2,7b0 <__alt_data_end+0xfffe07b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     7ec:	0005883a 	mov	r2,zero
}
     7f0:	e037883a 	mov	sp,fp
     7f4:	df000017 	ldw	fp,0(sp)
     7f8:	dec00104 	addi	sp,sp,4
     7fc:	f800283a 	ret

00000800 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
     800:	defff504 	addi	sp,sp,-44
     804:	df000a15 	stw	fp,40(sp)
     808:	df000a04 	addi	fp,sp,40
     80c:	e13ffc15 	stw	r4,-16(fp)
     810:	e17ffd15 	stw	r5,-12(fp)
     814:	e1bffe15 	stw	r6,-8(fp)
     818:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
     81c:	e03ff615 	stw	zero,-40(fp)
     820:	d0a41817 	ldw	r2,-28576(gp)
  
  if (alt_ticks_per_second ())
     824:	10003c26 	beq	r2,zero,918 <alt_alarm_start+0x118>
  {
    if (alarm)
     828:	e0bffc17 	ldw	r2,-16(fp)
     82c:	10003826 	beq	r2,zero,910 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
     830:	e0bffc17 	ldw	r2,-16(fp)
     834:	e0fffe17 	ldw	r3,-8(fp)
     838:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	e0ffff17 	ldw	r3,-4(fp)
     844:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     848:	0005303a 	rdctl	r2,status
     84c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     850:	e0fff917 	ldw	r3,-28(fp)
     854:	00bfff84 	movi	r2,-2
     858:	1884703a 	and	r2,r3,r2
     85c:	1001703a 	wrctl	status,r2
  
  return context;
     860:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
     864:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     868:	d0a41917 	ldw	r2,-28572(gp)
      
      current_nticks = alt_nticks();
     86c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
     870:	e0fffd17 	ldw	r3,-12(fp)
     874:	e0bff617 	ldw	r2,-40(fp)
     878:	1885883a 	add	r2,r3,r2
     87c:	10c00044 	addi	r3,r2,1
     880:	e0bffc17 	ldw	r2,-16(fp)
     884:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
     888:	e0bffc17 	ldw	r2,-16(fp)
     88c:	10c00217 	ldw	r3,8(r2)
     890:	e0bff617 	ldw	r2,-40(fp)
     894:	1880042e 	bgeu	r3,r2,8a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
     898:	e0bffc17 	ldw	r2,-16(fp)
     89c:	00c00044 	movi	r3,1
     8a0:	10c00405 	stb	r3,16(r2)
     8a4:	00000206 	br	8b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
     8a8:	e0bffc17 	ldw	r2,-16(fp)
     8ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
     8b0:	e0bffc17 	ldw	r2,-16(fp)
     8b4:	d0e00104 	addi	r3,gp,-32764
     8b8:	e0fffa15 	stw	r3,-24(fp)
     8bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     8c0:	e0bffb17 	ldw	r2,-20(fp)
     8c4:	e0fffa17 	ldw	r3,-24(fp)
     8c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
     8cc:	e0bffa17 	ldw	r2,-24(fp)
     8d0:	10c00017 	ldw	r3,0(r2)
     8d4:	e0bffb17 	ldw	r2,-20(fp)
     8d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
     8dc:	e0bffa17 	ldw	r2,-24(fp)
     8e0:	10800017 	ldw	r2,0(r2)
     8e4:	e0fffb17 	ldw	r3,-20(fp)
     8e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
     8ec:	e0bffa17 	ldw	r2,-24(fp)
     8f0:	e0fffb17 	ldw	r3,-20(fp)
     8f4:	10c00015 	stw	r3,0(r2)
     8f8:	e0bff817 	ldw	r2,-32(fp)
     8fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     900:	e0bff717 	ldw	r2,-36(fp)
     904:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
     908:	0005883a 	mov	r2,zero
     90c:	00000306 	br	91c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
     910:	00bffa84 	movi	r2,-22
     914:	00000106 	br	91c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
     918:	00bfde84 	movi	r2,-134
  }
}
     91c:	e037883a 	mov	sp,fp
     920:	df000017 	ldw	fp,0(sp)
     924:	dec00104 	addi	sp,sp,4
     928:	f800283a 	ret

0000092c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     92c:	defffa04 	addi	sp,sp,-24
     930:	dfc00515 	stw	ra,20(sp)
     934:	df000415 	stw	fp,16(sp)
     938:	df000404 	addi	fp,sp,16
     93c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     940:	00800244 	movi	r2,9
     944:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     948:	014003f4 	movhi	r5,15
     94c:	29509004 	addi	r5,r5,16960
     950:	e13ffd17 	ldw	r4,-12(fp)
     954:	00010e00 	call	10e0 <__mulsi3>
     958:	100b883a 	mov	r5,r2
     95c:	0100bef4 	movhi	r4,763
     960:	213c2004 	addi	r4,r4,-3968
     964:	00010240 	call	1024 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     968:	100b883a 	mov	r5,r2
     96c:	01200034 	movhi	r4,32768
     970:	213fffc4 	addi	r4,r4,-1
     974:	00010240 	call	1024 <__udivsi3>
     978:	100b883a 	mov	r5,r2
     97c:	e13fff17 	ldw	r4,-4(fp)
     980:	00010240 	call	1024 <__udivsi3>
     984:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     988:	e0bffe17 	ldw	r2,-8(fp)
     98c:	10002a26 	beq	r2,zero,a38 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
     990:	e03ffc15 	stw	zero,-16(fp)
     994:	00001706 	br	9f4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     998:	00a00034 	movhi	r2,32768
     99c:	10bfffc4 	addi	r2,r2,-1
     9a0:	10bfffc4 	addi	r2,r2,-1
     9a4:	103ffe1e 	bne	r2,zero,9a0 <__alt_data_end+0xfffe09a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     9a8:	014003f4 	movhi	r5,15
     9ac:	29509004 	addi	r5,r5,16960
     9b0:	e13ffd17 	ldw	r4,-12(fp)
     9b4:	00010e00 	call	10e0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     9b8:	100b883a 	mov	r5,r2
     9bc:	0100bef4 	movhi	r4,763
     9c0:	213c2004 	addi	r4,r4,-3968
     9c4:	00010240 	call	1024 <__udivsi3>
     9c8:	100b883a 	mov	r5,r2
     9cc:	01200034 	movhi	r4,32768
     9d0:	213fffc4 	addi	r4,r4,-1
     9d4:	00010240 	call	1024 <__udivsi3>
     9d8:	1007883a 	mov	r3,r2
     9dc:	e0bfff17 	ldw	r2,-4(fp)
     9e0:	10c5c83a 	sub	r2,r2,r3
     9e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     9e8:	e0bffc17 	ldw	r2,-16(fp)
     9ec:	10800044 	addi	r2,r2,1
     9f0:	e0bffc15 	stw	r2,-16(fp)
     9f4:	e0fffc17 	ldw	r3,-16(fp)
     9f8:	e0bffe17 	ldw	r2,-8(fp)
     9fc:	18bfe616 	blt	r3,r2,998 <__alt_data_end+0xfffe0998>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     a00:	014003f4 	movhi	r5,15
     a04:	29509004 	addi	r5,r5,16960
     a08:	e13ffd17 	ldw	r4,-12(fp)
     a0c:	00010e00 	call	10e0 <__mulsi3>
     a10:	100b883a 	mov	r5,r2
     a14:	0100bef4 	movhi	r4,763
     a18:	213c2004 	addi	r4,r4,-3968
     a1c:	00010240 	call	1024 <__udivsi3>
     a20:	e17fff17 	ldw	r5,-4(fp)
     a24:	1009883a 	mov	r4,r2
     a28:	00010e00 	call	10e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a2c:	10bfffc4 	addi	r2,r2,-1
     a30:	103ffe1e 	bne	r2,zero,a2c <__alt_data_end+0xfffe0a2c>
     a34:	00000d06 	br	a6c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     a38:	014003f4 	movhi	r5,15
     a3c:	29509004 	addi	r5,r5,16960
     a40:	e13ffd17 	ldw	r4,-12(fp)
     a44:	00010e00 	call	10e0 <__mulsi3>
     a48:	100b883a 	mov	r5,r2
     a4c:	0100bef4 	movhi	r4,763
     a50:	213c2004 	addi	r4,r4,-3968
     a54:	00010240 	call	1024 <__udivsi3>
     a58:	e17fff17 	ldw	r5,-4(fp)
     a5c:	1009883a 	mov	r4,r2
     a60:	00010e00 	call	10e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a64:	10bfffc4 	addi	r2,r2,-1
     a68:	00bffe16 	blt	zero,r2,a64 <__alt_data_end+0xfffe0a64>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     a6c:	0005883a 	mov	r2,zero
}
     a70:	e037883a 	mov	sp,fp
     a74:	dfc00117 	ldw	ra,4(sp)
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00204 	addi	sp,sp,8
     a80:	f800283a 	ret

00000a84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     a90:	0001883a 	nop
     a94:	e037883a 	mov	sp,fp
     a98:	df000017 	ldw	fp,0(sp)
     a9c:	dec00104 	addi	sp,sp,4
     aa0:	f800283a 	ret

00000aa4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     aa4:	deffff04 	addi	sp,sp,-4
     aa8:	df000015 	stw	fp,0(sp)
     aac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
     ab0:	0001883a 	nop
     ab4:	e037883a 	mov	sp,fp
     ab8:	df000017 	ldw	fp,0(sp)
     abc:	dec00104 	addi	sp,sp,4
     ac0:	f800283a 	ret

00000ac4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     ac4:	defff904 	addi	sp,sp,-28
     ac8:	dfc00615 	stw	ra,24(sp)
     acc:	df000515 	stw	fp,20(sp)
     ad0:	df000504 	addi	fp,sp,20
     ad4:	e13ffc15 	stw	r4,-16(fp)
     ad8:	e17ffd15 	stw	r5,-12(fp)
     adc:	e1bffe15 	stw	r6,-8(fp)
     ae0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     ae4:	e0800217 	ldw	r2,8(fp)
     ae8:	d8800015 	stw	r2,0(sp)
     aec:	e1ffff17 	ldw	r7,-4(fp)
     af0:	e1bffe17 	ldw	r6,-8(fp)
     af4:	e17ffd17 	ldw	r5,-12(fp)
     af8:	e13ffc17 	ldw	r4,-16(fp)
     afc:	0000c740 	call	c74 <alt_iic_isr_register>
}  
     b00:	e037883a 	mov	sp,fp
     b04:	dfc00117 	ldw	ra,4(sp)
     b08:	df000017 	ldw	fp,0(sp)
     b0c:	dec00204 	addi	sp,sp,8
     b10:	f800283a 	ret

00000b14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     b14:	defff904 	addi	sp,sp,-28
     b18:	df000615 	stw	fp,24(sp)
     b1c:	df000604 	addi	fp,sp,24
     b20:	e13ffe15 	stw	r4,-8(fp)
     b24:	e17fff15 	stw	r5,-4(fp)
     b28:	e0bfff17 	ldw	r2,-4(fp)
     b2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b30:	0005303a 	rdctl	r2,status
     b34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b38:	e0fffb17 	ldw	r3,-20(fp)
     b3c:	00bfff84 	movi	r2,-2
     b40:	1884703a 	and	r2,r3,r2
     b44:	1001703a 	wrctl	status,r2
  
  return context;
     b48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     b4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
     b50:	00c00044 	movi	r3,1
     b54:	e0bffa17 	ldw	r2,-24(fp)
     b58:	1884983a 	sll	r2,r3,r2
     b5c:	1007883a 	mov	r3,r2
     b60:	d0a41717 	ldw	r2,-28580(gp)
     b64:	1884b03a 	or	r2,r3,r2
     b68:	d0a41715 	stw	r2,-28580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     b6c:	d0a41717 	ldw	r2,-28580(gp)
     b70:	100170fa 	wrctl	ienable,r2
     b74:	e0bffc17 	ldw	r2,-16(fp)
     b78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     b7c:	e0bffd17 	ldw	r2,-12(fp)
     b80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     b84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
     b88:	0001883a 	nop
}
     b8c:	e037883a 	mov	sp,fp
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00104 	addi	sp,sp,4
     b98:	f800283a 	ret

00000b9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     b9c:	defff904 	addi	sp,sp,-28
     ba0:	df000615 	stw	fp,24(sp)
     ba4:	df000604 	addi	fp,sp,24
     ba8:	e13ffe15 	stw	r4,-8(fp)
     bac:	e17fff15 	stw	r5,-4(fp)
     bb0:	e0bfff17 	ldw	r2,-4(fp)
     bb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     bb8:	0005303a 	rdctl	r2,status
     bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     bc0:	e0fffb17 	ldw	r3,-20(fp)
     bc4:	00bfff84 	movi	r2,-2
     bc8:	1884703a 	and	r2,r3,r2
     bcc:	1001703a 	wrctl	status,r2
  
  return context;
     bd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     bd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
     bd8:	00c00044 	movi	r3,1
     bdc:	e0bffa17 	ldw	r2,-24(fp)
     be0:	1884983a 	sll	r2,r3,r2
     be4:	0084303a 	nor	r2,zero,r2
     be8:	1007883a 	mov	r3,r2
     bec:	d0a41717 	ldw	r2,-28580(gp)
     bf0:	1884703a 	and	r2,r3,r2
     bf4:	d0a41715 	stw	r2,-28580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     bf8:	d0a41717 	ldw	r2,-28580(gp)
     bfc:	100170fa 	wrctl	ienable,r2
     c00:	e0bffc17 	ldw	r2,-16(fp)
     c04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     c10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
     c14:	0001883a 	nop
}
     c18:	e037883a 	mov	sp,fp
     c1c:	df000017 	ldw	fp,0(sp)
     c20:	dec00104 	addi	sp,sp,4
     c24:	f800283a 	ret

00000c28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     c28:	defffc04 	addi	sp,sp,-16
     c2c:	df000315 	stw	fp,12(sp)
     c30:	df000304 	addi	fp,sp,12
     c34:	e13ffe15 	stw	r4,-8(fp)
     c38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     c3c:	000530fa 	rdctl	r2,ienable
     c40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     c44:	00c00044 	movi	r3,1
     c48:	e0bfff17 	ldw	r2,-4(fp)
     c4c:	1884983a 	sll	r2,r3,r2
     c50:	1007883a 	mov	r3,r2
     c54:	e0bffd17 	ldw	r2,-12(fp)
     c58:	1884703a 	and	r2,r3,r2
     c5c:	1004c03a 	cmpne	r2,r2,zero
     c60:	10803fcc 	andi	r2,r2,255
}
     c64:	e037883a 	mov	sp,fp
     c68:	df000017 	ldw	fp,0(sp)
     c6c:	dec00104 	addi	sp,sp,4
     c70:	f800283a 	ret

00000c74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     c74:	defff504 	addi	sp,sp,-44
     c78:	dfc00a15 	stw	ra,40(sp)
     c7c:	df000915 	stw	fp,36(sp)
     c80:	df000904 	addi	fp,sp,36
     c84:	e13ffc15 	stw	r4,-16(fp)
     c88:	e17ffd15 	stw	r5,-12(fp)
     c8c:	e1bffe15 	stw	r6,-8(fp)
     c90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
     c94:	00bffa84 	movi	r2,-22
     c98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     c9c:	e0bffd17 	ldw	r2,-12(fp)
     ca0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     ca4:	e0bff817 	ldw	r2,-32(fp)
     ca8:	10800808 	cmpgei	r2,r2,32
     cac:	1000271e 	bne	r2,zero,d4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     cb0:	0005303a 	rdctl	r2,status
     cb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cb8:	e0fffb17 	ldw	r3,-20(fp)
     cbc:	00bfff84 	movi	r2,-2
     cc0:	1884703a 	and	r2,r3,r2
     cc4:	1001703a 	wrctl	status,r2
  
  return context;
     cc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     ccc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
     cd0:	00800034 	movhi	r2,0
     cd4:	108c6a04 	addi	r2,r2,12712
     cd8:	e0fff817 	ldw	r3,-32(fp)
     cdc:	180690fa 	slli	r3,r3,3
     ce0:	10c5883a 	add	r2,r2,r3
     ce4:	e0fffe17 	ldw	r3,-8(fp)
     ce8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
     cec:	00800034 	movhi	r2,0
     cf0:	108c6a04 	addi	r2,r2,12712
     cf4:	e0fff817 	ldw	r3,-32(fp)
     cf8:	180690fa 	slli	r3,r3,3
     cfc:	10c5883a 	add	r2,r2,r3
     d00:	10800104 	addi	r2,r2,4
     d04:	e0ffff17 	ldw	r3,-4(fp)
     d08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     d0c:	e0bffe17 	ldw	r2,-8(fp)
     d10:	10000526 	beq	r2,zero,d28 <alt_iic_isr_register+0xb4>
     d14:	e0bff817 	ldw	r2,-32(fp)
     d18:	100b883a 	mov	r5,r2
     d1c:	e13ffc17 	ldw	r4,-16(fp)
     d20:	0000b140 	call	b14 <alt_ic_irq_enable>
     d24:	00000406 	br	d38 <alt_iic_isr_register+0xc4>
     d28:	e0bff817 	ldw	r2,-32(fp)
     d2c:	100b883a 	mov	r5,r2
     d30:	e13ffc17 	ldw	r4,-16(fp)
     d34:	0000b9c0 	call	b9c <alt_ic_irq_disable>
     d38:	e0bff715 	stw	r2,-36(fp)
     d3c:	e0bffa17 	ldw	r2,-24(fp)
     d40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d44:	e0bff917 	ldw	r2,-28(fp)
     d48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
     d4c:	e0bff717 	ldw	r2,-36(fp)
}
     d50:	e037883a 	mov	sp,fp
     d54:	dfc00117 	ldw	ra,4(sp)
     d58:	df000017 	ldw	fp,0(sp)
     d5c:	dec00204 	addi	sp,sp,8
     d60:	f800283a 	ret

00000d64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
     d64:	defffa04 	addi	sp,sp,-24
     d68:	df000515 	stw	fp,20(sp)
     d6c:	df000504 	addi	fp,sp,20
     d70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d74:	0005303a 	rdctl	r2,status
     d78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d7c:	e0fffc17 	ldw	r3,-16(fp)
     d80:	00bfff84 	movi	r2,-2
     d84:	1884703a 	and	r2,r3,r2
     d88:	1001703a 	wrctl	status,r2
  
  return context;
     d8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
     d90:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
     d94:	e0bfff17 	ldw	r2,-4(fp)
     d98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	10800017 	ldw	r2,0(r2)
     da4:	e0fffd17 	ldw	r3,-12(fp)
     da8:	18c00117 	ldw	r3,4(r3)
     dac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
     db0:	e0bffd17 	ldw	r2,-12(fp)
     db4:	10800117 	ldw	r2,4(r2)
     db8:	e0fffd17 	ldw	r3,-12(fp)
     dbc:	18c00017 	ldw	r3,0(r3)
     dc0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
     dc4:	e0bffd17 	ldw	r2,-12(fp)
     dc8:	e0fffd17 	ldw	r3,-12(fp)
     dcc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	e0fffd17 	ldw	r3,-12(fp)
     dd8:	10c00015 	stw	r3,0(r2)
     ddc:	e0bffb17 	ldw	r2,-20(fp)
     de0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     de4:	e0bffe17 	ldw	r2,-8(fp)
     de8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
     dec:	0001883a 	nop
     df0:	e037883a 	mov	sp,fp
     df4:	df000017 	ldw	fp,0(sp)
     df8:	dec00104 	addi	sp,sp,4
     dfc:	f800283a 	ret

00000e00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
     e00:	defffb04 	addi	sp,sp,-20
     e04:	dfc00415 	stw	ra,16(sp)
     e08:	df000315 	stw	fp,12(sp)
     e0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
     e10:	d0a00117 	ldw	r2,-32764(gp)
     e14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
     e18:	d0a41917 	ldw	r2,-28572(gp)
     e1c:	10800044 	addi	r2,r2,1
     e20:	d0a41915 	stw	r2,-28572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     e24:	00002e06 	br	ee0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	10800017 	ldw	r2,0(r2)
     e30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
     e34:	e0bffd17 	ldw	r2,-12(fp)
     e38:	10800403 	ldbu	r2,16(r2)
     e3c:	10803fcc 	andi	r2,r2,255
     e40:	10000426 	beq	r2,zero,e54 <alt_tick+0x54>
     e44:	d0a41917 	ldw	r2,-28572(gp)
     e48:	1000021e 	bne	r2,zero,e54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
     e4c:	e0bffd17 	ldw	r2,-12(fp)
     e50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
     e54:	e0bffd17 	ldw	r2,-12(fp)
     e58:	10800217 	ldw	r2,8(r2)
     e5c:	d0e41917 	ldw	r3,-28572(gp)
     e60:	18801d36 	bltu	r3,r2,ed8 <alt_tick+0xd8>
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	10800403 	ldbu	r2,16(r2)
     e6c:	10803fcc 	andi	r2,r2,255
     e70:	1000191e 	bne	r2,zero,ed8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
     e74:	e0bffd17 	ldw	r2,-12(fp)
     e78:	10800317 	ldw	r2,12(r2)
     e7c:	e0fffd17 	ldw	r3,-12(fp)
     e80:	18c00517 	ldw	r3,20(r3)
     e84:	1809883a 	mov	r4,r3
     e88:	103ee83a 	callr	r2
     e8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
     e90:	e0bfff17 	ldw	r2,-4(fp)
     e94:	1000031e 	bne	r2,zero,ea4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
     e98:	e13ffd17 	ldw	r4,-12(fp)
     e9c:	0000d640 	call	d64 <alt_alarm_stop>
     ea0:	00000d06 	br	ed8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10c00217 	ldw	r3,8(r2)
     eac:	e0bfff17 	ldw	r2,-4(fp)
     eb0:	1887883a 	add	r3,r3,r2
     eb4:	e0bffd17 	ldw	r2,-12(fp)
     eb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
     ebc:	e0bffd17 	ldw	r2,-12(fp)
     ec0:	10c00217 	ldw	r3,8(r2)
     ec4:	d0a41917 	ldw	r2,-28572(gp)
     ec8:	1880032e 	bgeu	r3,r2,ed8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
     ecc:	e0bffd17 	ldw	r2,-12(fp)
     ed0:	00c00044 	movi	r3,1
     ed4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
     ed8:	e0bffe17 	ldw	r2,-8(fp)
     edc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     ee0:	e0fffd17 	ldw	r3,-12(fp)
     ee4:	d0a00104 	addi	r2,gp,-32764
     ee8:	18bfcf1e 	bne	r3,r2,e28 <__alt_data_end+0xfffe0e28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
     eec:	0001883a 	nop
}
     ef0:	0001883a 	nop
     ef4:	e037883a 	mov	sp,fp
     ef8:	dfc00117 	ldw	ra,4(sp)
     efc:	df000017 	ldw	fp,0(sp)
     f00:	dec00204 	addi	sp,sp,8
     f04:	f800283a 	ret

00000f08 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
     f08:	deffff04 	addi	sp,sp,-4
     f0c:	df000015 	stw	fp,0(sp)
     f10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
     f14:	000170fa 	wrctl	ienable,zero
}
     f18:	0001883a 	nop
     f1c:	e037883a 	mov	sp,fp
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00104 	addi	sp,sp,4
     f28:	f800283a 	ret

00000f2c <__divsi3>:
     f2c:	20001b16 	blt	r4,zero,f9c <__divsi3+0x70>
     f30:	000f883a 	mov	r7,zero
     f34:	28001616 	blt	r5,zero,f90 <__divsi3+0x64>
     f38:	200d883a 	mov	r6,r4
     f3c:	29001a2e 	bgeu	r5,r4,fa8 <__divsi3+0x7c>
     f40:	00800804 	movi	r2,32
     f44:	00c00044 	movi	r3,1
     f48:	00000106 	br	f50 <__divsi3+0x24>
     f4c:	10000d26 	beq	r2,zero,f84 <__divsi3+0x58>
     f50:	294b883a 	add	r5,r5,r5
     f54:	10bfffc4 	addi	r2,r2,-1
     f58:	18c7883a 	add	r3,r3,r3
     f5c:	293ffb36 	bltu	r5,r4,f4c <__alt_data_end+0xfffe0f4c>
     f60:	0005883a 	mov	r2,zero
     f64:	18000726 	beq	r3,zero,f84 <__divsi3+0x58>
     f68:	0005883a 	mov	r2,zero
     f6c:	31400236 	bltu	r6,r5,f78 <__divsi3+0x4c>
     f70:	314dc83a 	sub	r6,r6,r5
     f74:	10c4b03a 	or	r2,r2,r3
     f78:	1806d07a 	srli	r3,r3,1
     f7c:	280ad07a 	srli	r5,r5,1
     f80:	183ffa1e 	bne	r3,zero,f6c <__alt_data_end+0xfffe0f6c>
     f84:	38000126 	beq	r7,zero,f8c <__divsi3+0x60>
     f88:	0085c83a 	sub	r2,zero,r2
     f8c:	f800283a 	ret
     f90:	014bc83a 	sub	r5,zero,r5
     f94:	39c0005c 	xori	r7,r7,1
     f98:	003fe706 	br	f38 <__alt_data_end+0xfffe0f38>
     f9c:	0109c83a 	sub	r4,zero,r4
     fa0:	01c00044 	movi	r7,1
     fa4:	003fe306 	br	f34 <__alt_data_end+0xfffe0f34>
     fa8:	00c00044 	movi	r3,1
     fac:	003fee06 	br	f68 <__alt_data_end+0xfffe0f68>

00000fb0 <__modsi3>:
     fb0:	20001716 	blt	r4,zero,1010 <__modsi3+0x60>
     fb4:	000f883a 	mov	r7,zero
     fb8:	2005883a 	mov	r2,r4
     fbc:	28001216 	blt	r5,zero,1008 <__modsi3+0x58>
     fc0:	2900162e 	bgeu	r5,r4,101c <__modsi3+0x6c>
     fc4:	01800804 	movi	r6,32
     fc8:	00c00044 	movi	r3,1
     fcc:	00000106 	br	fd4 <__modsi3+0x24>
     fd0:	30000a26 	beq	r6,zero,ffc <__modsi3+0x4c>
     fd4:	294b883a 	add	r5,r5,r5
     fd8:	31bfffc4 	addi	r6,r6,-1
     fdc:	18c7883a 	add	r3,r3,r3
     fe0:	293ffb36 	bltu	r5,r4,fd0 <__alt_data_end+0xfffe0fd0>
     fe4:	18000526 	beq	r3,zero,ffc <__modsi3+0x4c>
     fe8:	1806d07a 	srli	r3,r3,1
     fec:	11400136 	bltu	r2,r5,ff4 <__modsi3+0x44>
     ff0:	1145c83a 	sub	r2,r2,r5
     ff4:	280ad07a 	srli	r5,r5,1
     ff8:	183ffb1e 	bne	r3,zero,fe8 <__alt_data_end+0xfffe0fe8>
     ffc:	38000126 	beq	r7,zero,1004 <__modsi3+0x54>
    1000:	0085c83a 	sub	r2,zero,r2
    1004:	f800283a 	ret
    1008:	014bc83a 	sub	r5,zero,r5
    100c:	003fec06 	br	fc0 <__alt_data_end+0xfffe0fc0>
    1010:	0109c83a 	sub	r4,zero,r4
    1014:	01c00044 	movi	r7,1
    1018:	003fe706 	br	fb8 <__alt_data_end+0xfffe0fb8>
    101c:	00c00044 	movi	r3,1
    1020:	003ff106 	br	fe8 <__alt_data_end+0xfffe0fe8>

00001024 <__udivsi3>:
    1024:	200d883a 	mov	r6,r4
    1028:	2900152e 	bgeu	r5,r4,1080 <__udivsi3+0x5c>
    102c:	28001416 	blt	r5,zero,1080 <__udivsi3+0x5c>
    1030:	00800804 	movi	r2,32
    1034:	00c00044 	movi	r3,1
    1038:	00000206 	br	1044 <__udivsi3+0x20>
    103c:	10000e26 	beq	r2,zero,1078 <__udivsi3+0x54>
    1040:	28000516 	blt	r5,zero,1058 <__udivsi3+0x34>
    1044:	294b883a 	add	r5,r5,r5
    1048:	10bfffc4 	addi	r2,r2,-1
    104c:	18c7883a 	add	r3,r3,r3
    1050:	293ffa36 	bltu	r5,r4,103c <__alt_data_end+0xfffe103c>
    1054:	18000826 	beq	r3,zero,1078 <__udivsi3+0x54>
    1058:	0005883a 	mov	r2,zero
    105c:	31400236 	bltu	r6,r5,1068 <__udivsi3+0x44>
    1060:	314dc83a 	sub	r6,r6,r5
    1064:	10c4b03a 	or	r2,r2,r3
    1068:	1806d07a 	srli	r3,r3,1
    106c:	280ad07a 	srli	r5,r5,1
    1070:	183ffa1e 	bne	r3,zero,105c <__alt_data_end+0xfffe105c>
    1074:	f800283a 	ret
    1078:	0005883a 	mov	r2,zero
    107c:	f800283a 	ret
    1080:	00c00044 	movi	r3,1
    1084:	003ff406 	br	1058 <__alt_data_end+0xfffe1058>

00001088 <__umodsi3>:
    1088:	2005883a 	mov	r2,r4
    108c:	2900122e 	bgeu	r5,r4,10d8 <__umodsi3+0x50>
    1090:	28001116 	blt	r5,zero,10d8 <__umodsi3+0x50>
    1094:	01800804 	movi	r6,32
    1098:	00c00044 	movi	r3,1
    109c:	00000206 	br	10a8 <__umodsi3+0x20>
    10a0:	30000c26 	beq	r6,zero,10d4 <__umodsi3+0x4c>
    10a4:	28000516 	blt	r5,zero,10bc <__umodsi3+0x34>
    10a8:	294b883a 	add	r5,r5,r5
    10ac:	31bfffc4 	addi	r6,r6,-1
    10b0:	18c7883a 	add	r3,r3,r3
    10b4:	293ffa36 	bltu	r5,r4,10a0 <__alt_data_end+0xfffe10a0>
    10b8:	18000626 	beq	r3,zero,10d4 <__umodsi3+0x4c>
    10bc:	1806d07a 	srli	r3,r3,1
    10c0:	11400136 	bltu	r2,r5,10c8 <__umodsi3+0x40>
    10c4:	1145c83a 	sub	r2,r2,r5
    10c8:	280ad07a 	srli	r5,r5,1
    10cc:	183ffb1e 	bne	r3,zero,10bc <__alt_data_end+0xfffe10bc>
    10d0:	f800283a 	ret
    10d4:	f800283a 	ret
    10d8:	00c00044 	movi	r3,1
    10dc:	003ff706 	br	10bc <__alt_data_end+0xfffe10bc>

000010e0 <__mulsi3>:
    10e0:	0005883a 	mov	r2,zero
    10e4:	20000726 	beq	r4,zero,1104 <__mulsi3+0x24>
    10e8:	20c0004c 	andi	r3,r4,1
    10ec:	2008d07a 	srli	r4,r4,1
    10f0:	18000126 	beq	r3,zero,10f8 <__mulsi3+0x18>
    10f4:	1145883a 	add	r2,r2,r5
    10f8:	294b883a 	add	r5,r5,r5
    10fc:	203ffa1e 	bne	r4,zero,10e8 <__alt_data_end+0xfffe10e8>
    1100:	f800283a 	ret
    1104:	f800283a 	ret
